
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	80 15 00 20 8d 16 00 00 7b 42 00 00 61 16 00 00     ... ....{B..a...
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	61 16 00 00 61 16 00 00 61 16 00 00 00 00 00 00     a...a...a.......
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	c9 12 00 00 61 16 00 00 00 00 00 00 75 12 00 00     ....a.......u...
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	61 16 00 00                                         a...

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	79 13 00 00 79 13 00 00 79 13 00 00 79 13 00 00     y...y...y...y...
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	79 13 00 00 79 13 00 00 79 13 00 00 79 13 00 00     y...y...y...y...

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
  60:	79 13 00 00 79 13 00 00 79 13 00 00 79 13 00 00     y...y...y...y...
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	79 13 00 00 79 13 00 00 79 13 00 00 79 13 00 00     y...y...y...y...
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	79 13 00 00 79 13 00 00 79 13 00 00 79 13 00 00     y...y...y...y...
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
  90:	79 13 00 00 79 13 00 00 79 13 00 00 79 13 00 00     y...y...y...y...
				if (buf0 != NULL) {
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
  a0:	79 13 00 00 79 13 00 00 79 13 00 00 79 13 00 00     y...y...y...y...
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
  b0:	79 13 00 00 79 13 00 00 79 13 00 00 79 13 00 00     y...y...y...y...
			switch (*fmt) {
  c0:	79 13 00 00 79 13 00 00 79 13 00 00 79 13 00 00     y...y...y...y...
  d0:	79 13 00 00 79 13 00 00 79 13 00 00                 y...y...y...

Disassembly of section text:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295
      ec:	f04f 30ff 	movne.w	r0, #4294967295
      f0:	f000 b80c 	b.w	10c <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f808 	bl	110 <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__aeabi_idiv0>:
     10c:	4770      	bx	lr
     10e:	bf00      	nop

00000110 <__udivmoddi4>:
     110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     114:	4686      	mov	lr, r0
     116:	468c      	mov	ip, r1
     118:	4608      	mov	r0, r1
     11a:	9e08      	ldr	r6, [sp, #32]
     11c:	4615      	mov	r5, r2
				align = VA_STACK_ALIGN(void *);
     11e:	4674      	mov	r4, lr
     120:	4619      	mov	r1, r3
     122:	2b00      	cmp	r3, #0
			switch (*fmt) {
     124:	f040 80c2 	bne.w	2ac <CONFIG_FLASH_SIZE+0xac>
     128:	4285      	cmp	r5, r0
     12a:	fab2 f282 	clz	r2, r2
     12e:	d945      	bls.n	1bc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4f>
     130:	b14a      	cbz	r2, 146 <CONFIG_IDLE_STACK_SIZE+0x6>
     132:	f1c2 0320 	rsb	r3, r2, #32
     136:	fa00 fc02 	lsl.w	ip, r0, r2
     13a:	fa2e f303 	lsr.w	r3, lr, r3
     13e:	4095      	lsls	r5, r2
     140:	ea43 0c0c 	orr.w	ip, r3, ip
		buf = (void *) ROUND_UP(buf, align);
     144:	4094      	lsls	r4, r2
     146:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     14a:	b2a8      	uxth	r0, r5
     14c:	fbbc f8fe 	udiv	r8, ip, lr
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     150:	0c23      	lsrs	r3, r4, #16
     152:	fb0e cc18 	mls	ip, lr, r8, ip
     156:	fb08 f900 	mul.w	r9, r8, r0
     15a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     15e:	4599      	cmp	r9, r3
		if (is_str_arg) {
     160:	d928      	bls.n	1b4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x47>
     162:	18eb      	adds	r3, r5, r3
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     164:	f108 37ff 	add.w	r7, r8, #4294967295
			int v = va_arg(ap, int);
     168:	d204      	bcs.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     16a:	4599      	cmp	r9, r3

			if (buf0 != NULL) {
				*(int *)buf = v;
     16c:	d902      	bls.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
			}
			buf += sizeof(int);
     16e:	f1a8 0702 	sub.w	r7, r8, #2
     172:	442b      	add	r3, r5
				arg_idx--;
     174:	eba3 0309 	sub.w	r3, r3, r9
     178:	b2a4      	uxth	r4, r4
				parsing = false;
     17a:	fbb3 fcfe 	udiv	ip, r3, lr
				continue;
     17e:	fb0e 331c 	mls	r3, lr, ip, r3
				if (fmt[-1] == 'l') {
     182:	fb0c f000 	mul.w	r0, ip, r0
     186:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
					if (fmt[-2] == 'l') {
     18a:	42a0      	cmp	r0, r4
     18c:	d914      	bls.n	1b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4b>
     18e:	192c      	adds	r4, r5, r4
				parsing = false;
     190:	f10c 33ff 	add.w	r3, ip, #4294967295
						align = VA_STACK_ALIGN(long long);
     194:	d204      	bcs.n	1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>
     196:	42a0      	cmp	r0, r4
				size = sizeof(void *);
     198:	d902      	bls.n	1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>
     19a:	f1ac 0302 	sub.w	r3, ip, #2
					v.ld = va_arg(ap, long double);
     19e:	442c      	add	r4, r5
     1a0:	1a24      	subs	r4, r4, r0
     1a2:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     1a6:	b11e      	cbz	r6, 1b0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x43>
     1a8:	40d4      	lsrs	r4, r2
				buf = (void *) ROUND_UP(buf, align);
     1aa:	2300      	movs	r3, #0
     1ac:	6034      	str	r4, [r6, #0]
				if (buf0 != NULL) {
     1ae:	6073      	str	r3, [r6, #4]
					if (BUF_OFFSET + size > len) {
     1b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b4:	4647      	mov	r7, r8
     1b6:	e7dd      	b.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     1b8:	4663      	mov	r3, ip
						*(long double *)buf = v.ld;
     1ba:	e7f1      	b.n	1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>
     1bc:	bb92      	cbnz	r2, 224 <CONFIG_FLASH_SIZE+0x24>
				buf += size;
     1be:	1b43      	subs	r3, r0, r5
				parsing = false;
     1c0:	2101      	movs	r1, #1
     1c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
			switch (*fmt) {
     1c6:	b2af      	uxth	r7, r5
     1c8:	fbb3 fcfe 	udiv	ip, r3, lr
			if (*++fmt == '\0') {
     1cc:	0c20      	lsrs	r0, r4, #16
     1ce:	fb0e 331c 	mls	r3, lr, ip, r3
			if (!parsing) {
     1d2:	fb0c f807 	mul.w	r8, ip, r7
     1d6:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
				if (*fmt == '%') {
     1da:	4598      	cmp	r8, r3
     1dc:	d962      	bls.n	2a4 <CONFIG_FLASH_SIZE+0xa4>
					arg_idx++;
     1de:	18eb      	adds	r3, r5, r3
     1e0:	f10c 30ff 	add.w	r0, ip, #4294967295
					parsing = true;
     1e4:	d204      	bcs.n	1f0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x83>
     1e6:	4598      	cmp	r8, r3
				align = VA_STACK_ALIGN(size_t);
     1e8:	d902      	bls.n	1f0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x83>
     1ea:	f1ac 0002 	sub.w	r0, ip, #2
			switch (*fmt) {
     1ee:	442b      	add	r3, r5
     1f0:	eba3 0308 	sub.w	r3, r3, r8
				parsing = false;
     1f4:	b2a4      	uxth	r4, r4
     1f6:	fbb3 fcfe 	udiv	ip, r3, lr

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1fa:	fb0e 331c 	mls	r3, lr, ip, r3
					return -EINVAL;
     1fe:	fb0c f707 	mul.w	r7, ip, r7
			long long v = va_arg(ap, long long);
     202:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     206:	42a7      	cmp	r7, r4
     208:	d94e      	bls.n	2a8 <CONFIG_FLASH_SIZE+0xa8>
     20a:	192c      	adds	r4, r5, r4
     20c:	f10c 33ff 	add.w	r3, ip, #4294967295

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     210:	d204      	bcs.n	21c <CONFIG_FLASH_SIZE+0x1c>
				}
			}
			buf += sizeof(long long);
     212:	42a7      	cmp	r7, r4
     214:	d902      	bls.n	21c <CONFIG_FLASH_SIZE+0x1c>
     216:	f1ac 0302 	sub.w	r3, ip, #2
		} else if (size == sizeof(int)) {
     21a:	442c      	add	r4, r5
     21c:	1be4      	subs	r4, r4, r7
			int v = va_arg(ap, int);
     21e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
			if (buf0 != NULL) {
     222:	e7c0      	b.n	1a6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x39>
		} else if (size == sizeof(long long)) {
     224:	f1c2 0320 	rsb	r3, r2, #32
			long long v = va_arg(ap, long long);
     228:	fa20 f103 	lsr.w	r1, r0, r3
     22c:	4095      	lsls	r5, r2
     22e:	4090      	lsls	r0, r2
     230:	fa2e f303 	lsr.w	r3, lr, r3
			if (buf0 != NULL) {
     234:	4303      	orrs	r3, r0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     23a:	b2af      	uxth	r7, r5
			s = va_arg(ap, char *);
     23c:	fbb1 fcfe 	udiv	ip, r1, lr
     240:	fb0e 101c 	mls	r0, lr, ip, r1
			if (is_ro && !do_ro) {
     244:	0c19      	lsrs	r1, r3, #16
     246:	fb0c f807 	mul.w	r8, ip, r7
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     24a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     24e:	4588      	cmp	r8, r1
     250:	fa04 f402 	lsl.w	r4, r4, r2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     254:	d922      	bls.n	29c <CONFIG_FLASH_SIZE+0x9c>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     256:	1869      	adds	r1, r5, r1
     258:	f10c 30ff 	add.w	r0, ip, #4294967295
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     25c:	d204      	bcs.n	268 <CONFIG_FLASH_SIZE+0x68>
     25e:	4588      	cmp	r8, r1
				if (buf0 != NULL) {
     260:	d902      	bls.n	268 <CONFIG_FLASH_SIZE+0x68>
					str_ptr_pos[s_idx] = s_ptr_idx;
     262:	f1ac 0002 	sub.w	r0, ip, #2
     266:	4429      	add	r1, r5
     268:	eba1 0108 	sub.w	r1, r1, r8
					str_ptr_arg[s_idx] = arg_idx;
     26c:	b29b      	uxth	r3, r3
					str_ptr_pos[s_idx] = s_ptr_idx;
     26e:	fbb1 fcfe 	udiv	ip, r1, lr
					str_ptr_arg[s_idx] = arg_idx;
     272:	fb0e 111c 	mls	r1, lr, ip, r1
					if (is_ro) {
     276:	fb0c f707 	mul.w	r7, ip, r7
     27a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     27e:	429f      	cmp	r7, r3
     280:	d90e      	bls.n	2a0 <CONFIG_FLASH_SIZE+0xa0>
     282:	18eb      	adds	r3, r5, r3
     284:	f10c 31ff 	add.w	r1, ip, #4294967295
						s_ro_cnt++;
     288:	d204      	bcs.n	294 <CONFIG_FLASH_SIZE+0x94>
				s_idx++;
     28a:	429f      	cmp	r7, r3
					if (BUF_OFFSET + size > len) {
     28c:	d902      	bls.n	294 <CONFIG_FLASH_SIZE+0x94>
     28e:	f1ac 0102 	sub.w	r1, ip, #2
     292:	442b      	add	r3, r5
			switch (*fmt) {
     294:	1bdb      	subs	r3, r3, r7
     296:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     29a:	e792      	b.n	1c2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x55>
     29c:	4660      	mov	r0, ip
     29e:	e7e3      	b.n	268 <CONFIG_FLASH_SIZE+0x68>
				} else if (is_ro) {
     2a0:	4661      	mov	r1, ip
     2a2:	e7f7      	b.n	294 <CONFIG_FLASH_SIZE+0x94>
     2a4:	4660      	mov	r0, ip
					len += 1;
     2a6:	e7a3      	b.n	1f0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x83>
     2a8:	4663      	mov	r3, ip
				} else if (rws_pos_en) {
     2aa:	e7b7      	b.n	21c <CONFIG_FLASH_SIZE+0x1c>
					len += 2;
     2ac:	4283      	cmp	r3, r0
				} else if (rws_pos_en) {
     2ae:	d906      	bls.n	2be <CONFIG_FLASH_SIZE+0xbe>
     2b0:	b916      	cbnz	r6, 2b8 <CONFIG_FLASH_SIZE+0xb8>
					len += strlen(s) + 1 + 1;
     2b2:	2100      	movs	r1, #0
     2b4:	4608      	mov	r0, r1
     2b6:	e77b      	b.n	1b0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x43>
     2b8:	e9c6 e000 	strd	lr, r0, [r6]
     2bc:	e7f9      	b.n	2b2 <CONFIG_FLASH_SIZE+0xb2>
     2be:	fab3 f783 	clz	r7, r3
     2c2:	b98f      	cbnz	r7, 2e8 <CONFIG_FLASH_SIZE+0xe8>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     2c4:	4283      	cmp	r3, r0
     2c6:	d301      	bcc.n	2cc <CONFIG_FLASH_SIZE+0xcc>
     2c8:	4572      	cmp	r2, lr
     2ca:	d808      	bhi.n	2de <CONFIG_FLASH_SIZE+0xde>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     2cc:	ebbe 0402 	subs.w	r4, lr, r2
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     2d0:	eb60 0303 	sbc.w	r3, r0, r3
     2d4:	2001      	movs	r0, #1
     2d6:	469c      	mov	ip, r3
     2d8:	b91e      	cbnz	r6, 2e2 <CONFIG_FLASH_SIZE+0xe2>
     2da:	2100      	movs	r1, #0
     2dc:	e768      	b.n	1b0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x43>
     2de:	4638      	mov	r0, r7
	*(char **)buf0 = NULL;

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);

	if (rws_pos_en) {
     2e0:	e7fa      	b.n	2d8 <CONFIG_FLASH_SIZE+0xd8>
	*(char **)buf0 = NULL;
     2e2:	e9c6 4c00 	strd	r4, ip, [r6]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     2e6:	e7f8      	b.n	2da <CONFIG_FLASH_SIZE+0xda>
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2e8:	f1c7 0c20 	rsb	ip, r7, #32
	if (rws_pos_en) {
     2ec:	40bb      	lsls	r3, r7
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2ee:	fa22 f40c 	lsr.w	r4, r2, ip
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     2f2:	431c      	orrs	r4, r3
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     2f4:	fa2e f10c 	lsr.w	r1, lr, ip
     2f8:	fa20 f30c 	lsr.w	r3, r0, ip
		for (i = 0; i < s_idx; i++) {
     2fc:	40b8      	lsls	r0, r7
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     2fe:	4301      	orrs	r1, r0
     300:	ea4f 4914 	mov.w	r9, r4, lsr #16
		for (i = 0; i < s_idx; i++) {
     304:	fa0e f507 	lsl.w	r5, lr, r7
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     308:	fbb3 f8f9 	udiv	r8, r3, r9
     30c:	fa1f fe84 	uxth.w	lr, r4
			*buf++ = str_ptr_arg[i];
     310:	fb09 3018 	mls	r0, r9, r8, r3
     314:	0c0b      	lsrs	r3, r1, #16
     316:	fb08 fa0e 	mul.w	sl, r8, lr
	for (i = 0; i < s_idx; i++) {
     31a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     31e:	459a      	cmp	sl, r3
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     320:	fa02 f207 	lsl.w	r2, r2, r7
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     324:	d940      	bls.n	3a8 <CONFIG_FLASH_SIZE+0x1a8>
     326:	18e3      	adds	r3, r4, r3
     328:	f108 30ff 	add.w	r0, r8, #4294967295
			if (BUF_OFFSET + 1 > len) {
     32c:	d204      	bcs.n	338 <CONFIG_FLASH_SIZE+0x138>
     32e:	459a      	cmp	sl, r3
     330:	d902      	bls.n	338 <CONFIG_FLASH_SIZE+0x138>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     332:	f1a8 0002 	sub.w	r0, r8, #2
			if (BUF_OFFSET + 1 > len) {
     336:	4423      	add	r3, r4
     338:	eba3 030a 	sub.w	r3, r3, sl
			*buf++ = pos;
     33c:	b289      	uxth	r1, r1
		for (i = 0; i < s_idx; i++) {
     33e:	fbb3 f8f9 	udiv	r8, r3, r9
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     342:	fb09 3318 	mls	r3, r9, r8, r3
     346:	fb08 fe0e 	mul.w	lr, r8, lr
     34a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     34e:	458e      	cmp	lr, r1
		if (rws_pos_en) {
     350:	d92c      	bls.n	3ac <CONFIG_FLASH_SIZE+0x1ac>
     352:	1861      	adds	r1, r4, r1
			*buf++ = str_ptr_arg[i];
     354:	f108 33ff 	add.w	r3, r8, #4294967295
     358:	d204      	bcs.n	364 <CONFIG_FLASH_SIZE+0x164>
     35a:	458e      	cmp	lr, r1
			size = 0;
     35c:	d902      	bls.n	364 <CONFIG_FLASH_SIZE+0x164>
		if (BUF_OFFSET + 1 + size > len) {
     35e:	f1a8 0302 	sub.w	r3, r8, #2
     362:	4421      	add	r1, r4
     364:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     368:	fba0 9802 	umull	r9, r8, r0, r2
		*buf++ = str_ptr_pos[i];
     36c:	eba1 010e 	sub.w	r1, r1, lr
     370:	4541      	cmp	r1, r8
		memcpy(buf, s, size);
     372:	46ce      	mov	lr, r9
     374:	4643      	mov	r3, r8
     376:	d302      	bcc.n	37e <CONFIG_FLASH_SIZE+0x17e>
     378:	d106      	bne.n	388 <CONFIG_FLASH_SIZE+0x188>
     37a:	454d      	cmp	r5, r9
		buf += size;
     37c:	d204      	bcs.n	388 <CONFIG_FLASH_SIZE+0x188>
     37e:	ebb9 0e02 	subs.w	lr, r9, r2
	for (i = 0; i < s_idx; i++) {
     382:	eb68 0304 	sbc.w	r3, r8, r4
     386:	3801      	subs	r0, #1
     388:	2e00      	cmp	r6, #0
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     38a:	d0a6      	beq.n	2da <CONFIG_FLASH_SIZE+0xda>
     38c:	ebb5 020e 	subs.w	r2, r5, lr
     390:	eb61 0103 	sbc.w	r1, r1, r3
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     394:	fa01 fc0c 	lsl.w	ip, r1, ip
     398:	fa22 f307 	lsr.w	r3, r2, r7
			size = strlen(s) + 1;
     39c:	ea4c 0303 	orr.w	r3, ip, r3
     3a0:	40f9      	lsrs	r1, r7
     3a2:	e9c6 3100 	strd	r3, r1, [r6]
		return -EFAULT;
     3a6:	e798      	b.n	2da <CONFIG_FLASH_SIZE+0xda>
     3a8:	4640      	mov	r0, r8
     3aa:	e7c5      	b.n	338 <CONFIG_FLASH_SIZE+0x138>
     3ac:	4643      	mov	r3, r8
     3ae:	e7d9      	b.n	364 <CONFIG_FLASH_SIZE+0x164>

000003b0 <pin_isr>:
static struct gpio_callback button3_cb_data;
static struct gpio_callback button4_cb_data;


static void pin_isr(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
     3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//printf("button pressed (pin %u ) \n",pins);
	for (int i = 0; i <= 16; i++) {
        if (pins & (1 << i)) {
            printf("button pressed (pin %d)\n", i);
     3b2:	4f08      	ldr	r7, [pc, #32]	; (3d4 <pin_isr+0x24>)
{
     3b4:	4615      	mov	r5, r2
	for (int i = 0; i <= 16; i++) {
     3b6:	2400      	movs	r4, #0
        if (pins & (1 << i)) {
     3b8:	2601      	movs	r6, #1
     3ba:	fa06 f304 	lsl.w	r3, r6, r4
     3be:	422b      	tst	r3, r5
     3c0:	d003      	beq.n	3ca <pin_isr+0x1a>
            printf("button pressed (pin %d)\n", i);
     3c2:	4621      	mov	r1, r4
     3c4:	4638      	mov	r0, r7
     3c6:	f001 fabf 	bl	1948 <printf>
	for (int i = 0; i <= 16; i++) {
     3ca:	3401      	adds	r4, #1
     3cc:	2c11      	cmp	r4, #17
     3ce:	d1f4      	bne.n	3ba <pin_isr+0xa>
        }
    }
}
     3d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3d2:	bf00      	nop
     3d4:	00004ce4 	.word	0x00004ce4

000003d8 <gpio_add_callback.constprop.0.isra.0>:
 * handler invocation, but whether they are invoked for the current
 * GPIO event is not specified.
 *
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
     3d8:	4601      	mov	r1, r0
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
     3da:	4803      	ldr	r0, [pc, #12]	; (3e8 <gpio_add_callback.constprop.0.isra.0+0x10>)
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
     3dc:	6883      	ldr	r3, [r0, #8]
     3de:	69db      	ldr	r3, [r3, #28]
     3e0:	b10b      	cbz	r3, 3e6 <gpio_add_callback.constprop.0.isra.0+0xe>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
     3e2:	2201      	movs	r2, #1
     3e4:	4718      	bx	r3
}
     3e6:	4770      	bx	lr
     3e8:	000049dc 	.word	0x000049dc

000003ec <main>:

int main(void)
{	
     3ec:	b538      	push	{r3, r4, r5, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     3ee:	4c42      	ldr	r4, [pc, #264]	; (4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>)
     3f0:	4620      	mov	r0, r4
     3f2:	f004 f9be 	bl	4772 <z_device_is_ready>

	int ret;

	if (!gpio_is_ready_dt(&red_led)) {
     3f6:	2800      	cmp	r0, #0
     3f8:	d07c      	beq.n	4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>
     3fa:	4620      	mov	r0, r4
     3fc:	f004 f9b9 	bl	4772 <z_device_is_ready>
		return 0;
	}
	if (!gpio_is_ready_dt(&blue_led)) {
     400:	2800      	cmp	r0, #0
     402:	d077      	beq.n	4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>
		return 0;
	}

	ret = gpio_pin_configure_dt(&red_led, GPIO_OUTPUT | GPIO_ACTIVE_LOW);
     404:	493d      	ldr	r1, [pc, #244]	; (4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>)
     406:	483e      	ldr	r0, [pc, #248]	; (500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>)
     408:	f003 fdaa 	bl	3f60 <gpio_pin_configure_dt>
	if (ret < 0) {
     40c:	2800      	cmp	r0, #0
     40e:	db71      	blt.n	4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>
		return 0;
	}

	ret = gpio_pin_configure_dt(&blue_led, GPIO_OUTPUT | GPIO_ACTIVE_LOW);
     410:	493a      	ldr	r1, [pc, #232]	; (4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>)
     412:	483c      	ldr	r0, [pc, #240]	; (504 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c>)
     414:	f003 fda4 	bl	3f60 <gpio_pin_configure_dt>
	if (ret < 0) {
     418:	2800      	cmp	r0, #0
     41a:	db6b      	blt.n	4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>
		return 0;
	}

	ret = gpio_pin_configure_dt(&button1, GPIO_INPUT);
     41c:	483a      	ldr	r0, [pc, #232]	; (508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>)
     41e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     422:	f003 fd9d 	bl	3f60 <gpio_pin_configure_dt>
	if (ret < 0) {
     426:	2800      	cmp	r0, #0
     428:	db64      	blt.n	4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>
		return 0;
	}

	ret = gpio_pin_configure_dt(&button2, GPIO_INPUT);
     42a:	4838      	ldr	r0, [pc, #224]	; (50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>)
     42c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     430:	f003 fd96 	bl	3f60 <gpio_pin_configure_dt>
	if (ret < 0) {
     434:	2800      	cmp	r0, #0
     436:	db5d      	blt.n	4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>
		return 0;
	}

	ret = gpio_pin_configure_dt(&button3, GPIO_INPUT);
     438:	4835      	ldr	r0, [pc, #212]	; (510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>)
     43a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     43e:	f003 fd8f 	bl	3f60 <gpio_pin_configure_dt>
	if (ret < 0) {
     442:	2800      	cmp	r0, #0
     444:	db56      	blt.n	4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>
		return 0;
	}

	ret = gpio_pin_configure_dt(&button4, GPIO_INPUT);
     446:	4833      	ldr	r0, [pc, #204]	; (514 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c>)
     448:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     44c:	f003 fd88 	bl	3f60 <gpio_pin_configure_dt>
	if (ret < 0) {
     450:	2800      	cmp	r0, #0
     452:	db4f      	blt.n	4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>
	}

	//configure_gpios();


	gpio_pin_interrupt_configure_dt(&button1,GPIO_INT_EDGE_TO_ACTIVE);
     454:	482c      	ldr	r0, [pc, #176]	; (508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>)
	callback->handler = handler;
     456:	4d30      	ldr	r5, [pc, #192]	; (518 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x30>)
     458:	f003 fd9f 	bl	3f9a <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	gpio_pin_interrupt_configure_dt(&button2,GPIO_INT_EDGE_TO_ACTIVE);
     45c:	482b      	ldr	r0, [pc, #172]	; (50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>)
     45e:	f003 fd9c 	bl	3f9a <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	gpio_pin_interrupt_configure_dt(&button3,GPIO_INT_EDGE_TO_ACTIVE);
     462:	482b      	ldr	r0, [pc, #172]	; (510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>)
     464:	f003 fd99 	bl	3f9a <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	gpio_pin_interrupt_configure_dt(&button4,GPIO_INT_EDGE_TO_ACTIVE);
     468:	482a      	ldr	r0, [pc, #168]	; (514 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c>)
     46a:	f003 fd96 	bl	3f9a <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
     46e:	482b      	ldr	r0, [pc, #172]	; (51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>)
	callback->pin_mask = pin_mask;
     470:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     474:	6083      	str	r3, [r0, #8]
	callback->handler = handler;
     476:	6045      	str	r5, [r0, #4]

	gpio_init_callback(&button1_cb_data, pin_isr, BIT(button1.pin));
	gpio_add_callback(button1.port, &button1_cb_data);
     478:	f7ff ffae 	bl	3d8 <gpio_add_callback.constprop.0.isra.0>
	printk("Set up button at %s pin %d\n", button1.port->name, button1.pin);
     47c:	6824      	ldr	r4, [r4, #0]
     47e:	4828      	ldr	r0, [pc, #160]	; (520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>)
     480:	4621      	mov	r1, r4
     482:	220d      	movs	r2, #13
     484:	f003 fda1 	bl	3fca <printk>
     488:	4826      	ldr	r0, [pc, #152]	; (524 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3c>)
	callback->pin_mask = pin_mask;
     48a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
     48e:	6083      	str	r3, [r0, #8]
	callback->handler = handler;
     490:	6045      	str	r5, [r0, #4]

	gpio_init_callback(&button2_cb_data, pin_isr, BIT(button2.pin));
	gpio_add_callback(button2.port, &button2_cb_data);
     492:	f7ff ffa1 	bl	3d8 <gpio_add_callback.constprop.0.isra.0>
	printk("Set up button at %s pin %d\n", button2.port->name, button2.pin);
     496:	4621      	mov	r1, r4
     498:	220e      	movs	r2, #14
     49a:	4821      	ldr	r0, [pc, #132]	; (520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>)
     49c:	f003 fd95 	bl	3fca <printk>
     4a0:	4821      	ldr	r0, [pc, #132]	; (528 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x40>)
	callback->pin_mask = pin_mask;
     4a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     4a6:	6083      	str	r3, [r0, #8]
	callback->handler = handler;
     4a8:	6045      	str	r5, [r0, #4]

	gpio_init_callback(&button3_cb_data, pin_isr, BIT(button3.pin));
	gpio_add_callback(button3.port, &button3_cb_data);
     4aa:	f7ff ff95 	bl	3d8 <gpio_add_callback.constprop.0.isra.0>
	printk("Set up button at %s pin %d\n", button3.port->name, button3.pin);
     4ae:	4621      	mov	r1, r4
     4b0:	220f      	movs	r2, #15
     4b2:	481b      	ldr	r0, [pc, #108]	; (520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>)
     4b4:	f003 fd89 	bl	3fca <printk>
     4b8:	481c      	ldr	r0, [pc, #112]	; (52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>)
	callback->pin_mask = pin_mask;
     4ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	callback->handler = handler;
     4be:	6045      	str	r5, [r0, #4]
	callback->pin_mask = pin_mask;
     4c0:	6083      	str	r3, [r0, #8]

	gpio_init_callback(&button4_cb_data, pin_isr, BIT(button4.pin));
	gpio_add_callback(button4.port, &button4_cb_data);
     4c2:	f7ff ff89 	bl	3d8 <gpio_add_callback.constprop.0.isra.0>
	printk("Set up button at %s pin %d\n", button4.port->name, button4.pin);
     4c6:	4621      	mov	r1, r4
     4c8:	4815      	ldr	r0, [pc, #84]	; (520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>)


	//configure_gpio();
	
	while (1) {
		ret = gpio_pin_toggle_dt(&red_led);
     4ca:	4c0d      	ldr	r4, [pc, #52]	; (500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>)
		if (ret < 0) {
			return 0;
		}
		ret = gpio_pin_toggle_dt(&blue_led);
     4cc:	4d0d      	ldr	r5, [pc, #52]	; (504 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c>)
	printk("Set up button at %s pin %d\n", button4.port->name, button4.pin);
     4ce:	2210      	movs	r2, #16
     4d0:	f003 fd7b 	bl	3fca <printk>
		ret = gpio_pin_toggle_dt(&red_led);
     4d4:	4620      	mov	r0, r4
     4d6:	f003 fd58 	bl	3f8a <gpio_pin_toggle_dt>
		if (ret < 0) {
     4da:	2800      	cmp	r0, #0
     4dc:	db0a      	blt.n	4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>
		ret = gpio_pin_toggle_dt(&blue_led);
     4de:	4628      	mov	r0, r5
     4e0:	f003 fd53 	bl	3f8a <gpio_pin_toggle_dt>
		if (ret < 0) {
     4e4:	2800      	cmp	r0, #0
     4e6:	db05      	blt.n	4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     4e8:	2100      	movs	r1, #0
     4ea:	f44f 3080 	mov.w	r0, #65536	; 0x10000
     4ee:	f003 fb57 	bl	3ba0 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     4f2:	e7ef      	b.n	4d4 <CONFIG_MAIN_STACK_SIZE+0xd4>
			return 0;
		}
		k_msleep(2000);
	}
	return 0;
}
     4f4:	2000      	movs	r0, #0
     4f6:	bd38      	pop	{r3, r4, r5, pc}
     4f8:	000049dc 	.word	0x000049dc
     4fc:	00020001 	.word	0x00020001
     500:	00004be0 	.word	0x00004be0
     504:	00004bd8 	.word	0x00004bd8
     508:	00004bd0 	.word	0x00004bd0
     50c:	00004bc8 	.word	0x00004bc8
     510:	00004bc0 	.word	0x00004bc0
     514:	00004bb8 	.word	0x00004bb8
     518:	000003b1 	.word	0x000003b1
     51c:	200001fc 	.word	0x200001fc
     520:	00004cfd 	.word	0x00004cfd
     524:	200001f0 	.word	0x200001f0
     528:	200001e4 	.word	0x200001e4
     52c:	200001d8 	.word	0x200001d8

00000530 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
     530:	4b01      	ldr	r3, [pc, #4]	; (538 <char_out+0x8>)
     532:	681b      	ldr	r3, [r3, #0]
     534:	4718      	bx	r3
     536:	bf00      	nop
     538:	20000000 	.word	0x20000000

0000053c <__printk_hook_install>:
	_char_out = fn;
     53c:	4b01      	ldr	r3, [pc, #4]	; (544 <__printk_hook_install+0x8>)
     53e:	6018      	str	r0, [r3, #0]
}
     540:	4770      	bx	lr
     542:	bf00      	nop
     544:	20000000 	.word	0x20000000

00000548 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     548:	b507      	push	{r0, r1, r2, lr}
     54a:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     54c:	2100      	movs	r1, #0
     54e:	4602      	mov	r2, r0
     550:	9100      	str	r1, [sp, #0]
     552:	4803      	ldr	r0, [pc, #12]	; (560 <vprintk+0x18>)
     554:	f000 f914 	bl	780 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     558:	b003      	add	sp, #12
     55a:	f85d fb04 	ldr.w	pc, [sp], #4
     55e:	bf00      	nop
     560:	00000531 	.word	0x00000531

00000564 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     568:	8b05      	ldrh	r5, [r0, #24]
{
     56a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     56c:	0728      	lsls	r0, r5, #28
{
     56e:	4690      	mov	r8, r2
	if (processing) {
     570:	d411      	bmi.n	596 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
     572:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     574:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     578:	f040 80cd 	bne.w	716 <process_event+0x1b2>
			evt = process_recheck(mgr);
     57c:	4620      	mov	r0, r4
     57e:	f003 fd3b 	bl	3ff8 <process_recheck>
		}

		if (evt == EVT_NOP) {
     582:	b178      	cbz	r0, 5a4 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
     584:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     586:	8b21      	ldrh	r1, [r4, #24]
     588:	2804      	cmp	r0, #4
     58a:	d811      	bhi.n	5b0 <process_event+0x4c>
     58c:	e8df f000 	tbb	[pc, r0]
     590:	856d10c3 	.word	0x856d10c3
     594:	95          	.byte	0x95
     595:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
     596:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     598:	bf0c      	ite	eq
     59a:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
     59e:	f045 0520 	orrne.w	r5, r5, #32
     5a2:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     5a4:	f388 8811 	msr	BASEPRI, r8
     5a8:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     5ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     5b0:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     5b4:	45aa      	cmp	sl, r5
     5b6:	f000 80a6 	beq.w	706 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
     5ba:	2700      	movs	r7, #0
     5bc:	46b9      	mov	r9, r7
     5be:	463e      	mov	r6, r7
     5c0:	68a3      	ldr	r3, [r4, #8]
     5c2:	2b00      	cmp	r3, #0
     5c4:	f000 80bd 	beq.w	742 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     5c8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     5cc:	8321      	strh	r1, [r4, #24]
     5ce:	f388 8811 	msr	BASEPRI, r8
     5d2:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     5d6:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     5d8:	2900      	cmp	r1, #0
     5da:	f000 80bb 	beq.w	754 <process_event+0x1f0>
	return node->next;
     5de:	680d      	ldr	r5, [r1, #0]
     5e0:	2900      	cmp	r1, #0
     5e2:	f000 80b7 	beq.w	754 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
     5e6:	f8d1 8004 	ldr.w	r8, [r1, #4]
     5ea:	4633      	mov	r3, r6
     5ec:	4652      	mov	r2, sl
     5ee:	4620      	mov	r0, r4
     5f0:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     5f2:	2d00      	cmp	r5, #0
     5f4:	d076      	beq.n	6e4 <process_event+0x180>
     5f6:	682b      	ldr	r3, [r5, #0]
     5f8:	4629      	mov	r1, r5
     5fa:	461d      	mov	r5, r3
     5fc:	e7f0      	b.n	5e0 <process_event+0x7c>
     5fe:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     602:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     604:	2a01      	cmp	r2, #1
     606:	d81b      	bhi.n	640 <process_event+0xdc>
	list->head = NULL;
     608:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     60a:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     60e:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     610:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     612:	b289      	uxth	r1, r1
	list->tail = NULL;
     614:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     618:	d109      	bne.n	62e <process_event+0xca>
     61a:	463b      	mov	r3, r7
     61c:	e003      	b.n	626 <process_event+0xc2>
				mgr->refs += 1U;
     61e:	8b62      	ldrh	r2, [r4, #26]
     620:	3201      	adds	r2, #1
     622:	8362      	strh	r2, [r4, #26]
	return node->next;
     624:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     626:	2b00      	cmp	r3, #0
     628:	d1f9      	bne.n	61e <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     62a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     62e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     630:	4620      	mov	r0, r4
     632:	f003 fce1 	bl	3ff8 <process_recheck>
     636:	2800      	cmp	r0, #0
     638:	d07b      	beq.n	732 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     63a:	f041 0120 	orr.w	r1, r1, #32
     63e:	e077      	b.n	730 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
     640:	2b04      	cmp	r3, #4
     642:	d10a      	bne.n	65a <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     644:	f021 0107 	bic.w	r1, r1, #7
     648:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     64a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     64c:	4620      	mov	r0, r4
     64e:	f003 fcd3 	bl	3ff8 <process_recheck>
     652:	b110      	cbz	r0, 65a <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     654:	f041 0120 	orr.w	r1, r1, #32
     658:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     65a:	8b21      	ldrh	r1, [r4, #24]
     65c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     660:	45aa      	cmp	sl, r5
     662:	d050      	beq.n	706 <process_event+0x1a2>
     664:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
     666:	46b9      	mov	r9, r7
     668:	e7aa      	b.n	5c0 <process_event+0x5c>
			transit = mgr->transitions->start;
     66a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     66c:	f021 0107 	bic.w	r1, r1, #7
     670:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
     674:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
     676:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
     67a:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     67c:	d12d      	bne.n	6da <process_event+0x176>
		    || (transit != NULL)) {
     67e:	f1b9 0f00 	cmp.w	r9, #0
     682:	d040      	beq.n	706 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     684:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     688:	8321      	strh	r1, [r4, #24]
     68a:	f388 8811 	msr	BASEPRI, r8
     68e:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
     692:	493a      	ldr	r1, [pc, #232]	; (77c <process_event+0x218>)
     694:	4620      	mov	r0, r4
     696:	47c8      	blx	r9
     698:	e029      	b.n	6ee <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     69a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
     69e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6a0:	f041 0104 	orr.w	r1, r1, #4
     6a4:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     6a6:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
     6a8:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
     6ac:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     6ae:	d0e6      	beq.n	67e <process_event+0x11a>
     6b0:	2700      	movs	r7, #0
		res = 0;
     6b2:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     6b4:	f04f 0a04 	mov.w	sl, #4
     6b8:	e782      	b.n	5c0 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6ba:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
     6be:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6c0:	f041 0105 	orr.w	r1, r1, #5
     6c4:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     6c6:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
     6c8:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
     6cc:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     6ce:	d0d6      	beq.n	67e <process_event+0x11a>
     6d0:	2700      	movs	r7, #0
		res = 0;
     6d2:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     6d4:	f04f 0a05 	mov.w	sl, #5
     6d8:	e772      	b.n	5c0 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
     6da:	2700      	movs	r7, #0
		res = 0;
     6dc:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     6de:	f04f 0a06 	mov.w	sl, #6
     6e2:	e76d      	b.n	5c0 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     6e4:	462b      	mov	r3, r5
     6e6:	e787      	b.n	5f8 <process_event+0x94>
			if (transit != NULL) {
     6e8:	f1b9 0f00 	cmp.w	r9, #0
     6ec:	d1d1      	bne.n	692 <process_event+0x12e>
	__asm__ volatile(
     6ee:	f04f 0320 	mov.w	r3, #32
     6f2:	f3ef 8811 	mrs	r8, BASEPRI
     6f6:	f383 8812 	msr	BASEPRI_MAX, r3
     6fa:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     6fe:	8b23      	ldrh	r3, [r4, #24]
     700:	f023 0308 	bic.w	r3, r3, #8
     704:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     706:	8b25      	ldrh	r5, [r4, #24]
     708:	06ea      	lsls	r2, r5, #27
     70a:	d52e      	bpl.n	76a <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     70c:	f025 0310 	bic.w	r3, r5, #16
     710:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     712:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
     716:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     718:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     71a:	2e00      	cmp	r6, #0
     71c:	f6bf af6f 	bge.w	5fe <process_event+0x9a>
	list->head = NULL;
     720:	2300      	movs	r3, #0
		*clients = mgr->clients;
     722:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
     724:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     728:	f021 0107 	bic.w	r1, r1, #7
     72c:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
     730:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     732:	8b21      	ldrh	r1, [r4, #24]
     734:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     738:	45aa      	cmp	sl, r5
     73a:	f04f 0900 	mov.w	r9, #0
     73e:	f47f af3f 	bne.w	5c0 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
     742:	2f00      	cmp	r7, #0
     744:	d09b      	beq.n	67e <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     746:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     74a:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
     74c:	f388 8811 	msr	BASEPRI, r8
     750:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
     754:	2f00      	cmp	r7, #0
     756:	d0c7      	beq.n	6e8 <process_event+0x184>
	return node->next;
     758:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
     75a:	4639      	mov	r1, r7
     75c:	4633      	mov	r3, r6
     75e:	4652      	mov	r2, sl
     760:	4620      	mov	r0, r4
     762:	f003 fc75 	bl	4050 <notify_one>
	list->head = node;
     766:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
     768:	e7f4      	b.n	754 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     76a:	06ab      	lsls	r3, r5, #26
     76c:	f57f af1a 	bpl.w	5a4 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     770:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     774:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     776:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     77a:	e6ff      	b.n	57c <process_event+0x18>
     77c:	0000407d 	.word	0x0000407d

00000780 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     784:	4681      	mov	r9, r0
     786:	b095      	sub	sp, #84	; 0x54
     788:	468b      	mov	fp, r1
     78a:	4617      	mov	r7, r2
     78c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     78e:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     790:	7838      	ldrb	r0, [r7, #0]
     792:	b908      	cbnz	r0, 798 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
     794:	4628      	mov	r0, r5
     796:	e358      	b.n	e4a <__z_interrupt_stack_SIZEOF+0x60a>
			OUTC(*fp++);
     798:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
     79a:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     79c:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
     79e:	d006      	beq.n	7ae <z_cbvprintf_impl+0x2e>
			OUTC('%');
     7a0:	4659      	mov	r1, fp
     7a2:	47c8      	blx	r9
     7a4:	2800      	cmp	r0, #0
     7a6:	f2c0 8350 	blt.w	e4a <__z_interrupt_stack_SIZEOF+0x60a>
     7aa:	3501      	adds	r5, #1
		if (bps == NULL) {
     7ac:	e1fb      	b.n	ba6 <__z_interrupt_stack_SIZEOF+0x366>
		} state = {
     7ae:	2218      	movs	r2, #24
     7b0:	2100      	movs	r1, #0
     7b2:	a80e      	add	r0, sp, #56	; 0x38
     7b4:	f003 fd8d 	bl	42d2 <memset>
	if (*sp == '%') {
     7b8:	787b      	ldrb	r3, [r7, #1]
     7ba:	2b25      	cmp	r3, #37	; 0x25
     7bc:	d07d      	beq.n	8ba <__z_interrupt_stack_SIZEOF+0x7a>
     7be:	2300      	movs	r3, #0
     7c0:	1c78      	adds	r0, r7, #1
     7c2:	4698      	mov	r8, r3
     7c4:	469e      	mov	lr, r3
     7c6:	469c      	mov	ip, r3
     7c8:	461e      	mov	r6, r3
     7ca:	4601      	mov	r1, r0
		switch (*sp) {
     7cc:	f810 2b01 	ldrb.w	r2, [r0], #1
     7d0:	2a2b      	cmp	r2, #43	; 0x2b
     7d2:	f000 80a1 	beq.w	918 <__z_interrupt_stack_SIZEOF+0xd8>
     7d6:	f200 8098 	bhi.w	90a <__z_interrupt_stack_SIZEOF+0xca>
     7da:	2a20      	cmp	r2, #32
     7dc:	f000 809f 	beq.w	91e <__z_interrupt_stack_SIZEOF+0xde>
     7e0:	2a23      	cmp	r2, #35	; 0x23
     7e2:	f000 809f 	beq.w	924 <__z_interrupt_stack_SIZEOF+0xe4>
     7e6:	b12b      	cbz	r3, 7f4 <z_cbvprintf_impl+0x74>
     7e8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     7ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     7f0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     7f4:	f1b8 0f00 	cmp.w	r8, #0
     7f8:	d005      	beq.n	806 <CONFIG_ISR_STACK_SIZE+0x6>
     7fa:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     7fe:	f043 0320 	orr.w	r3, r3, #32
     802:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     806:	f1be 0f00 	cmp.w	lr, #0
     80a:	d005      	beq.n	818 <CONFIG_ISR_STACK_SIZE+0x18>
     80c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     810:	f043 0310 	orr.w	r3, r3, #16
     814:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     818:	f1bc 0f00 	cmp.w	ip, #0
     81c:	d005      	beq.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     81e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     822:	f043 0308 	orr.w	r3, r3, #8
     826:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     82a:	b12e      	cbz	r6, 838 <CONFIG_ISR_STACK_SIZE+0x38>
     82c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     830:	f043 0304 	orr.w	r3, r3, #4
     834:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
     838:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     83c:	f003 0044 	and.w	r0, r3, #68	; 0x44
     840:	2844      	cmp	r0, #68	; 0x44
     842:	d103      	bne.n	84c <__z_interrupt_stack_SIZEOF+0xc>
		conv->flag_zero = false;
     844:	f36f 1386 	bfc	r3, #6, #1
     848:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
     84c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     850:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
     852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     856:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     85a:	d17f      	bne.n	95c <__z_interrupt_stack_SIZEOF+0x11c>
		conv->width_star = true;
     85c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     860:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
     864:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     866:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
     86a:	781a      	ldrb	r2, [r3, #0]
     86c:	2a2e      	cmp	r2, #46	; 0x2e
     86e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     872:	bf0c      	ite	eq
     874:	2101      	moveq	r1, #1
     876:	2100      	movne	r1, #0
     878:	f361 0241 	bfi	r2, r1, #1, #1
     87c:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
     880:	d178      	bne.n	974 <__z_interrupt_stack_SIZEOF+0x134>
	if (*sp == '*') {
     882:	785a      	ldrb	r2, [r3, #1]
     884:	2a2a      	cmp	r2, #42	; 0x2a
     886:	d06e      	beq.n	966 <__z_interrupt_stack_SIZEOF+0x126>
	++sp;
     888:	3301      	adds	r3, #1
	size_t val = 0;
     88a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     88c:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     890:	4619      	mov	r1, r3
     892:	f811 0b01 	ldrb.w	r0, [r1], #1
     896:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
     89a:	2e09      	cmp	r6, #9
     89c:	f240 8095 	bls.w	9ca <__z_interrupt_stack_SIZEOF+0x18a>
	conv->unsupported |= ((conv->prec_value < 0)
     8a0:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
     8a4:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
     8a6:	f3c1 0040 	ubfx	r0, r1, #1, #1
     8aa:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
     8ae:	460a      	mov	r2, r1
     8b0:	f360 0241 	bfi	r2, r0, #1, #1
     8b4:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
     8b8:	e05c      	b.n	974 <__z_interrupt_stack_SIZEOF+0x134>
		conv->specifier = *sp++;
     8ba:	1cba      	adds	r2, r7, #2
     8bc:	9203      	str	r2, [sp, #12]
     8be:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
     8c2:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
     8c6:	07da      	lsls	r2, r3, #31
     8c8:	f140 812e 	bpl.w	b28 <__z_interrupt_stack_SIZEOF+0x2e8>
			width = va_arg(ap, int);
     8cc:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
     8d0:	f1b8 0f00 	cmp.w	r8, #0
     8d4:	da07      	bge.n	8e6 <__z_interrupt_stack_SIZEOF+0xa6>
				conv->flag_dash = true;
     8d6:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
     8da:	f042 0204 	orr.w	r2, r2, #4
     8de:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
     8e2:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
     8e6:	075e      	lsls	r6, r3, #29
     8e8:	f140 8127 	bpl.w	b3a <__z_interrupt_stack_SIZEOF+0x2fa>
			int arg = va_arg(ap, int);
     8ec:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
     8f0:	f1ba 0f00 	cmp.w	sl, #0
     8f4:	f280 8126 	bge.w	b44 <__z_interrupt_stack_SIZEOF+0x304>
				conv->prec_present = false;
     8f8:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
     8fc:	f36f 0341 	bfc	r3, #1, #1
     900:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
     904:	f04f 3aff 	mov.w	sl, #4294967295
     908:	e11c      	b.n	b44 <__z_interrupt_stack_SIZEOF+0x304>
		switch (*sp) {
     90a:	2a2d      	cmp	r2, #45	; 0x2d
     90c:	d00d      	beq.n	92a <__z_interrupt_stack_SIZEOF+0xea>
     90e:	2a30      	cmp	r2, #48	; 0x30
     910:	f47f af69 	bne.w	7e6 <z_cbvprintf_impl+0x66>
     914:	2301      	movs	r3, #1
	} while (loop);
     916:	e758      	b.n	7ca <z_cbvprintf_impl+0x4a>
		switch (*sp) {
     918:	f04f 0c01 	mov.w	ip, #1
     91c:	e755      	b.n	7ca <z_cbvprintf_impl+0x4a>
     91e:	f04f 0e01 	mov.w	lr, #1
     922:	e752      	b.n	7ca <z_cbvprintf_impl+0x4a>
     924:	f04f 0801 	mov.w	r8, #1
     928:	e74f      	b.n	7ca <z_cbvprintf_impl+0x4a>
     92a:	2601      	movs	r6, #1
     92c:	e74d      	b.n	7ca <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
     92e:	fb0e 6202 	mla	r2, lr, r2, r6
     932:	3a30      	subs	r2, #48	; 0x30
     934:	4603      	mov	r3, r0
     936:	4618      	mov	r0, r3
     938:	f810 6b01 	ldrb.w	r6, [r0], #1
     93c:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
     940:	f1bc 0f09 	cmp.w	ip, #9
     944:	d9f3      	bls.n	92e <__z_interrupt_stack_SIZEOF+0xee>
	if (sp != wp) {
     946:	4299      	cmp	r1, r3
     948:	d08f      	beq.n	86a <__z_interrupt_stack_SIZEOF+0x2a>
		conv->unsupported |= ((conv->width_value < 0)
     94a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
     94e:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
     950:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     952:	f362 0141 	bfi	r1, r2, #1, #1
     956:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
     95a:	e786      	b.n	86a <__z_interrupt_stack_SIZEOF+0x2a>
     95c:	460b      	mov	r3, r1
	size_t val = 0;
     95e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     960:	f04f 0e0a 	mov.w	lr, #10
     964:	e7e7      	b.n	936 <__z_interrupt_stack_SIZEOF+0xf6>
		conv->prec_star = true;
     966:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     96a:	f042 0204 	orr.w	r2, r2, #4
     96e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
     972:	3302      	adds	r3, #2
	switch (*sp) {
     974:	781a      	ldrb	r2, [r3, #0]
     976:	2a6c      	cmp	r2, #108	; 0x6c
     978:	d047      	beq.n	a0a <__z_interrupt_stack_SIZEOF+0x1ca>
     97a:	d82b      	bhi.n	9d4 <__z_interrupt_stack_SIZEOF+0x194>
     97c:	2a68      	cmp	r2, #104	; 0x68
     97e:	d031      	beq.n	9e4 <__z_interrupt_stack_SIZEOF+0x1a4>
     980:	2a6a      	cmp	r2, #106	; 0x6a
     982:	d04b      	beq.n	a1c <__z_interrupt_stack_SIZEOF+0x1dc>
     984:	2a4c      	cmp	r2, #76	; 0x4c
     986:	d051      	beq.n	a2c <__z_interrupt_stack_SIZEOF+0x1ec>
	conv->specifier = *sp++;
     988:	461a      	mov	r2, r3
     98a:	f812 3b01 	ldrb.w	r3, [r2], #1
     98e:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
     990:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
     992:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
     996:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
     99a:	f200 80be 	bhi.w	b1a <__z_interrupt_stack_SIZEOF+0x2da>
     99e:	2b6d      	cmp	r3, #109	; 0x6d
     9a0:	d851      	bhi.n	a46 <__z_interrupt_stack_SIZEOF+0x206>
     9a2:	2b69      	cmp	r3, #105	; 0x69
     9a4:	f200 80b9 	bhi.w	b1a <__z_interrupt_stack_SIZEOF+0x2da>
     9a8:	2b57      	cmp	r3, #87	; 0x57
     9aa:	d867      	bhi.n	a7c <__z_interrupt_stack_SIZEOF+0x23c>
     9ac:	2b41      	cmp	r3, #65	; 0x41
     9ae:	d003      	beq.n	9b8 <__z_interrupt_stack_SIZEOF+0x178>
     9b0:	3b45      	subs	r3, #69	; 0x45
     9b2:	2b02      	cmp	r3, #2
     9b4:	f200 80b1 	bhi.w	b1a <__z_interrupt_stack_SIZEOF+0x2da>
		conv->specifier_cat = SPECIFIER_FP;
     9b8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     9bc:	2204      	movs	r2, #4
     9be:	f362 0302 	bfi	r3, r2, #0, #3
     9c2:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
     9c6:	2301      	movs	r3, #1
			break;
     9c8:	e073      	b.n	ab2 <__z_interrupt_stack_SIZEOF+0x272>
		val = 10U * val + *sp++ - '0';
     9ca:	fb0c 0202 	mla	r2, ip, r2, r0
     9ce:	3a30      	subs	r2, #48	; 0x30
     9d0:	460b      	mov	r3, r1
     9d2:	e75d      	b.n	890 <__z_interrupt_stack_SIZEOF+0x50>
	switch (*sp) {
     9d4:	2a74      	cmp	r2, #116	; 0x74
     9d6:	d025      	beq.n	a24 <__z_interrupt_stack_SIZEOF+0x1e4>
     9d8:	2a7a      	cmp	r2, #122	; 0x7a
     9da:	d1d5      	bne.n	988 <__z_interrupt_stack_SIZEOF+0x148>
		conv->length_mod = LENGTH_Z;
     9dc:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     9e0:	2106      	movs	r1, #6
     9e2:	e00c      	b.n	9fe <__z_interrupt_stack_SIZEOF+0x1be>
		if (*++sp == 'h') {
     9e4:	785a      	ldrb	r2, [r3, #1]
     9e6:	2a68      	cmp	r2, #104	; 0x68
     9e8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     9ec:	d106      	bne.n	9fc <__z_interrupt_stack_SIZEOF+0x1bc>
			conv->length_mod = LENGTH_HH;
     9ee:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     9f0:	f361 02c6 	bfi	r2, r1, #3, #4
     9f4:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
     9f8:	3302      	adds	r3, #2
     9fa:	e7c5      	b.n	988 <__z_interrupt_stack_SIZEOF+0x148>
			conv->length_mod = LENGTH_H;
     9fc:	2102      	movs	r1, #2
     9fe:	f361 02c6 	bfi	r2, r1, #3, #4
     a02:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
     a06:	3301      	adds	r3, #1
     a08:	e7be      	b.n	988 <__z_interrupt_stack_SIZEOF+0x148>
		if (*++sp == 'l') {
     a0a:	785a      	ldrb	r2, [r3, #1]
     a0c:	2a6c      	cmp	r2, #108	; 0x6c
     a0e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     a12:	d101      	bne.n	a18 <__z_interrupt_stack_SIZEOF+0x1d8>
			conv->length_mod = LENGTH_LL;
     a14:	2104      	movs	r1, #4
     a16:	e7eb      	b.n	9f0 <__z_interrupt_stack_SIZEOF+0x1b0>
			conv->length_mod = LENGTH_L;
     a18:	2103      	movs	r1, #3
     a1a:	e7f0      	b.n	9fe <__z_interrupt_stack_SIZEOF+0x1be>
		conv->length_mod = LENGTH_J;
     a1c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     a20:	2105      	movs	r1, #5
     a22:	e7ec      	b.n	9fe <__z_interrupt_stack_SIZEOF+0x1be>
		conv->length_mod = LENGTH_T;
     a24:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     a28:	2107      	movs	r1, #7
     a2a:	e7e8      	b.n	9fe <__z_interrupt_stack_SIZEOF+0x1be>
		conv->unsupported = true;
     a2c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
     a30:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
     a34:	f022 0202 	bic.w	r2, r2, #2
     a38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
     a3c:	f042 0202 	orr.w	r2, r2, #2
     a40:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
     a44:	e7df      	b.n	a06 <__z_interrupt_stack_SIZEOF+0x1c6>
	switch (conv->specifier) {
     a46:	3b6e      	subs	r3, #110	; 0x6e
     a48:	b2d9      	uxtb	r1, r3
     a4a:	2301      	movs	r3, #1
     a4c:	408b      	lsls	r3, r1
     a4e:	f240 4182 	movw	r1, #1154	; 0x482
     a52:	420b      	tst	r3, r1
     a54:	d137      	bne.n	ac6 <__z_interrupt_stack_SIZEOF+0x286>
     a56:	f013 0f24 	tst.w	r3, #36	; 0x24
     a5a:	d151      	bne.n	b00 <__z_interrupt_stack_SIZEOF+0x2c0>
     a5c:	07d8      	lsls	r0, r3, #31
     a5e:	d55c      	bpl.n	b1a <__z_interrupt_stack_SIZEOF+0x2da>
		conv->specifier_cat = SPECIFIER_PTR;
     a60:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     a64:	2103      	movs	r1, #3
     a66:	f361 0302 	bfi	r3, r1, #0, #3
     a6a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
     a6e:	f002 0378 	and.w	r3, r2, #120	; 0x78
     a72:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
     a76:	424b      	negs	r3, r1
     a78:	414b      	adcs	r3, r1
     a7a:	e01a      	b.n	ab2 <__z_interrupt_stack_SIZEOF+0x272>
	switch (conv->specifier) {
     a7c:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
     a80:	b2c9      	uxtb	r1, r1
     a82:	2001      	movs	r0, #1
     a84:	fa00 f101 	lsl.w	r1, r0, r1
     a88:	f411 4f62 	tst.w	r1, #57856	; 0xe200
     a8c:	d194      	bne.n	9b8 <__z_interrupt_stack_SIZEOF+0x178>
     a8e:	f640 0601 	movw	r6, #2049	; 0x801
     a92:	4231      	tst	r1, r6
     a94:	d11d      	bne.n	ad2 <__z_interrupt_stack_SIZEOF+0x292>
     a96:	f411 3f04 	tst.w	r1, #135168	; 0x21000
     a9a:	d03e      	beq.n	b1a <__z_interrupt_stack_SIZEOF+0x2da>
		conv->specifier_cat = SPECIFIER_SINT;
     a9c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     aa0:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     aa4:	f002 0278 	and.w	r2, r2, #120	; 0x78
     aa8:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
     aaa:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
     aae:	d034      	beq.n	b1a <__z_interrupt_stack_SIZEOF+0x2da>
	bool unsupported = false;
     ab0:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
     ab2:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
     ab6:	f3c2 0140 	ubfx	r1, r2, #1, #1
     aba:	430b      	orrs	r3, r1
     abc:	f363 0241 	bfi	r2, r3, #1, #1
     ac0:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
     ac4:	e6fd      	b.n	8c2 <__z_interrupt_stack_SIZEOF+0x82>
		conv->specifier_cat = SPECIFIER_UINT;
     ac6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     aca:	2102      	movs	r1, #2
     acc:	f361 0302 	bfi	r3, r1, #0, #3
     ad0:	e7e8      	b.n	aa4 <__z_interrupt_stack_SIZEOF+0x264>
     ad2:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
     ad6:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
     ad8:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     adc:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     ae0:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     ae2:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
     ae6:	bf02      	ittt	eq
     ae8:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
     aec:	f041 0101 	orreq.w	r1, r1, #1
     af0:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
     af4:	2b63      	cmp	r3, #99	; 0x63
     af6:	d1db      	bne.n	ab0 <__z_interrupt_stack_SIZEOF+0x270>
			unsupported = (conv->length_mod != LENGTH_NONE);
     af8:	1e13      	subs	r3, r2, #0
     afa:	bf18      	it	ne
     afc:	2301      	movne	r3, #1
     afe:	e7d8      	b.n	ab2 <__z_interrupt_stack_SIZEOF+0x272>
		conv->specifier_cat = SPECIFIER_PTR;
     b00:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     b04:	2103      	movs	r1, #3
     b06:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
     b0a:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     b0e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
     b12:	bf14      	ite	ne
     b14:	2301      	movne	r3, #1
     b16:	2300      	moveq	r3, #0
     b18:	e7cb      	b.n	ab2 <__z_interrupt_stack_SIZEOF+0x272>
		conv->invalid = true;
     b1a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     b1e:	f043 0301 	orr.w	r3, r3, #1
     b22:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
     b26:	e7c3      	b.n	ab0 <__z_interrupt_stack_SIZEOF+0x270>
		} else if (conv->width_present) {
     b28:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
     b2c:	2a00      	cmp	r2, #0
			width = conv->width_value;
     b2e:	bfb4      	ite	lt
     b30:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
     b34:	f04f 38ff 	movge.w	r8, #4294967295
     b38:	e6d5      	b.n	8e6 <__z_interrupt_stack_SIZEOF+0xa6>
		} else if (conv->prec_present) {
     b3a:	0798      	lsls	r0, r3, #30
     b3c:	f57f aee2 	bpl.w	904 <__z_interrupt_stack_SIZEOF+0xc4>
			precision = conv->prec_value;
     b40:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
     b44:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
     b48:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     b4a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
     b4e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
     b52:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     b56:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     b58:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     b5c:	d133      	bne.n	bc6 <__z_interrupt_stack_SIZEOF+0x386>
			switch (length_mod) {
     b5e:	1ecb      	subs	r3, r1, #3
     b60:	2b04      	cmp	r3, #4
     b62:	d804      	bhi.n	b6e <__z_interrupt_stack_SIZEOF+0x32e>
     b64:	e8df f003 	tbb	[pc, r3]
     b68:	21464621 	.word	0x21464621
     b6c:	21          	.byte	0x21
     b6d:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     b6e:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
     b70:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
     b72:	ea4f 72e3 	mov.w	r2, r3, asr #31
     b76:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
     b7a:	d11c      	bne.n	bb6 <__z_interrupt_stack_SIZEOF+0x376>
				value->sint = (signed char)value->sint;
     b7c:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
     b80:	17da      	asrs	r2, r3, #31
     b82:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
     b86:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
     b88:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     b8c:	f013 0603 	ands.w	r6, r3, #3
     b90:	d050      	beq.n	c34 <__z_interrupt_stack_SIZEOF+0x3f4>
			OUTS(sp, fp);
     b92:	9b03      	ldr	r3, [sp, #12]
     b94:	463a      	mov	r2, r7
     b96:	4659      	mov	r1, fp
     b98:	4648      	mov	r0, r9
     b9a:	f003 fb4c 	bl	4236 <outs>
     b9e:	2800      	cmp	r0, #0
     ba0:	f2c0 8153 	blt.w	e4a <__z_interrupt_stack_SIZEOF+0x60a>
     ba4:	4405      	add	r5, r0
			continue;
     ba6:	9f03      	ldr	r7, [sp, #12]
     ba8:	e5f2      	b.n	790 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     baa:	f854 3b04 	ldr.w	r3, [r4], #4
     bae:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
     bb0:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
     bb4:	e7e8      	b.n	b88 <__z_interrupt_stack_SIZEOF+0x348>
			} else if (length_mod == LENGTH_H) {
     bb6:	2902      	cmp	r1, #2
     bb8:	d1e5      	bne.n	b86 <__z_interrupt_stack_SIZEOF+0x346>
				value->sint = (short)value->sint;
     bba:	b21a      	sxth	r2, r3
     bbc:	f343 33c0 	sbfx	r3, r3, #15, #1
     bc0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
     bc4:	e7df      	b.n	b86 <__z_interrupt_stack_SIZEOF+0x346>
		} else if (specifier_cat == SPECIFIER_UINT) {
     bc6:	2b02      	cmp	r3, #2
     bc8:	d124      	bne.n	c14 <__z_interrupt_stack_SIZEOF+0x3d4>
			switch (length_mod) {
     bca:	1ecb      	subs	r3, r1, #3
     bcc:	2b04      	cmp	r3, #4
     bce:	d804      	bhi.n	bda <__z_interrupt_stack_SIZEOF+0x39a>
     bd0:	e8df f003 	tbb	[pc, r3]
     bd4:	18101018 	.word	0x18101018
     bd8:	18          	.byte	0x18
     bd9:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
     bda:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
     bdc:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     be0:	f04f 0200 	mov.w	r2, #0
     be4:	d014      	beq.n	c10 <__z_interrupt_stack_SIZEOF+0x3d0>
			} else if (length_mod == LENGTH_H) {
     be6:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
     be8:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
     bec:	d1cc      	bne.n	b88 <__z_interrupt_stack_SIZEOF+0x348>
				value->uint = (unsigned short)value->uint;
     bee:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
     bf0:	930e      	str	r3, [sp, #56]	; 0x38
     bf2:	e7c9      	b.n	b88 <__z_interrupt_stack_SIZEOF+0x348>
					(uint_value_type)va_arg(ap,
     bf4:	3407      	adds	r4, #7
     bf6:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
     bfa:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     bfe:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
     c02:	e7c1      	b.n	b88 <__z_interrupt_stack_SIZEOF+0x348>
					(uint_value_type)va_arg(ap, size_t);
     c04:	f854 3b04 	ldr.w	r3, [r4], #4
     c08:	930e      	str	r3, [sp, #56]	; 0x38
     c0a:	2300      	movs	r3, #0
     c0c:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
     c0e:	e7bb      	b.n	b88 <__z_interrupt_stack_SIZEOF+0x348>
				value->uint = (unsigned char)value->uint;
     c10:	b2db      	uxtb	r3, r3
     c12:	e7cd      	b.n	bb0 <__z_interrupt_stack_SIZEOF+0x370>
		} else if (specifier_cat == SPECIFIER_FP) {
     c14:	2b04      	cmp	r3, #4
     c16:	d108      	bne.n	c2a <__z_interrupt_stack_SIZEOF+0x3ea>
					(sint_value_type)va_arg(ap, long long);
     c18:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
     c1a:	f024 0407 	bic.w	r4, r4, #7
     c1e:	e9d4 2300 	ldrd	r2, r3, [r4]
     c22:	3408      	adds	r4, #8
     c24:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
     c28:	e7ae      	b.n	b88 <__z_interrupt_stack_SIZEOF+0x348>
		} else if (specifier_cat == SPECIFIER_PTR) {
     c2a:	2b03      	cmp	r3, #3
     c2c:	d1ac      	bne.n	b88 <__z_interrupt_stack_SIZEOF+0x348>
			value->ptr = va_arg(ap, void *);
     c2e:	f854 3b04 	ldr.w	r3, [r4], #4
     c32:	e7dd      	b.n	bf0 <__z_interrupt_stack_SIZEOF+0x3b0>
		switch (conv->specifier) {
     c34:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
     c38:	2878      	cmp	r0, #120	; 0x78
     c3a:	d8b4      	bhi.n	ba6 <__z_interrupt_stack_SIZEOF+0x366>
     c3c:	2862      	cmp	r0, #98	; 0x62
     c3e:	d81c      	bhi.n	c7a <__z_interrupt_stack_SIZEOF+0x43a>
     c40:	2825      	cmp	r0, #37	; 0x25
     c42:	f43f adad 	beq.w	7a0 <z_cbvprintf_impl+0x20>
     c46:	2858      	cmp	r0, #88	; 0x58
     c48:	d1ad      	bne.n	ba6 <__z_interrupt_stack_SIZEOF+0x366>
			bps = encode_uint(value->uint, conv, buf, bpe);
     c4a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     c4e:	9300      	str	r3, [sp, #0]
     c50:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
     c54:	ab08      	add	r3, sp, #32
     c56:	aa10      	add	r2, sp, #64	; 0x40
     c58:	f003 faa7 	bl	41aa <encode_uint>
			if (precision >= 0) {
     c5c:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
     c60:	4607      	mov	r7, r0
			if (precision >= 0) {
     c62:	f280 809a 	bge.w	d9a <__z_interrupt_stack_SIZEOF+0x55a>
		if (bps == NULL) {
     c66:	2f00      	cmp	r7, #0
     c68:	d09d      	beq.n	ba6 <__z_interrupt_stack_SIZEOF+0x366>
		size_t nj_len = (bpe - bps);
     c6a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     c6e:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
     c70:	2e00      	cmp	r6, #0
     c72:	f000 80c1 	beq.w	df8 <__z_interrupt_stack_SIZEOF+0x5b8>
			nj_len += 1U;
     c76:	3001      	adds	r0, #1
     c78:	e0be      	b.n	df8 <__z_interrupt_stack_SIZEOF+0x5b8>
		switch (conv->specifier) {
     c7a:	3863      	subs	r0, #99	; 0x63
     c7c:	2815      	cmp	r0, #21
     c7e:	d892      	bhi.n	ba6 <__z_interrupt_stack_SIZEOF+0x366>
     c80:	a201      	add	r2, pc, #4	; (adr r2, c88 <__z_interrupt_stack_SIZEOF+0x448>)
     c82:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
     c86:	bf00      	nop
     c88:	00000d5d 	.word	0x00000d5d
     c8c:	00000d6f 	.word	0x00000d6f
     c90:	00000ba7 	.word	0x00000ba7
     c94:	00000ba7 	.word	0x00000ba7
     c98:	00000ba7 	.word	0x00000ba7
     c9c:	00000ba7 	.word	0x00000ba7
     ca0:	00000d6f 	.word	0x00000d6f
     ca4:	00000ba7 	.word	0x00000ba7
     ca8:	00000ba7 	.word	0x00000ba7
     cac:	00000ba7 	.word	0x00000ba7
     cb0:	00000ba7 	.word	0x00000ba7
     cb4:	00000dfd 	.word	0x00000dfd
     cb8:	00000d95 	.word	0x00000d95
     cbc:	00000dbb 	.word	0x00000dbb
     cc0:	00000ba7 	.word	0x00000ba7
     cc4:	00000ba7 	.word	0x00000ba7
     cc8:	00000ce1 	.word	0x00000ce1
     ccc:	00000ba7 	.word	0x00000ba7
     cd0:	00000d95 	.word	0x00000d95
     cd4:	00000ba7 	.word	0x00000ba7
     cd8:	00000ba7 	.word	0x00000ba7
     cdc:	00000d95 	.word	0x00000d95
			if (precision >= 0) {
     ce0:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
     ce4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
     ce6:	db35      	blt.n	d54 <__z_interrupt_stack_SIZEOF+0x514>
				len = strnlen(bps, precision);
     ce8:	4651      	mov	r1, sl
     cea:	4638      	mov	r0, r7
     cec:	f003 fadd 	bl	42aa <strnlen>
			bpe = bps + len;
     cf0:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
     cf4:	2f00      	cmp	r7, #0
     cf6:	f43f af56 	beq.w	ba6 <__z_interrupt_stack_SIZEOF+0x366>
		char sign = 0;
     cfa:	2600      	movs	r6, #0
		if (conv->altform_0c) {
     cfc:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     d00:	f013 0210 	ands.w	r2, r3, #16
     d04:	9205      	str	r2, [sp, #20]
     d06:	f000 8093 	beq.w	e30 <__z_interrupt_stack_SIZEOF+0x5f0>
			nj_len += 2U;
     d0a:	3002      	adds	r0, #2
		if (conv->pad_fp) {
     d0c:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
     d0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
     d10:	bf48      	it	mi
     d12:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
     d14:	9204      	str	r2, [sp, #16]
     d16:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
     d18:	bf48      	it	mi
     d1a:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
     d1c:	f1b8 0f00 	cmp.w	r8, #0
     d20:	f340 80a0 	ble.w	e64 <__z_interrupt_stack_SIZEOF+0x624>
			if (!conv->flag_dash) {
     d24:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
     d28:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
     d2c:	f3c2 0380 	ubfx	r3, r2, #2, #1
     d30:	0750      	lsls	r0, r2, #29
     d32:	9306      	str	r3, [sp, #24]
     d34:	f100 8096 	bmi.w	e64 <__z_interrupt_stack_SIZEOF+0x624>
				if (conv->flag_zero) {
     d38:	0651      	lsls	r1, r2, #25
     d3a:	f140 8089 	bpl.w	e50 <__z_interrupt_stack_SIZEOF+0x610>
					if (sign != 0) {
     d3e:	b13e      	cbz	r6, d50 <__z_interrupt_stack_SIZEOF+0x510>
						OUTC(sign);
     d40:	4659      	mov	r1, fp
     d42:	4630      	mov	r0, r6
     d44:	47c8      	blx	r9
     d46:	2800      	cmp	r0, #0
     d48:	db7f      	blt.n	e4a <__z_interrupt_stack_SIZEOF+0x60a>
     d4a:	9b06      	ldr	r3, [sp, #24]
     d4c:	3501      	adds	r5, #1
     d4e:	461e      	mov	r6, r3
					pad = '0';
     d50:	2230      	movs	r2, #48	; 0x30
     d52:	e07e      	b.n	e52 <__z_interrupt_stack_SIZEOF+0x612>
				len = strlen(bps);
     d54:	4638      	mov	r0, r7
     d56:	f003 faa1 	bl	429c <strlen>
     d5a:	e7c9      	b.n	cf0 <__z_interrupt_stack_SIZEOF+0x4b0>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     d5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     d5e:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
     d62:	2600      	movs	r6, #0
			bps = buf;
     d64:	af08      	add	r7, sp, #32
			bpe = buf + 1;
     d66:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
     d6a:	2001      	movs	r0, #1
     d6c:	e7c6      	b.n	cfc <__z_interrupt_stack_SIZEOF+0x4bc>
			if (conv->flag_plus) {
     d6e:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
     d70:	bf5c      	itt	pl
     d72:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
     d76:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
     d78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
     d7c:	bf48      	it	mi
     d7e:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
     d80:	2b00      	cmp	r3, #0
     d82:	f6bf af62 	bge.w	c4a <__z_interrupt_stack_SIZEOF+0x40a>
				value->uint = (uint_value_type)-sint;
     d86:	4252      	negs	r2, r2
     d88:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     d8c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
     d90:	262d      	movs	r6, #45	; 0x2d
     d92:	e75a      	b.n	c4a <__z_interrupt_stack_SIZEOF+0x40a>
		switch (conv->specifier) {
     d94:	2600      	movs	r6, #0
     d96:	e758      	b.n	c4a <__z_interrupt_stack_SIZEOF+0x40a>
		char sign = 0;
     d98:	2600      	movs	r6, #0
				conv->flag_zero = false;
     d9a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
     d9e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     da2:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
     da4:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     da8:	459a      	cmp	sl, r3
				conv->flag_zero = false;
     daa:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
     dae:	f67f af5a 	bls.w	c66 <__z_interrupt_stack_SIZEOF+0x426>
					conv->pad0_value = precision - (int)len;
     db2:	ebaa 0303 	sub.w	r3, sl, r3
     db6:	9311      	str	r3, [sp, #68]	; 0x44
     db8:	e755      	b.n	c66 <__z_interrupt_stack_SIZEOF+0x426>
			if (value->ptr != NULL) {
     dba:	980e      	ldr	r0, [sp, #56]	; 0x38
     dbc:	b390      	cbz	r0, e24 <__z_interrupt_stack_SIZEOF+0x5e4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     dbe:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     dc2:	9300      	str	r3, [sp, #0]
     dc4:	aa10      	add	r2, sp, #64	; 0x40
     dc6:	ab08      	add	r3, sp, #32
     dc8:	2100      	movs	r1, #0
     dca:	f003 f9ee 	bl	41aa <encode_uint>
				conv->altform_0c = true;
     dce:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
     dd2:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     dd6:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     dda:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
     dde:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
     de2:	4607      	mov	r7, r0
				conv->altform_0c = true;
     de4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
     de8:	dad6      	bge.n	d98 <__z_interrupt_stack_SIZEOF+0x558>
		if (bps == NULL) {
     dea:	2800      	cmp	r0, #0
     dec:	f43f aedb 	beq.w	ba6 <__z_interrupt_stack_SIZEOF+0x366>
		size_t nj_len = (bpe - bps);
     df0:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     df4:	1a18      	subs	r0, r3, r0
		char sign = 0;
     df6:	2600      	movs	r6, #0
     df8:	469a      	mov	sl, r3
     dfa:	e77f      	b.n	cfc <__z_interrupt_stack_SIZEOF+0x4bc>
				store_count(conv, value->ptr, count);
     dfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
     dfe:	2907      	cmp	r1, #7
     e00:	f63f aed1 	bhi.w	ba6 <__z_interrupt_stack_SIZEOF+0x366>
     e04:	e8df f001 	tbb	[pc, r1]
     e08:	0c06040c 	.word	0x0c06040c
     e0c:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
     e10:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
     e12:	e6c8      	b.n	ba6 <__z_interrupt_stack_SIZEOF+0x366>
		*(short *)dp = (short)count;
     e14:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
     e16:	e6c6      	b.n	ba6 <__z_interrupt_stack_SIZEOF+0x366>
		*(intmax_t *)dp = (intmax_t)count;
     e18:	17ea      	asrs	r2, r5, #31
     e1a:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
     e1e:	e6c2      	b.n	ba6 <__z_interrupt_stack_SIZEOF+0x366>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     e20:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
     e22:	e6c0      	b.n	ba6 <__z_interrupt_stack_SIZEOF+0x366>
     e24:	4f2e      	ldr	r7, [pc, #184]	; (ee0 <__z_interrupt_stack_SIZEOF+0x6a0>)
		char sign = 0;
     e26:	4606      	mov	r6, r0
			bpe = bps + 5;
     e28:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
     e2c:	2005      	movs	r0, #5
     e2e:	e765      	b.n	cfc <__z_interrupt_stack_SIZEOF+0x4bc>
		} else if (conv->altform_0) {
     e30:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
     e32:	bf48      	it	mi
     e34:	3001      	addmi	r0, #1
     e36:	e769      	b.n	d0c <__z_interrupt_stack_SIZEOF+0x4cc>
     e38:	9307      	str	r3, [sp, #28]
					OUTC(pad);
     e3a:	4610      	mov	r0, r2
     e3c:	9206      	str	r2, [sp, #24]
     e3e:	4659      	mov	r1, fp
     e40:	47c8      	blx	r9
     e42:	2800      	cmp	r0, #0
     e44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
     e48:	da04      	bge.n	e54 <__z_interrupt_stack_SIZEOF+0x614>
#undef OUTS
#undef OUTC
}
     e4a:	b015      	add	sp, #84	; 0x54
     e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     e50:	2220      	movs	r2, #32
					pad = '0';
     e52:	4643      	mov	r3, r8
				while (width-- > 0) {
     e54:	4619      	mov	r1, r3
     e56:	2900      	cmp	r1, #0
     e58:	f103 33ff 	add.w	r3, r3, #4294967295
     e5c:	dcec      	bgt.n	e38 <__z_interrupt_stack_SIZEOF+0x5f8>
     e5e:	4445      	add	r5, r8
     e60:	1a6d      	subs	r5, r5, r1
     e62:	4698      	mov	r8, r3
		if (sign != 0) {
     e64:	b12e      	cbz	r6, e72 <__z_interrupt_stack_SIZEOF+0x632>
			OUTC(sign);
     e66:	4659      	mov	r1, fp
     e68:	4630      	mov	r0, r6
     e6a:	47c8      	blx	r9
     e6c:	2800      	cmp	r0, #0
     e6e:	dbec      	blt.n	e4a <__z_interrupt_stack_SIZEOF+0x60a>
     e70:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     e72:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     e76:	06da      	lsls	r2, r3, #27
     e78:	d401      	bmi.n	e7e <__z_interrupt_stack_SIZEOF+0x63e>
     e7a:	071b      	lsls	r3, r3, #28
     e7c:	d505      	bpl.n	e8a <__z_interrupt_stack_SIZEOF+0x64a>
				OUTC('0');
     e7e:	4659      	mov	r1, fp
     e80:	2030      	movs	r0, #48	; 0x30
     e82:	47c8      	blx	r9
     e84:	2800      	cmp	r0, #0
     e86:	dbe0      	blt.n	e4a <__z_interrupt_stack_SIZEOF+0x60a>
     e88:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     e8a:	9b05      	ldr	r3, [sp, #20]
     e8c:	b133      	cbz	r3, e9c <__z_interrupt_stack_SIZEOF+0x65c>
				OUTC(conv->specifier);
     e8e:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
     e92:	4659      	mov	r1, fp
     e94:	47c8      	blx	r9
     e96:	2800      	cmp	r0, #0
     e98:	dbd7      	blt.n	e4a <__z_interrupt_stack_SIZEOF+0x60a>
     e9a:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     e9c:	9e04      	ldr	r6, [sp, #16]
     e9e:	442e      	add	r6, r5
     ea0:	e005      	b.n	eae <__z_interrupt_stack_SIZEOF+0x66e>
				OUTC('0');
     ea2:	4659      	mov	r1, fp
     ea4:	2030      	movs	r0, #48	; 0x30
     ea6:	47c8      	blx	r9
     ea8:	2800      	cmp	r0, #0
     eaa:	dbce      	blt.n	e4a <__z_interrupt_stack_SIZEOF+0x60a>
     eac:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     eae:	1b73      	subs	r3, r6, r5
     eb0:	2b00      	cmp	r3, #0
     eb2:	dcf6      	bgt.n	ea2 <__z_interrupt_stack_SIZEOF+0x662>
			OUTS(bps, bpe);
     eb4:	4653      	mov	r3, sl
     eb6:	463a      	mov	r2, r7
     eb8:	4659      	mov	r1, fp
     eba:	4648      	mov	r0, r9
     ebc:	f003 f9bb 	bl	4236 <outs>
     ec0:	2800      	cmp	r0, #0
     ec2:	dbc2      	blt.n	e4a <__z_interrupt_stack_SIZEOF+0x60a>
     ec4:	4405      	add	r5, r0
		while (width > 0) {
     ec6:	44a8      	add	r8, r5
     ec8:	eba8 0305 	sub.w	r3, r8, r5
     ecc:	2b00      	cmp	r3, #0
     ece:	f77f ae6a 	ble.w	ba6 <__z_interrupt_stack_SIZEOF+0x366>
			OUTC(' ');
     ed2:	4659      	mov	r1, fp
     ed4:	2020      	movs	r0, #32
     ed6:	47c8      	blx	r9
     ed8:	2800      	cmp	r0, #0
     eda:	dbb6      	blt.n	e4a <__z_interrupt_stack_SIZEOF+0x60a>
     edc:	3501      	adds	r5, #1
			--width;
     ede:	e7f3      	b.n	ec8 <__z_interrupt_stack_SIZEOF+0x688>
     ee0:	00004d2a 	.word	0x00004d2a

00000ee4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
     ee4:	f001 bc1a 	b.w	271c <SystemInit>

00000ee8 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
     ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     eec:	4605      	mov	r5, r0
	__asm__ volatile(
     eee:	f04f 0320 	mov.w	r3, #32
     ef2:	f3ef 8611 	mrs	r6, BASEPRI
     ef6:	f383 8812 	msr	BASEPRI_MAX, r3
     efa:	f3bf 8f6f 	isb	sy
	return list->head;
     efe:	4b0e      	ldr	r3, [pc, #56]	; (f38 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
     f00:	4f0e      	ldr	r7, [pc, #56]	; (f3c <pm_state_notify+0x54>)
     f02:	681c      	ldr	r4, [r3, #0]
     f04:	f8df 8038 	ldr.w	r8, [pc, #56]	; f40 <pm_state_notify+0x58>
     f08:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     f0c:	b92c      	cbnz	r4, f1a <pm_state_notify+0x32>
	__asm__ volatile(
     f0e:	f386 8811 	msr	BASEPRI, r6
     f12:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
     f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
     f1a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
     f1e:	2d00      	cmp	r5, #0
     f20:	bf18      	it	ne
     f22:	4613      	movne	r3, r2
		if (callback) {
     f24:	b12b      	cbz	r3, f32 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
     f26:	f898 2010 	ldrb.w	r2, [r8, #16]
     f2a:	fb09 f202 	mul.w	r2, r9, r2
     f2e:	5cb8      	ldrb	r0, [r7, r2]
     f30:	4798      	blx	r3
	return node->next;
     f32:	6824      	ldr	r4, [r4, #0]
     f34:	e7ea      	b.n	f0c <pm_state_notify+0x24>
     f36:	bf00      	nop
     f38:	20000220 	.word	0x20000220
     f3c:	20000214 	.word	0x20000214
     f40:	20000368 	.word	0x20000368

00000f44 <pm_system_resume>:

void pm_system_resume(void)
{
     f44:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
     f46:	4b19      	ldr	r3, [pc, #100]	; (fac <pm_system_resume+0x68>)
     f48:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     f4a:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
     f4e:	f004 031f 	and.w	r3, r4, #31
     f52:	2201      	movs	r2, #1
     f54:	409a      	lsls	r2, r3
     f56:	4b16      	ldr	r3, [pc, #88]	; (fb0 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
     f58:	0961      	lsrs	r1, r4, #5
     f5a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     f5e:	43d0      	mvns	r0, r2
     f60:	e853 1f00 	ldrex	r1, [r3]
     f64:	ea01 0500 	and.w	r5, r1, r0
     f68:	e843 5600 	strex	r6, r5, [r3]
     f6c:	2e00      	cmp	r6, #0
     f6e:	d1f7      	bne.n	f60 <pm_system_resume+0x1c>
     f70:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
     f74:	420a      	tst	r2, r1
     f76:	d013      	beq.n	fa0 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
     f78:	4b0e      	ldr	r3, [pc, #56]	; (fb4 <pm_system_resume+0x70>)
     f7a:	4d0f      	ldr	r5, [pc, #60]	; (fb8 <pm_system_resume+0x74>)
     f7c:	b18b      	cbz	r3, fa2 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
     f7e:	230c      	movs	r3, #12
     f80:	4363      	muls	r3, r4
     f82:	18ea      	adds	r2, r5, r3
     f84:	5ce8      	ldrb	r0, [r5, r3]
     f86:	7851      	ldrb	r1, [r2, #1]
     f88:	f003 f9bd 	bl	4306 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
     f8c:	2000      	movs	r0, #0
     f8e:	f7ff ffab 	bl	ee8 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
     f92:	230c      	movs	r3, #12
     f94:	435c      	muls	r4, r3
     f96:	192a      	adds	r2, r5, r4
     f98:	2300      	movs	r3, #0
     f9a:	512b      	str	r3, [r5, r4]
     f9c:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
     fa0:	bd70      	pop	{r4, r5, r6, pc}
     fa2:	f383 8811 	msr	BASEPRI, r3
     fa6:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
     faa:	e7ef      	b.n	f8c <pm_system_resume+0x48>
     fac:	20000368 	.word	0x20000368
     fb0:	20000228 	.word	0x20000228
     fb4:	00004307 	.word	0x00004307
     fb8:	20000214 	.word	0x20000214

00000fbc <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
     fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
     fc0:	4b35      	ldr	r3, [pc, #212]	; (1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>)
{
     fc2:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
     fc4:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
     fc6:	f04f 0320 	mov.w	r3, #32
     fca:	f3ef 8811 	mrs	r8, BASEPRI
     fce:	f383 8812 	msr	BASEPRI_MAX, r3
     fd2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
     fd6:	240c      	movs	r4, #12
     fd8:	4b30      	ldr	r3, [pc, #192]	; (109c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>)
     fda:	4e31      	ldr	r6, [pc, #196]	; (10a0 <CONFIG_FPROTECT_BLOCK_SIZE+0xa0>)
     fdc:	436c      	muls	r4, r5
     fde:	191a      	adds	r2, r3, r4
     fe0:	5d19      	ldrb	r1, [r3, r4]
     fe2:	2900      	cmp	r1, #0
     fe4:	d04c      	beq.n	1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
     fe6:	ca07      	ldmia	r2, {r0, r1, r2}
     fe8:	eb06 0c04 	add.w	ip, r6, r4
     fec:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
     ff0:	2200      	movs	r2, #0
     ff2:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
     ff4:	f388 8811 	msr	BASEPRI, r8
     ff8:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
     ffc:	230c      	movs	r3, #12
     ffe:	436b      	muls	r3, r5
    1000:	18f2      	adds	r2, r6, r3
    1002:	5cf0      	ldrb	r0, [r6, r3]
    1004:	2800      	cmp	r0, #0
    1006:	d039      	beq.n	107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    1008:	1c7b      	adds	r3, r7, #1
    100a:	d010      	beq.n	102e <CONFIG_FPROTECT_BLOCK_SIZE+0x2e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    100c:	f8d2 c008 	ldr.w	ip, [r2, #8]
    1010:	4c24      	ldr	r4, [pc, #144]	; (10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>)
    1012:	4a25      	ldr	r2, [pc, #148]	; (10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>)
    1014:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    1018:	2100      	movs	r1, #0
    101a:	fbec 4100 	umlal	r4, r1, ip, r0
    101e:	2300      	movs	r3, #0
    1020:	4620      	mov	r0, r4
    1022:	f7ff f85b 	bl	dc <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    1026:	2101      	movs	r1, #1
    1028:	1a38      	subs	r0, r7, r0
    102a:	f001 fb1f 	bl	266c <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    102e:	f002 fcfd 	bl	3a2c <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    1032:	2001      	movs	r0, #1
    1034:	f7ff ff58 	bl	ee8 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1038:	f3bf 8f5b 	dmb	ish
    103c:	4b1b      	ldr	r3, [pc, #108]	; (10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    103e:	096a      	lsrs	r2, r5, #5
    1040:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    1044:	f005 011f 	and.w	r1, r5, #31
    1048:	2201      	movs	r2, #1
    104a:	408a      	lsls	r2, r1
    104c:	e853 0f00 	ldrex	r0, [r3]
    1050:	4310      	orrs	r0, r2
    1052:	e843 0100 	strex	r1, r0, [r3]
    1056:	2900      	cmp	r1, #0
    1058:	d1f8      	bne.n	104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>
    105a:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    105e:	4b14      	ldr	r3, [pc, #80]	; (10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>)
    1060:	b13b      	cbz	r3, 1072 <CONFIG_FPROTECT_BLOCK_SIZE+0x72>
		pm_state_set(info->state, info->substate_id);
    1062:	230c      	movs	r3, #12
    1064:	fb03 f005 	mul.w	r0, r3, r5
    1068:	1833      	adds	r3, r6, r0
    106a:	5c30      	ldrb	r0, [r6, r0]
    106c:	7859      	ldrb	r1, [r3, #1]
    106e:	f003 f93e 	bl	42ee <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    1072:	f7ff ff67 	bl	f44 <pm_system_resume>
	k_sched_unlock();
    1076:	f002 fced 	bl	3a54 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    107a:	2001      	movs	r0, #1
}
    107c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    1080:	4601      	mov	r1, r0
    1082:	4628      	mov	r0, r5
    1084:	f000 f816 	bl	10b4 <pm_policy_next_state>
		if (info != NULL) {
    1088:	2800      	cmp	r0, #0
    108a:	d0b3      	beq.n	ff4 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    108c:	c807      	ldmia	r0, {r0, r1, r2}
    108e:	4434      	add	r4, r6
    1090:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    1094:	e7ae      	b.n	ff4 <pm_system_suspend+0x38>
    1096:	bf00      	nop
    1098:	20000368 	.word	0x20000368
    109c:	20000208 	.word	0x20000208
    10a0:	20000214 	.word	0x20000214
    10a4:	000f423f 	.word	0x000f423f
    10a8:	000f4240 	.word	0x000f4240
    10ac:	20000228 	.word	0x20000228
    10b0:	000042ef 	.word	0x000042ef

000010b4 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    10b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10b8:	b085      	sub	sp, #20
    10ba:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    10bc:	a903      	add	r1, sp, #12
    10be:	f000 f843 	bl	1148 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    10c2:	4b1e      	ldr	r3, [pc, #120]	; (113c <pm_policy_next_state+0x88>)
    10c4:	9d03      	ldr	r5, [sp, #12]
    10c6:	f8d3 a000 	ldr.w	sl, [r3]
    10ca:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1140 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    10ce:	1e43      	subs	r3, r0, #1
    10d0:	b21b      	sxth	r3, r3
    10d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    10d6:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    10d8:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    10dc:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    10e0:	f04f 0b00 	mov.w	fp, #0
    10e4:	b924      	cbnz	r4, 10f0 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    10e6:	46a1      	mov	r9, r4
}
    10e8:	4648      	mov	r0, r9
    10ea:	b005      	add	sp, #20
    10ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10f0:	6868      	ldr	r0, [r5, #4]
    10f2:	4a14      	ldr	r2, [pc, #80]	; (1144 <pm_policy_next_state+0x90>)
    10f4:	46c4      	mov	ip, r8
    10f6:	4659      	mov	r1, fp
    10f8:	fbe0 c107 	umlal	ip, r1, r0, r7
    10fc:	2300      	movs	r3, #0
    10fe:	4660      	mov	r0, ip
    1100:	f7fe ffec 	bl	dc <__aeabi_uldivmod>
    1104:	9001      	str	r0, [sp, #4]
    1106:	68a8      	ldr	r0, [r5, #8]
    1108:	4a0e      	ldr	r2, [pc, #56]	; (1144 <pm_policy_next_state+0x90>)
    110a:	46c4      	mov	ip, r8
    110c:	4659      	mov	r1, fp
    110e:	fbe0 c107 	umlal	ip, r1, r0, r7
    1112:	2300      	movs	r3, #0
    1114:	4660      	mov	r0, ip
    1116:	f7fe ffe1 	bl	dc <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    111a:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    111e:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1120:	d001      	beq.n	1126 <pm_policy_next_state+0x72>
    1122:	4582      	cmp	sl, r0
    1124:	d905      	bls.n	1132 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    1126:	1c73      	adds	r3, r6, #1
    1128:	d0de      	beq.n	10e8 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    112a:	9b01      	ldr	r3, [sp, #4]
    112c:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    112e:	42b0      	cmp	r0, r6
    1130:	d9da      	bls.n	10e8 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1132:	3c01      	subs	r4, #1
    1134:	b2a4      	uxth	r4, r4
    1136:	3d0c      	subs	r5, #12
    1138:	e7d4      	b.n	10e4 <pm_policy_next_state+0x30>
    113a:	bf00      	nop
    113c:	20000004 	.word	0x20000004
    1140:	000f423f 	.word	0x000f423f
    1144:	000f4240 	.word	0x000f4240

00001148 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    1148:	b908      	cbnz	r0, 114e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    114a:	4b02      	ldr	r3, [pc, #8]	; (1154 <pm_state_cpu_get_all+0xc>)
    114c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    114e:	2000      	movs	r0, #0
    1150:	4770      	bx	lr
    1152:	bf00      	nop
    1154:	00004be8 	.word	0x00004be8

00001158 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1158:	4901      	ldr	r1, [pc, #4]	; (1160 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    115a:	2210      	movs	r2, #16
	str	r2, [r1]
    115c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    115e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1160:	e000ed10 	.word	0xe000ed10

00001164 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1164:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1166:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1168:	f380 8811 	msr	BASEPRI, r0
	isb
    116c:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    1170:	f3bf 8f4f 	dsb	sy
    1174:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1176:	b662      	cpsie	i
	isb
    1178:	f3bf 8f6f 	isb	sy

	bx	lr
    117c:	4770      	bx	lr
    117e:	bf00      	nop

00001180 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1180:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1182:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1184:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    1188:	f3bf 8f4f 	dsb	sy
    118c:	bf20      	wfe

	msr	BASEPRI, r0
    118e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1192:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1194:	4770      	bx	lr
    1196:	bf00      	nop

00001198 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1198:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    119a:	2800      	cmp	r0, #0
    119c:	db07      	blt.n	11ae <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    119e:	4a04      	ldr	r2, [pc, #16]	; (11b0 <arch_irq_enable+0x18>)
    11a0:	0941      	lsrs	r1, r0, #5
    11a2:	2301      	movs	r3, #1
    11a4:	f000 001f 	and.w	r0, r0, #31
    11a8:	4083      	lsls	r3, r0
    11aa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    11ae:	4770      	bx	lr
    11b0:	e000e100 	.word	0xe000e100

000011b4 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    11b4:	4b05      	ldr	r3, [pc, #20]	; (11cc <arch_irq_is_enabled+0x18>)
    11b6:	0942      	lsrs	r2, r0, #5
    11b8:	f000 001f 	and.w	r0, r0, #31
    11bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    11c0:	2301      	movs	r3, #1
    11c2:	fa03 f000 	lsl.w	r0, r3, r0
}
    11c6:	4010      	ands	r0, r2
    11c8:	4770      	bx	lr
    11ca:	bf00      	nop
    11cc:	e000e100 	.word	0xe000e100

000011d0 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    11d0:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    11d2:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11d4:	bfa8      	it	ge
    11d6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    11da:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11de:	bfb8      	it	lt
    11e0:	4b06      	ldrlt	r3, [pc, #24]	; (11fc <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11e2:	ea4f 1141 	mov.w	r1, r1, lsl #5
    11e6:	bfac      	ite	ge
    11e8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11ec:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11f0:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11f2:	bfb4      	ite	lt
    11f4:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11f6:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    11fa:	4770      	bx	lr
    11fc:	e000ed14 	.word	0xe000ed14

00001200 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1200:	bf30      	wfi
    b z_SysNmiOnReset
    1202:	f7ff bffd 	b.w	1200 <z_SysNmiOnReset>
    1206:	bf00      	nop

00001208 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1208:	4a0b      	ldr	r2, [pc, #44]	; (1238 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    120a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    120c:	4b0b      	ldr	r3, [pc, #44]	; (123c <z_arm_prep_c+0x34>)
    120e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1212:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1214:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1218:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    121c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1220:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1224:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1228:	f002 f89a 	bl	3360 <z_bss_zero>
	z_data_copy();
    122c:	f002 fd38 	bl	3ca0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1230:	f000 fa20 	bl	1674 <z_arm_interrupt_init>
	z_cstart();
    1234:	f002 f8d8 	bl	33e8 <z_cstart>
    1238:	00000000 	.word	0x00000000
    123c:	e000ed00 	.word	0xe000ed00

00001240 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1240:	4a09      	ldr	r2, [pc, #36]	; (1268 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1242:	490a      	ldr	r1, [pc, #40]	; (126c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1244:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1246:	6809      	ldr	r1, [r1, #0]
    1248:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    124a:	4909      	ldr	r1, [pc, #36]	; (1270 <arch_swap+0x30>)
	_current->arch.basepri = key;
    124c:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    124e:	684b      	ldr	r3, [r1, #4]
    1250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1254:	604b      	str	r3, [r1, #4]
    1256:	2300      	movs	r3, #0
    1258:	f383 8811 	msr	BASEPRI, r3
    125c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1260:	6893      	ldr	r3, [r2, #8]
}
    1262:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1264:	4770      	bx	lr
    1266:	bf00      	nop
    1268:	20000368 	.word	0x20000368
    126c:	00004cc8 	.word	0x00004cc8
    1270:	e000ed00 	.word	0xe000ed00

00001274 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1274:	4912      	ldr	r1, [pc, #72]	; (12c0 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1276:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1278:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    127c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    127e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1282:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1286:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1288:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    128c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1290:	4f0c      	ldr	r7, [pc, #48]	; (12c4 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1292:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1296:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    1298:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    129a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    129c:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    129e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    12a0:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    12a2:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    12a6:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    12a8:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    12aa:	f000 fa7f 	bl	17ac <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    12ae:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    12b2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    12b6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    12ba:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    12be:	4770      	bx	lr
    ldr r1, =_kernel
    12c0:	20000368 	.word	0x20000368
    ldr v4, =_SCS_ICSR
    12c4:	e000ed04 	.word	0xe000ed04

000012c8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    12c8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    12cc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    12ce:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    12d2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    12d6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    12d8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    12dc:	2902      	cmp	r1, #2
    beq _oops
    12de:	d0ff      	beq.n	12e0 <_oops>

000012e0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    12e0:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    12e2:	f002 ffc2 	bl	426a <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    12e6:	bd01      	pop	{r0, pc}

000012e8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    12e8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    12ec:	9b00      	ldr	r3, [sp, #0]
    12ee:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    12f2:	490a      	ldr	r1, [pc, #40]	; (131c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    12f4:	9b01      	ldr	r3, [sp, #4]
    12f6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    12fa:	9b02      	ldr	r3, [sp, #8]
    12fc:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    1300:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1304:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1308:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    130c:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1310:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1312:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1314:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1316:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1318:	4770      	bx	lr
    131a:	bf00      	nop
    131c:	00003fe5 	.word	0x00003fe5

00001320 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1320:	4a09      	ldr	r2, [pc, #36]	; (1348 <z_check_thread_stack_fail+0x28>)
{
    1322:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    1324:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    1326:	b170      	cbz	r0, 1346 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1328:	f113 0f16 	cmn.w	r3, #22
    132c:	6e40      	ldr	r0, [r0, #100]	; 0x64
    132e:	d005      	beq.n	133c <z_check_thread_stack_fail+0x1c>
    1330:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    1334:	429a      	cmp	r2, r3
    1336:	d805      	bhi.n	1344 <z_check_thread_stack_fail+0x24>
    1338:	4283      	cmp	r3, r0
    133a:	d203      	bcs.n	1344 <z_check_thread_stack_fail+0x24>
		return 0;
    133c:	4281      	cmp	r1, r0
    133e:	bf28      	it	cs
    1340:	2000      	movcs	r0, #0
    1342:	4770      	bx	lr
    1344:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    1346:	4770      	bx	lr
    1348:	20000368 	.word	0x20000368

0000134c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    134c:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    134e:	4b09      	ldr	r3, [pc, #36]	; (1374 <arch_switch_to_main_thread+0x28>)
{
    1350:	460d      	mov	r5, r1
    1352:	4614      	mov	r4, r2
	_current = main_thread;
    1354:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1356:	f000 fa29 	bl	17ac <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    135a:	4620      	mov	r0, r4
    135c:	f385 8809 	msr	PSP, r5
    1360:	2100      	movs	r1, #0
    1362:	b663      	cpsie	if
    1364:	f381 8811 	msr	BASEPRI, r1
    1368:	f3bf 8f6f 	isb	sy
    136c:	2200      	movs	r2, #0
    136e:	2300      	movs	r3, #0
    1370:	f002 fe38 	bl	3fe4 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1374:	20000368 	.word	0x20000368

00001378 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1378:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    137a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    137c:	4a0b      	ldr	r2, [pc, #44]	; (13ac <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    137e:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    1380:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1382:	bf1e      	ittt	ne
	movne	r1, #0
    1384:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1386:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    1388:	f003 fa23 	blne	47d2 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    138c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    138e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1392:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1396:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    139a:	4905      	ldr	r1, [pc, #20]	; (13b0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    139c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    139e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    13a0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    13a2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    13a6:	4903      	ldr	r1, [pc, #12]	; (13b4 <_isr_wrapper+0x3c>)
	bx r1
    13a8:	4708      	bx	r1
    13aa:	0000      	.short	0x0000
	ldr r2, =_kernel
    13ac:	20000368 	.word	0x20000368
	ldr r1, =_sw_isr_table
    13b0:	00004a0c 	.word	0x00004a0c
	ldr r1, =z_arm_int_exit
    13b4:	000013b9 	.word	0x000013b9

000013b8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    13b8:	4b04      	ldr	r3, [pc, #16]	; (13cc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    13ba:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    13bc:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    13be:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    13c0:	d003      	beq.n	13ca <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    13c2:	4903      	ldr	r1, [pc, #12]	; (13d0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    13c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    13c8:	600a      	str	r2, [r1, #0]

000013ca <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    13ca:	4770      	bx	lr
	ldr r3, =_kernel
    13cc:	20000368 	.word	0x20000368
	ldr r1, =_SCS_ICSR
    13d0:	e000ed04 	.word	0xe000ed04

000013d4 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    13d4:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    13d6:	4b26      	ldr	r3, [pc, #152]	; (1470 <mem_manage_fault+0x9c>)
{
    13d8:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    13da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    13dc:	f012 0f10 	tst.w	r2, #16
		reason = K_ERR_ARM_MEM_STACKING;
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    13e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    13e2:	bf14      	ite	ne
    13e4:	2411      	movne	r4, #17
    13e6:	2410      	moveq	r4, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
    13e8:	f012 0f08 	tst.w	r2, #8
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    13ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
    13ee:	bf18      	it	ne
    13f0:	2412      	movne	r4, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    13f2:	0792      	lsls	r2, r2, #30
{
    13f4:	4606      	mov	r6, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    13f6:	d50a      	bpl.n	140e <mem_manage_fault+0x3a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    13f8:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    13fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    13fc:	0614      	lsls	r4, r2, #24
    13fe:	d534      	bpl.n	146a <mem_manage_fault+0x96>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    1400:	b119      	cbz	r1, 140a <mem_manage_fault+0x36>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1402:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1404:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1408:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    140a:	2413      	movs	r4, #19
    140c:	e001      	b.n	1412 <mem_manage_fault+0x3e>
	uint32_t mmfar = -EINVAL;
    140e:	f06f 0015 	mvn.w	r0, #21
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1412:	4b17      	ldr	r3, [pc, #92]	; (1470 <mem_manage_fault+0x9c>)
    1414:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    1416:	f012 0f01 	tst.w	r2, #1
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    141a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    141c:	bf18      	it	ne
    141e:	2414      	movne	r4, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    1420:	f012 0f20 	tst.w	r2, #32
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    1426:	bf18      	it	ne
    1428:	2415      	movne	r4, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    142a:	06d2      	lsls	r2, r2, #27
    142c:	d402      	bmi.n	1434 <mem_manage_fault+0x60>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    142e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1430:	079b      	lsls	r3, r3, #30
    1432:	d50a      	bpl.n	144a <mem_manage_fault+0x76>
		 * not accompanied by a data access violation error (i.e.
		 * when stack overflows due to the exception entry frame
		 * stacking): z_check_thread_stack_fail() shall be able to
		 * handle the case of 'mmfar' holding the -EINVAL value.
		 */
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1434:	4b0e      	ldr	r3, [pc, #56]	; (1470 <mem_manage_fault+0x9c>)
    1436:	685b      	ldr	r3, [r3, #4]
    1438:	0519      	lsls	r1, r3, #20
    143a:	d506      	bpl.n	144a <mem_manage_fault+0x76>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    143c:	4631      	mov	r1, r6
    143e:	f7ff ff6f 	bl	1320 <z_check_thread_stack_fail>
				((uint32_t) &esf[0]));

			if (min_stack_ptr) {
    1442:	b110      	cbz	r0, 144a <mem_manage_fault+0x76>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1444:	f380 8809 	msr	PSP, r0
				 * fatal error and a thread that corrupted its
				 * stack needs to be aborted.
				 */
				__set_PSP(min_stack_ptr);

				reason = K_ERR_STACK_CHK_FAIL;
    1448:	2402      	movs	r4, #2
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    144a:	4b09      	ldr	r3, [pc, #36]	; (1470 <mem_manage_fault+0x9c>)
    144c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    144e:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    1450:	bf42      	ittt	mi
    1452:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    1454:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    1458:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    145a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    145c:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    1460:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    1462:	2300      	movs	r3, #0
    1464:	702b      	strb	r3, [r5, #0]

	return reason;
}
    1466:	4620      	mov	r0, r4
    1468:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    146a:	f06f 0015 	mvn.w	r0, #21
    146e:	e7cc      	b.n	140a <mem_manage_fault+0x36>
    1470:	e000ed00 	.word	0xe000ed00

00001474 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1474:	4b13      	ldr	r3, [pc, #76]	; (14c4 <usage_fault.constprop.0+0x50>)
    1476:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    1478:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    147c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    147e:	bf14      	ite	ne
    1480:	201e      	movne	r0, #30
    1482:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    1484:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1488:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    148a:	bf18      	it	ne
    148c:	201f      	movne	r0, #31
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    148e:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1492:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    1494:	bf18      	it	ne
    1496:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    1498:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    149c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    149e:	bf18      	it	ne
    14a0:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    14a2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    14a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    14a8:	bf18      	it	ne
    14aa:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    14ac:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    14b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    14b2:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    14b6:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    14ba:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    14bc:	bf18      	it	ne
    14be:	2024      	movne	r0, #36	; 0x24
    14c0:	4770      	bx	lr
    14c2:	bf00      	nop
    14c4:	e000ed00 	.word	0xe000ed00

000014c8 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    14c8:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    14ca:	4b19      	ldr	r3, [pc, #100]	; (1530 <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    14cc:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    14ce:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    14d0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    14d2:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    14d6:	bf14      	ite	ne
    14d8:	2017      	movne	r0, #23
    14da:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
    14dc:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    14e0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
    14e2:	bf18      	it	ne
    14e4:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    14e6:	05a4      	lsls	r4, r4, #22
    14e8:	d509      	bpl.n	14fe <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
    14ea:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    14ec:	6a98      	ldr	r0, [r3, #40]	; 0x28
    14ee:	0400      	lsls	r0, r0, #16
    14f0:	d504      	bpl.n	14fc <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    14f2:	b11a      	cbz	r2, 14fc <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    14f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    14f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    14fa:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    14fc:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    14fe:	4b0c      	ldr	r3, [pc, #48]	; (1530 <bus_fault.constprop.0+0x68>)
    1500:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    1502:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1506:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    1508:	bf18      	it	ne
    150a:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    150c:	05d2      	lsls	r2, r2, #23
    150e:	d40c      	bmi.n	152a <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    1512:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    1516:	bf18      	it	ne
    1518:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    151a:	4a05      	ldr	r2, [pc, #20]	; (1530 <bus_fault.constprop.0+0x68>)
    151c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    151e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1522:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1524:	2300      	movs	r3, #0
    1526:	700b      	strb	r3, [r1, #0]
}
    1528:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    152a:	201b      	movs	r0, #27
    152c:	e7f5      	b.n	151a <bus_fault.constprop.0+0x52>
    152e:	bf00      	nop
    1530:	e000ed00 	.word	0xe000ed00

00001534 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1534:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1536:	4b45      	ldr	r3, [pc, #276]	; (164c <z_arm_fault+0x118>)
    1538:	685b      	ldr	r3, [r3, #4]
{
    153a:	b08a      	sub	sp, #40	; 0x28
    153c:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    153e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1542:	2600      	movs	r6, #0
    1544:	f386 8811 	msr	BASEPRI, r6
    1548:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    154c:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    1550:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    1554:	d111      	bne.n	157a <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1556:	f002 000c 	and.w	r0, r2, #12
    155a:	2808      	cmp	r0, #8
    155c:	d00d      	beq.n	157a <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    155e:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    1560:	bf4c      	ite	mi
    1562:	460d      	movmi	r5, r1
			*nested_exc = true;
    1564:	2601      	movpl	r6, #1
	*recoverable = false;
    1566:	2200      	movs	r2, #0
	switch (fault) {
    1568:	3b03      	subs	r3, #3
	*recoverable = false;
    156a:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    156e:	2b03      	cmp	r3, #3
    1570:	d805      	bhi.n	157e <z_arm_fault+0x4a>
    1572:	e8df f003 	tbb	[pc, r3]
    1576:	5d1e      	.short	0x5d1e
    1578:	5a61      	.short	0x5a61
		return NULL;
    157a:	4635      	mov	r5, r6
    157c:	e7f3      	b.n	1566 <z_arm_fault+0x32>
    157e:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1580:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1584:	b99b      	cbnz	r3, 15ae <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1586:	2220      	movs	r2, #32
    1588:	4629      	mov	r1, r5
    158a:	a802      	add	r0, sp, #8
    158c:	f002 fe96 	bl	42bc <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1590:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1592:	2e00      	cmp	r6, #0
    1594:	d054      	beq.n	1640 <z_arm_fault+0x10c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1596:	f3c3 0208 	ubfx	r2, r3, #0, #9
    159a:	b922      	cbnz	r2, 15a6 <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    159c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    15a0:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    15a4:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    15a6:	a902      	add	r1, sp, #8
    15a8:	4620      	mov	r0, r4
    15aa:	f002 fe5c 	bl	4266 <z_arm_fatal_error>
}
    15ae:	b00a      	add	sp, #40	; 0x28
    15b0:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    15b2:	4b26      	ldr	r3, [pc, #152]	; (164c <z_arm_fault+0x118>)
    15b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    15b6:	0791      	lsls	r1, r2, #30
    15b8:	d4e1      	bmi.n	157e <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    15ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    15bc:	2a00      	cmp	r2, #0
    15be:	dbde      	blt.n	157e <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    15c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    15c2:	0052      	lsls	r2, r2, #1
    15c4:	d5db      	bpl.n	157e <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    15c6:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    15c8:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    15ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    15ce:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    15d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    15d4:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    15d8:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    15da:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    15de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    15e2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    15e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    15e8:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    15ec:	f64d 7202 	movw	r2, #57090	; 0xdf02
    15f0:	4291      	cmp	r1, r2
    15f2:	d00a      	beq.n	160a <z_arm_fault+0xd6>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    15f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    15f6:	b2d2      	uxtb	r2, r2
    15f8:	b14a      	cbz	r2, 160e <z_arm_fault+0xda>
			reason = mem_manage_fault(esf, 1, recoverable);
    15fa:	f10d 0207 	add.w	r2, sp, #7
    15fe:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1600:	4628      	mov	r0, r5
    1602:	f7ff fee7 	bl	13d4 <mem_manage_fault>
		reason = usage_fault(esf);
    1606:	4604      	mov	r4, r0
		break;
    1608:	e7ba      	b.n	1580 <z_arm_fault+0x4c>
			reason = esf->basic.r0;
    160a:	682c      	ldr	r4, [r5, #0]
    160c:	e7b8      	b.n	1580 <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    160e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1610:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    1614:	d005      	beq.n	1622 <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
    1616:	f10d 0107 	add.w	r1, sp, #7
    161a:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    161c:	f7ff ff54 	bl	14c8 <bus_fault.constprop.0>
    1620:	e7f1      	b.n	1606 <z_arm_fault+0xd2>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    1622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    1628:	d3a9      	bcc.n	157e <z_arm_fault+0x4a>
		reason = usage_fault(esf);
    162a:	f7ff ff23 	bl	1474 <usage_fault.constprop.0>
    162e:	e7ea      	b.n	1606 <z_arm_fault+0xd2>
		reason = mem_manage_fault(esf, 0, recoverable);
    1630:	f10d 0207 	add.w	r2, sp, #7
    1634:	2100      	movs	r1, #0
    1636:	e7e3      	b.n	1600 <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
    1638:	f10d 0107 	add.w	r1, sp, #7
    163c:	2000      	movs	r0, #0
    163e:	e7ed      	b.n	161c <z_arm_fault+0xe8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1640:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1644:	f023 0301 	bic.w	r3, r3, #1
    1648:	e7ac      	b.n	15a4 <z_arm_fault+0x70>
    164a:	bf00      	nop
    164c:	e000ed00 	.word	0xe000ed00

00001650 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1650:	4a02      	ldr	r2, [pc, #8]	; (165c <z_arm_fault_init+0xc>)
    1652:	6953      	ldr	r3, [r2, #20]
    1654:	f043 0310 	orr.w	r3, r3, #16
    1658:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    165a:	4770      	bx	lr
    165c:	e000ed00 	.word	0xe000ed00

00001660 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1660:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1664:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1668:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    166a:	4672      	mov	r2, lr
	bl z_arm_fault
    166c:	f7ff ff62 	bl	1534 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1670:	bd01      	pop	{r0, pc}
    1672:	bf00      	nop

00001674 <z_arm_interrupt_init>:
    1674:	4804      	ldr	r0, [pc, #16]	; (1688 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1676:	2300      	movs	r3, #0
    1678:	2120      	movs	r1, #32
    167a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    167c:	3301      	adds	r3, #1
    167e:	2b27      	cmp	r3, #39	; 0x27
    1680:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1684:	d1f9      	bne.n	167a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1686:	4770      	bx	lr
    1688:	e000e100 	.word	0xe000e100

0000168c <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    168c:	2000      	movs	r0, #0
    msr CONTROL, r0
    168e:	f380 8814 	msr	CONTROL, r0
    isb
    1692:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1696:	f7ff fc25 	bl	ee4 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    169a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    169c:	490d      	ldr	r1, [pc, #52]	; (16d4 <__start+0x48>)
    str r0, [r1]
    169e:	6008      	str	r0, [r1, #0]
    dsb
    16a0:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    16a4:	480c      	ldr	r0, [pc, #48]	; (16d8 <__start+0x4c>)
    msr msp, r0
    16a6:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    16aa:	f000 f82b 	bl	1704 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    16ae:	2020      	movs	r0, #32
    msr BASEPRI, r0
    16b0:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    16b4:	4809      	ldr	r0, [pc, #36]	; (16dc <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    16b6:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    16ba:	1840      	adds	r0, r0, r1
    msr PSP, r0
    16bc:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    16c0:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    16c4:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    16c6:	4308      	orrs	r0, r1
    msr CONTROL, r0
    16c8:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    16cc:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    16d0:	f7ff fd9a 	bl	1208 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    16d4:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    16d8:	20001580 	.word	0x20001580
    ldr r0, =z_interrupt_stacks
    16dc:	200007c0 	.word	0x200007c0

000016e0 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    16e0:	4907      	ldr	r1, [pc, #28]	; (1700 <z_arm_clear_arm_mpu_config+0x20>)
    16e2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    16e6:	2300      	movs	r3, #0
	int num_regions =
    16e8:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    16ec:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    16ee:	4293      	cmp	r3, r2
    16f0:	db00      	blt.n	16f4 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    16f2:	4770      	bx	lr
  MPU->RNR = rnr;
    16f4:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    16f8:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    16fc:	3301      	adds	r3, #1
    16fe:	e7f6      	b.n	16ee <z_arm_clear_arm_mpu_config+0xe>
    1700:	e000ed00 	.word	0xe000ed00

00001704 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1704:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1706:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1708:	2300      	movs	r3, #0
    170a:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    170e:	f7ff ffe7 	bl	16e0 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1712:	4b14      	ldr	r3, [pc, #80]	; (1764 <z_arm_init_arch_hw_at_boot+0x60>)
    1714:	f04f 32ff 	mov.w	r2, #4294967295
    1718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    171c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    1720:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1724:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    1728:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    172c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    1730:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    1734:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1738:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    173c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    1740:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    1744:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    1748:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    174c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    1750:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    1754:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    1758:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    175a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    175e:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1762:	bd08      	pop	{r3, pc}
    1764:	e000e100 	.word	0xe000e100

00001768 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    1768:	4b08      	ldr	r3, [pc, #32]	; (178c <z_impl_k_thread_abort+0x24>)
    176a:	689b      	ldr	r3, [r3, #8]
    176c:	4283      	cmp	r3, r0
    176e:	d10b      	bne.n	1788 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1770:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1774:	b143      	cbz	r3, 1788 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1776:	4b06      	ldr	r3, [pc, #24]	; (1790 <z_impl_k_thread_abort+0x28>)
    1778:	685a      	ldr	r2, [r3, #4]
    177a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    177e:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    1780:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1782:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1786:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    1788:	f002 ba2a 	b.w	3be0 <z_thread_abort>
    178c:	20000368 	.word	0x20000368
    1790:	e000ed00 	.word	0xe000ed00

00001794 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1794:	4b02      	ldr	r3, [pc, #8]	; (17a0 <z_arm_configure_static_mpu_regions+0xc>)
    1796:	4a03      	ldr	r2, [pc, #12]	; (17a4 <z_arm_configure_static_mpu_regions+0x10>)
    1798:	4803      	ldr	r0, [pc, #12]	; (17a8 <z_arm_configure_static_mpu_regions+0x14>)
    179a:	2101      	movs	r1, #1
    179c:	f000 b870 	b.w	1880 <arm_core_mpu_configure_static_mpu_regions>
    17a0:	20010000 	.word	0x20010000
    17a4:	20000000 	.word	0x20000000
    17a8:	00004be8 	.word	0x00004be8

000017ac <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    17ac:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    17ae:	4b05      	ldr	r3, [pc, #20]	; (17c4 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    17b0:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    17b2:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    17b4:	4a04      	ldr	r2, [pc, #16]	; (17c8 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    17b6:	2140      	movs	r1, #64	; 0x40
    17b8:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    17bc:	4618      	mov	r0, r3
    17be:	2101      	movs	r1, #1
    17c0:	f000 b868 	b.w	1894 <arm_core_mpu_configure_dynamic_mpu_regions>
    17c4:	2000022c 	.word	0x2000022c
    17c8:	150b0000 	.word	0x150b0000

000017cc <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    17cc:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    17ce:	4e20      	ldr	r6, [pc, #128]	; (1850 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    17d0:	2500      	movs	r5, #0
    17d2:	428d      	cmp	r5, r1
    17d4:	da39      	bge.n	184a <mpu_configure_regions+0x7e>
		if (regions[i].size == 0U) {
    17d6:	6844      	ldr	r4, [r0, #4]
    17d8:	b374      	cbz	r4, 1838 <mpu_configure_regions+0x6c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    17da:	b153      	cbz	r3, 17f2 <mpu_configure_regions+0x26>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    17dc:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    17e0:	ea14 0f0c 	tst.w	r4, ip
    17e4:	d12f      	bne.n	1846 <mpu_configure_regions+0x7a>
		&&
    17e6:	2c1f      	cmp	r4, #31
    17e8:	d92d      	bls.n	1846 <mpu_configure_regions+0x7a>
		((part->start & (part->size - 1U)) == 0U);
    17ea:	6807      	ldr	r7, [r0, #0]
		&&
    17ec:	ea1c 0f07 	tst.w	ip, r7
    17f0:	d129      	bne.n	1846 <mpu_configure_regions+0x7a>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    17f2:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    17f4:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    17f6:	f8d0 c008 	ldr.w	ip, [r0, #8]
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    17fa:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    17fe:	d91e      	bls.n	183e <mpu_configure_regions+0x72>
	if (size > (1UL << 31)) {
    1800:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    1804:	d81d      	bhi.n	1842 <mpu_configure_regions+0x76>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    1806:	3c01      	subs	r4, #1
    1808:	fab4 f484 	clz	r4, r4
    180c:	f1c4 041f 	rsb	r4, r4, #31
    1810:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    1812:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1816:	ea4c 0c04 	orr.w	ip, ip, r4
    181a:	d814      	bhi.n	1846 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    181c:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    1820:	4314      	orrs	r4, r2
    1822:	f044 0410 	orr.w	r4, r4, #16
    1826:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    182a:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    182e:	f04c 0401 	orr.w	r4, ip, #1
    1832:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		if (reg_index == -EINVAL) {
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    1836:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    1838:	3501      	adds	r5, #1
    183a:	300c      	adds	r0, #12
    183c:	e7c9      	b.n	17d2 <mpu_configure_regions+0x6>
		return REGION_32B;
    183e:	2408      	movs	r4, #8
    1840:	e7e7      	b.n	1812 <mpu_configure_regions+0x46>
		return REGION_4G;
    1842:	243e      	movs	r4, #62	; 0x3e
    1844:	e7e5      	b.n	1812 <mpu_configure_regions+0x46>
			return -EINVAL;
    1846:	f06f 0215 	mvn.w	r2, #21
	}

	return reg_index;
}
    184a:	4610      	mov	r0, r2
    184c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    184e:	bf00      	nop
    1850:	e000ed00 	.word	0xe000ed00

00001854 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1854:	4b04      	ldr	r3, [pc, #16]	; (1868 <arm_core_mpu_enable+0x14>)
    1856:	2205      	movs	r2, #5
    1858:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    185c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1860:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1864:	4770      	bx	lr
    1866:	bf00      	nop
    1868:	e000ed00 	.word	0xe000ed00

0000186c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    186c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1870:	4b02      	ldr	r3, [pc, #8]	; (187c <arm_core_mpu_disable+0x10>)
    1872:	2200      	movs	r2, #0
    1874:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    1878:	4770      	bx	lr
    187a:	bf00      	nop
    187c:	e000ed00 	.word	0xe000ed00

00001880 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    1880:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1882:	4c03      	ldr	r4, [pc, #12]	; (1890 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1884:	2301      	movs	r3, #1
    1886:	7822      	ldrb	r2, [r4, #0]
    1888:	f7ff ffa0 	bl	17cc <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    188c:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    188e:	bd10      	pop	{r4, pc}
    1890:	2000039c 	.word	0x2000039c

00001894 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    1894:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    1896:	4a09      	ldr	r2, [pc, #36]	; (18bc <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    1898:	2300      	movs	r3, #0
    189a:	7812      	ldrb	r2, [r2, #0]
    189c:	f7ff ff96 	bl	17cc <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    18a0:	f110 0f16 	cmn.w	r0, #22
    18a4:	d002      	beq.n	18ac <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
    18a6:	4a06      	ldr	r2, [pc, #24]	; (18c0 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    18a8:	2807      	cmp	r0, #7
    18aa:	dd00      	ble.n	18ae <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    18ac:	bd08      	pop	{r3, pc}
    18ae:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    18b2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    18b6:	3001      	adds	r0, #1
    18b8:	e7f6      	b.n	18a8 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    18ba:	bf00      	nop
    18bc:	2000039c 	.word	0x2000039c
    18c0:	e000ed00 	.word	0xe000ed00

000018c4 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    18c4:	4914      	ldr	r1, [pc, #80]	; (1918 <z_arm_mpu_init+0x54>)
    18c6:	6808      	ldr	r0, [r1, #0]
    18c8:	2808      	cmp	r0, #8
{
    18ca:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    18cc:	d821      	bhi.n	1912 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    18ce:	f7ff ffcd 	bl	186c <arm_core_mpu_disable>
    18d2:	4c12      	ldr	r4, [pc, #72]	; (191c <z_arm_mpu_init+0x58>)
    18d4:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    18d6:	2200      	movs	r2, #0
    18d8:	4290      	cmp	r0, r2
    18da:	f101 010c 	add.w	r1, r1, #12
    18de:	d105      	bne.n	18ec <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    18e0:	4b0f      	ldr	r3, [pc, #60]	; (1920 <z_arm_mpu_init+0x5c>)
    18e2:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    18e4:	f7ff ffb6 	bl	1854 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    18e8:	2000      	movs	r0, #0
}
    18ea:	bd10      	pop	{r4, pc}
    18ec:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    18f0:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    18f4:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    18f8:	4313      	orrs	r3, r2
    18fa:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    18fe:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1902:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1906:	f043 0301 	orr.w	r3, r3, #1
    190a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    190e:	3201      	adds	r2, #1
    1910:	e7e2      	b.n	18d8 <z_arm_mpu_init+0x14>
		return -1;
    1912:	f04f 30ff 	mov.w	r0, #4294967295
    1916:	e7e8      	b.n	18ea <z_arm_mpu_init+0x26>
    1918:	00004bf4 	.word	0x00004bf4
    191c:	e000ed00 	.word	0xe000ed00
    1920:	2000039c 	.word	0x2000039c

00001924 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    1924:	4b01      	ldr	r3, [pc, #4]	; (192c <__stdout_hook_install+0x8>)
    1926:	6018      	str	r0, [r3, #0]
}
    1928:	4770      	bx	lr
    192a:	bf00      	nop
    192c:	20000008 	.word	0x20000008

00001930 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    1930:	3902      	subs	r1, #2
    1932:	2901      	cmp	r1, #1
    1934:	d802      	bhi.n	193c <z_impl_zephyr_fputc+0xc>
    1936:	4b03      	ldr	r3, [pc, #12]	; (1944 <z_impl_zephyr_fputc+0x14>)
    1938:	681b      	ldr	r3, [r3, #0]
    193a:	4718      	bx	r3
}
    193c:	f04f 30ff 	mov.w	r0, #4294967295
    1940:	4770      	bx	lr
    1942:	bf00      	nop
    1944:	20000008 	.word	0x20000008

00001948 <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
    1948:	b40f      	push	{r0, r1, r2, r3}
    194a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    194c:	ab06      	add	r3, sp, #24
    194e:	2100      	movs	r1, #0
    1950:	f853 2b04 	ldr.w	r2, [r3], #4
    1954:	4805      	ldr	r0, [pc, #20]	; (196c <printf+0x24>)
    1956:	9100      	str	r1, [sp, #0]
    1958:	2102      	movs	r1, #2
	va_list vargs;
	int     r;

	va_start(vargs, format);
    195a:	9303      	str	r3, [sp, #12]
    195c:	f7fe ff10 	bl	780 <z_cbvprintf_impl>
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
	va_end(vargs);

	return r;
}
    1960:	b005      	add	sp, #20
    1962:	f85d eb04 	ldr.w	lr, [sp], #4
    1966:	b004      	add	sp, #16
    1968:	4770      	bx	lr
    196a:	bf00      	nop
    196c:	000042eb 	.word	0x000042eb

00001970 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    1970:	f04f 0320 	mov.w	r3, #32
    1974:	f3ef 8211 	mrs	r2, BASEPRI
    1978:	f383 8812 	msr	BASEPRI_MAX, r3
    197c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1980:	4906      	ldr	r1, [pc, #24]	; (199c <nordicsemi_nrf52_init+0x2c>)
    1982:	2301      	movs	r3, #1
    1984:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    1988:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    198c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    1990:	f382 8811 	msr	BASEPRI, r2
    1994:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1998:	2000      	movs	r0, #0
    199a:	4770      	bx	lr
    199c:	4001e000 	.word	0x4001e000

000019a0 <sys_arch_reboot>:
    *p_gpregret = val;
    19a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    19a4:	b2c0      	uxtb	r0, r0
    19a6:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    19aa:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    19ae:	4905      	ldr	r1, [pc, #20]	; (19c4 <sys_arch_reboot+0x24>)
    19b0:	4b05      	ldr	r3, [pc, #20]	; (19c8 <sys_arch_reboot+0x28>)
    19b2:	68ca      	ldr	r2, [r1, #12]
    19b4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    19b8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    19ba:	60cb      	str	r3, [r1, #12]
    19bc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    19c0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    19c2:	e7fd      	b.n	19c0 <sys_arch_reboot+0x20>
    19c4:	e000ed00 	.word	0xe000ed00
    19c8:	05fa0004 	.word	0x05fa0004

000019cc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    19cc:	b120      	cbz	r0, 19d8 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    19ce:	4b03      	ldr	r3, [pc, #12]	; (19dc <arch_busy_wait+0x10>)
    19d0:	0180      	lsls	r0, r0, #6
    19d2:	f043 0301 	orr.w	r3, r3, #1
    19d6:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    19d8:	4770      	bx	lr
    19da:	bf00      	nop
    19dc:	00004bb0 	.word	0x00004bb0

000019e0 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    19e0:	4b08      	ldr	r3, [pc, #32]	; (1a04 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    19e2:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    19e4:	1ac3      	subs	r3, r0, r3
{
    19e6:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    19e8:	4907      	ldr	r1, [pc, #28]	; (1a08 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    19ea:	109b      	asrs	r3, r3, #2
{
    19ec:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    19ee:	4359      	muls	r1, r3
    19f0:	4806      	ldr	r0, [pc, #24]	; (1a0c <onoff_stop+0x2c>)
    19f2:	2240      	movs	r2, #64	; 0x40
    19f4:	f002 fca9 	bl	434a <stop>
	notify(mgr, res);
    19f8:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    19fa:	4601      	mov	r1, r0
	notify(mgr, res);
    19fc:	4620      	mov	r0, r4
}
    19fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    1a02:	4718      	bx	r3
    1a04:	2000024c 	.word	0x2000024c
    1a08:	b6db6db7 	.word	0xb6db6db7
    1a0c:	000049c4 	.word	0x000049c4

00001a10 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1a10:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1a12:	4c0c      	ldr	r4, [pc, #48]	; (1a44 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1a14:	4a0c      	ldr	r2, [pc, #48]	; (1a48 <onoff_start+0x38>)
    1a16:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    1a18:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1a1a:	9300      	str	r3, [sp, #0]
{
    1a1c:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1a1e:	460b      	mov	r3, r1
    1a20:	490a      	ldr	r1, [pc, #40]	; (1a4c <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    1a22:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1a24:	4361      	muls	r1, r4
{
    1a26:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1a28:	4809      	ldr	r0, [pc, #36]	; (1a50 <onoff_start+0x40>)
    1a2a:	f002 fcbb 	bl	43a4 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    1a2e:	1e01      	subs	r1, r0, #0
    1a30:	da05      	bge.n	1a3e <onoff_start+0x2e>
		notify(mgr, err);
    1a32:	4630      	mov	r0, r6
    1a34:	462b      	mov	r3, r5
	}
}
    1a36:	b002      	add	sp, #8
    1a38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    1a3c:	4718      	bx	r3
}
    1a3e:	b002      	add	sp, #8
    1a40:	bd70      	pop	{r4, r5, r6, pc}
    1a42:	bf00      	nop
    1a44:	2000024c 	.word	0x2000024c
    1a48:	00004411 	.word	0x00004411
    1a4c:	b6db6db7 	.word	0xb6db6db7
    1a50:	000049c4 	.word	0x000049c4

00001a54 <generic_hfclk_stop>:
{
    1a54:	b510      	push	{r4, lr}
	__asm__ volatile(
    1a56:	f04f 0320 	mov.w	r3, #32
    1a5a:	f3ef 8411 	mrs	r4, BASEPRI
    1a5e:	f383 8812 	msr	BASEPRI_MAX, r3
    1a62:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    1a66:	4a07      	ldr	r2, [pc, #28]	; (1a84 <generic_hfclk_stop+0x30>)
    1a68:	6813      	ldr	r3, [r2, #0]
    1a6a:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    1a6e:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    1a70:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    1a72:	d402      	bmi.n	1a7a <generic_hfclk_stop+0x26>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    1a74:	2001      	movs	r0, #1
    1a76:	f002 fe64 	bl	4742 <nrfx_clock_stop>
	__asm__ volatile(
    1a7a:	f384 8811 	msr	BASEPRI, r4
    1a7e:	f3bf 8f6f 	isb	sy
}
    1a82:	bd10      	pop	{r4, pc}
    1a84:	2000029c 	.word	0x2000029c

00001a88 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1a88:	2200      	movs	r2, #0
{
    1a8a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1a8c:	2101      	movs	r1, #1
{
    1a8e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1a90:	4610      	mov	r0, r2
    1a92:	f7ff fb9d 	bl	11d0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1a96:	480f      	ldr	r0, [pc, #60]	; (1ad4 <clk_init+0x4c>)
    1a98:	f001 f820 	bl	2adc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1a9c:	4b0e      	ldr	r3, [pc, #56]	; (1ad8 <clk_init+0x50>)
    1a9e:	4298      	cmp	r0, r3
    1aa0:	d115      	bne.n	1ace <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1aa2:	f002 fe41 	bl	4728 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    1aa6:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1aa8:	490c      	ldr	r1, [pc, #48]	; (1adc <clk_init+0x54>)
    1aaa:	4630      	mov	r0, r6
    1aac:	f002 faf4 	bl	4098 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    1ab0:	2800      	cmp	r0, #0
    1ab2:	db0b      	blt.n	1acc <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1ab4:	2501      	movs	r5, #1
    1ab6:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    1ab8:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1aba:	4908      	ldr	r1, [pc, #32]	; (1adc <clk_init+0x54>)
    1abc:	f104 001c 	add.w	r0, r4, #28
    1ac0:	f002 faea 	bl	4098 <onoff_manager_init>
		if (err < 0) {
    1ac4:	2800      	cmp	r0, #0
    1ac6:	db01      	blt.n	1acc <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1ac8:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    1aca:	2000      	movs	r0, #0
}
    1acc:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1ace:	f06f 0004 	mvn.w	r0, #4
    1ad2:	e7fb      	b.n	1acc <clk_init+0x44>
    1ad4:	00001b15 	.word	0x00001b15
    1ad8:	0bad0000 	.word	0x0bad0000
    1adc:	00004c14 	.word	0x00004c14

00001ae0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    1ae0:	b570      	push	{r4, r5, r6, lr}
    1ae2:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    1ae4:	230c      	movs	r3, #12
    1ae6:	4809      	ldr	r0, [pc, #36]	; (1b0c <clkstarted_handle.constprop.0+0x2c>)
    1ae8:	434b      	muls	r3, r1
    1aea:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    1aec:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    1af0:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    1af2:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    1af4:	4418      	add	r0, r3
	sub_data->cb = NULL;
    1af6:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    1af8:	f002 fc14 	bl	4324 <set_on_state>
	if (callback) {
    1afc:	b12d      	cbz	r5, 1b0a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    1afe:	4632      	mov	r2, r6
    1b00:	462b      	mov	r3, r5
    1b02:	4803      	ldr	r0, [pc, #12]	; (1b10 <clkstarted_handle.constprop.0+0x30>)
}
    1b04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    1b08:	4718      	bx	r3
}
    1b0a:	bd70      	pop	{r4, r5, r6, pc}
    1b0c:	2000024c 	.word	0x2000024c
    1b10:	000049c4 	.word	0x000049c4

00001b14 <clock_event_handler>:
	switch (event) {
    1b14:	b110      	cbz	r0, 1b1c <clock_event_handler+0x8>
    1b16:	2801      	cmp	r0, #1
    1b18:	d004      	beq.n	1b24 <clock_event_handler+0x10>
    1b1a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1b1c:	4b03      	ldr	r3, [pc, #12]	; (1b2c <clock_event_handler+0x18>)
    1b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1b20:	075b      	lsls	r3, r3, #29
    1b22:	d101      	bne.n	1b28 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1b24:	f7ff bfdc 	b.w	1ae0 <clkstarted_handle.constprop.0>
}
    1b28:	4770      	bx	lr
    1b2a:	bf00      	nop
    1b2c:	2000024c 	.word	0x2000024c

00001b30 <generic_hfclk_start>:
{
    1b30:	b508      	push	{r3, lr}
	__asm__ volatile(
    1b32:	f04f 0320 	mov.w	r3, #32
    1b36:	f3ef 8111 	mrs	r1, BASEPRI
    1b3a:	f383 8812 	msr	BASEPRI_MAX, r3
    1b3e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1b42:	4a12      	ldr	r2, [pc, #72]	; (1b8c <generic_hfclk_start+0x5c>)
    1b44:	6813      	ldr	r3, [r2, #0]
    1b46:	f043 0002 	orr.w	r0, r3, #2
    1b4a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1b4c:	07da      	lsls	r2, r3, #31
    1b4e:	d408      	bmi.n	1b62 <generic_hfclk_start+0x32>
	__asm__ volatile(
    1b50:	f381 8811 	msr	BASEPRI, r1
    1b54:	f3bf 8f6f 	isb	sy
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    1b58:	2001      	movs	r0, #1
}
    1b5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    1b5e:	f000 bfcd 	b.w	2afc <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1b62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1b66:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1b6a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1b6e:	07d3      	lsls	r3, r2, #31
    1b70:	d5ee      	bpl.n	1b50 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    1b72:	4807      	ldr	r0, [pc, #28]	; (1b90 <generic_hfclk_start+0x60>)
    1b74:	f002 fbd6 	bl	4324 <set_on_state>
    1b78:	f381 8811 	msr	BASEPRI, r1
    1b7c:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    1b80:	2000      	movs	r0, #0
}
    1b82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    1b86:	f7ff bfab 	b.w	1ae0 <clkstarted_handle.constprop.0>
    1b8a:	bf00      	nop
    1b8c:	2000029c 	.word	0x2000029c
    1b90:	2000028c 	.word	0x2000028c

00001b94 <api_blocking_start>:
{
    1b94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1b96:	2200      	movs	r2, #0
    1b98:	2301      	movs	r3, #1
    1b9a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1b9e:	4a09      	ldr	r2, [pc, #36]	; (1bc4 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1ba0:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1ba4:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1ba6:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1baa:	f002 fc2a 	bl	4402 <api_start>
	if (err < 0) {
    1bae:	2800      	cmp	r0, #0
    1bb0:	db05      	blt.n	1bbe <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1bb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1bb6:	2300      	movs	r3, #0
    1bb8:	4668      	mov	r0, sp
    1bba:	f001 fd4d 	bl	3658 <z_impl_k_sem_take>
}
    1bbe:	b005      	add	sp, #20
    1bc0:	f85d fb04 	ldr.w	pc, [sp], #4
    1bc4:	00004429 	.word	0x00004429

00001bc8 <lfclk_start>:
{
    1bc8:	b510      	push	{r4, lr}
	if (!once) {
    1bca:	4c07      	ldr	r4, [pc, #28]	; (1be8 <lfclk_start+0x20>)
    1bcc:	7823      	ldrb	r3, [r4, #0]
    1bce:	b92b      	cbnz	r3, 1bdc <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
    1bd0:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    1bd4:	f002 fed0 	bl	4978 <z_impl_k_busy_wait>
		once = true;
    1bd8:	2301      	movs	r3, #1
    1bda:	7023      	strb	r3, [r4, #0]
}
    1bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    1be0:	2000      	movs	r0, #0
    1be2:	f000 bf8b 	b.w	2afc <nrfx_clock_start>
    1be6:	bf00      	nop
    1be8:	2000039d 	.word	0x2000039d

00001bec <z_nrf_clock_control_lf_on>:
{
    1bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1bf0:	4938      	ldr	r1, [pc, #224]	; (1cd4 <z_nrf_clock_control_lf_on+0xe8>)
    1bf2:	f3bf 8f5b 	dmb	ish
    1bf6:	4607      	mov	r7, r0
    1bf8:	2201      	movs	r2, #1
    1bfa:	e851 3f00 	ldrex	r3, [r1]
    1bfe:	e841 2000 	strex	r0, r2, [r1]
    1c02:	2800      	cmp	r0, #0
    1c04:	d1f9      	bne.n	1bfa <z_nrf_clock_control_lf_on+0xe>
    1c06:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    1c0a:	b933      	cbnz	r3, 1c1a <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1c0c:	4932      	ldr	r1, [pc, #200]	; (1cd8 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    1c0e:	4833      	ldr	r0, [pc, #204]	; (1cdc <z_nrf_clock_control_lf_on+0xf0>)
    1c10:	604b      	str	r3, [r1, #4]
    1c12:	60cb      	str	r3, [r1, #12]
    1c14:	608a      	str	r2, [r1, #8]
    1c16:	f002 fa52 	bl	40be <onoff_request>
	switch (start_mode) {
    1c1a:	1e7b      	subs	r3, r7, #1
    1c1c:	2b01      	cmp	r3, #1
    1c1e:	d82b      	bhi.n	1c78 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1c20:	2f01      	cmp	r7, #1
    1c22:	d107      	bne.n	1c34 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1c24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1c28:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    1c2c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1c30:	2b01      	cmp	r3, #1
    1c32:	d021      	beq.n	1c78 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1c34:	f002 fdc7 	bl	47c6 <k_is_in_isr>
    1c38:	4605      	mov	r5, r0
    1c3a:	b9f8      	cbnz	r0, 1c7c <z_nrf_clock_control_lf_on+0x90>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    1c3c:	4b28      	ldr	r3, [pc, #160]	; (1ce0 <z_nrf_clock_control_lf_on+0xf4>)
    1c3e:	781b      	ldrb	r3, [r3, #0]
    1c40:	b1e3      	cbz	r3, 1c7c <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    1c42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1c46:	2202      	movs	r2, #2
    1c48:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    1c4c:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c4e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1ce4 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1c52:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    1c56:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1c5a:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    1c5e:	03d2      	lsls	r2, r2, #15
    1c60:	d516      	bpl.n	1c90 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    1c62:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1c66:	2b01      	cmp	r3, #1
    1c68:	d001      	beq.n	1c6e <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1c6a:	2f01      	cmp	r7, #1
    1c6c:	d110      	bne.n	1c90 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    1c6e:	b35d      	cbz	r5, 1cc8 <z_nrf_clock_control_lf_on+0xdc>
    1c70:	f386 8811 	msr	BASEPRI, r6
    1c74:	f3bf 8f6f 	isb	sy
}
    1c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    1c7c:	f04f 0320 	mov.w	r3, #32
    1c80:	f3ef 8611 	mrs	r6, BASEPRI
    1c84:	f383 8812 	msr	BASEPRI_MAX, r3
    1c88:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1c8c:	2501      	movs	r5, #1
    1c8e:	e7de      	b.n	1c4e <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    1c90:	b1ad      	cbz	r5, 1cbe <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1c92:	4630      	mov	r0, r6
    1c94:	f7ff fa74 	bl	1180 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1c98:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1c9c:	2b00      	cmp	r3, #0
    1c9e:	d1da      	bne.n	1c56 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1ca0:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    1ca4:	2a00      	cmp	r2, #0
    1ca6:	d0d6      	beq.n	1c56 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1ca8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1cac:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    1cb0:	2301      	movs	r3, #1
    1cb2:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    1cb6:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1cba:	60a3      	str	r3, [r4, #8]
}
    1cbc:	e7cb      	b.n	1c56 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    1cbe:	2100      	movs	r1, #0
    1cc0:	2021      	movs	r0, #33	; 0x21
    1cc2:	f001 ff6d 	bl	3ba0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1cc6:	e7e7      	b.n	1c98 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    1cc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1ccc:	2202      	movs	r2, #2
    1cce:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1cd2:	e7d1      	b.n	1c78 <z_nrf_clock_control_lf_on+0x8c>
    1cd4:	20000248 	.word	0x20000248
    1cd8:	20000238 	.word	0x20000238
    1cdc:	20000268 	.word	0x20000268
    1ce0:	200007b0 	.word	0x200007b0
    1ce4:	e000e100 	.word	0xe000e100

00001ce8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    1ce8:	b508      	push	{r3, lr}
    1cea:	4807      	ldr	r0, [pc, #28]	; (1d08 <uart_console_init+0x20>)
    1cec:	f002 fd41 	bl	4772 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    1cf0:	b138      	cbz	r0, 1d02 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    1cf2:	4806      	ldr	r0, [pc, #24]	; (1d0c <uart_console_init+0x24>)
    1cf4:	f7ff fe16 	bl	1924 <__stdout_hook_install>
	__printk_hook_install(console_out);
    1cf8:	4804      	ldr	r0, [pc, #16]	; (1d0c <uart_console_init+0x24>)
    1cfa:	f7fe fc1f 	bl	53c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    1cfe:	2000      	movs	r0, #0
}
    1d00:	bd08      	pop	{r3, pc}
		return -ENODEV;
    1d02:	f06f 0012 	mvn.w	r0, #18
    1d06:	e7fb      	b.n	1d00 <uart_console_init+0x18>
    1d08:	000049f4 	.word	0x000049f4
    1d0c:	00001d11 	.word	0x00001d11

00001d10 <console_out>:
	if ('\n' == c) {
    1d10:	280a      	cmp	r0, #10
{
    1d12:	b538      	push	{r3, r4, r5, lr}
    1d14:	4d07      	ldr	r5, [pc, #28]	; (1d34 <console_out+0x24>)
    1d16:	4604      	mov	r4, r0
	if ('\n' == c) {
    1d18:	d104      	bne.n	1d24 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1d1a:	68ab      	ldr	r3, [r5, #8]
    1d1c:	210d      	movs	r1, #13
    1d1e:	685b      	ldr	r3, [r3, #4]
    1d20:	4628      	mov	r0, r5
    1d22:	4798      	blx	r3
    1d24:	68ab      	ldr	r3, [r5, #8]
    1d26:	4803      	ldr	r0, [pc, #12]	; (1d34 <console_out+0x24>)
    1d28:	685b      	ldr	r3, [r3, #4]
    1d2a:	b2e1      	uxtb	r1, r4
    1d2c:	4798      	blx	r3
}
    1d2e:	4620      	mov	r0, r4
    1d30:	bd38      	pop	{r3, r4, r5, pc}
    1d32:	bf00      	nop
    1d34:	000049f4 	.word	0x000049f4

00001d38 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    1d38:	b530      	push	{r4, r5, lr}
	return port->config;
    1d3a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1d3c:	7b05      	ldrb	r5, [r0, #12]
    1d3e:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    1d42:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    1d46:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1d48:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    1d4c:	d105      	bne.n	1d5a <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    1d4e:	4620      	mov	r0, r4
    1d50:	f001 f998 	bl	3084 <nrfx_gpiote_trigger_disable>

		return 0;
    1d54:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    1d56:	b005      	add	sp, #20
    1d58:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    1d5a:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    1d5c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    1d60:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    1d64:	d114      	bne.n	1d90 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    1d66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    1d6a:	bf0c      	ite	eq
    1d6c:	2304      	moveq	r3, #4
    1d6e:	2305      	movne	r3, #5
    1d70:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1d74:	2300      	movs	r3, #0
    1d76:	4619      	mov	r1, r3
    1d78:	aa02      	add	r2, sp, #8
    1d7a:	4620      	mov	r0, r4
    1d7c:	f000 ffb8 	bl	2cf0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    1d80:	4b1d      	ldr	r3, [pc, #116]	; (1df8 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    1d82:	4298      	cmp	r0, r3
    1d84:	d135      	bne.n	1df2 <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    1d86:	2101      	movs	r1, #1
    1d88:	4620      	mov	r0, r4
    1d8a:	f001 f937 	bl	2ffc <nrfx_gpiote_trigger_enable>
	return 0;
    1d8e:	e7e1      	b.n	1d54 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    1d90:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    1d94:	d022      	beq.n	1ddc <gpio_nrfx_pin_interrupt_configure+0xa4>
    1d96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    1d9a:	bf14      	ite	ne
    1d9c:	2301      	movne	r3, #1
    1d9e:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    1da0:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    1da4:	6883      	ldr	r3, [r0, #8]
    1da6:	40cb      	lsrs	r3, r1
    1da8:	07d9      	lsls	r1, r3, #31
    1daa:	d4e3      	bmi.n	1d74 <gpio_nrfx_pin_interrupt_configure+0x3c>
    1dac:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    1db0:	d1e0      	bne.n	1d74 <gpio_nrfx_pin_interrupt_configure+0x3c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    1db2:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1db6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    1dba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    1dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    1dc2:	07db      	lsls	r3, r3, #31
    1dc4:	d4d6      	bmi.n	1d74 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1dc6:	f10d 0507 	add.w	r5, sp, #7
    1dca:	4629      	mov	r1, r5
    1dcc:	4620      	mov	r0, r4
    1dce:	f001 f8c1 	bl	2f54 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    1dd2:	4b0a      	ldr	r3, [pc, #40]	; (1dfc <gpio_nrfx_pin_interrupt_configure+0xc4>)
    1dd4:	4298      	cmp	r0, r3
    1dd6:	d003      	beq.n	1de0 <gpio_nrfx_pin_interrupt_configure+0xa8>
		trigger_config.p_in_channel = &ch;
    1dd8:	9503      	str	r5, [sp, #12]
    1dda:	e7cb      	b.n	1d74 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    1ddc:	2303      	movs	r3, #3
    1dde:	e7df      	b.n	1da0 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    1de0:	4628      	mov	r0, r5
    1de2:	f001 f905 	bl	2ff0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    1de6:	4b04      	ldr	r3, [pc, #16]	; (1df8 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    1de8:	4298      	cmp	r0, r3
    1dea:	d0f5      	beq.n	1dd8 <gpio_nrfx_pin_interrupt_configure+0xa0>
				return -ENOMEM;
    1dec:	f06f 000b 	mvn.w	r0, #11
    1df0:	e7b1      	b.n	1d56 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    1df2:	f06f 0015 	mvn.w	r0, #21
    1df6:	e7ae      	b.n	1d56 <gpio_nrfx_pin_interrupt_configure+0x1e>
    1df8:	0bad0000 	.word	0x0bad0000
    1dfc:	0bad0004 	.word	0x0bad0004

00001e00 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    1e00:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    1e02:	f001 f8e5 	bl	2fd0 <nrfx_gpiote_is_init>
    1e06:	4604      	mov	r4, r0
    1e08:	b968      	cbnz	r0, 1e26 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    1e0a:	f001 f8b9 	bl	2f80 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    1e0e:	4b08      	ldr	r3, [pc, #32]	; (1e30 <gpio_nrfx_init+0x30>)
    1e10:	4298      	cmp	r0, r3
    1e12:	d10a      	bne.n	1e2a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    1e14:	4807      	ldr	r0, [pc, #28]	; (1e34 <gpio_nrfx_init+0x34>)
    1e16:	4621      	mov	r1, r4
    1e18:	f001 f896 	bl	2f48 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    1e1c:	4622      	mov	r2, r4
    1e1e:	2105      	movs	r1, #5
    1e20:	2006      	movs	r0, #6
    1e22:	f7ff f9d5 	bl	11d0 <z_arm_irq_priority_set>
		return 0;
    1e26:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    1e28:	bd10      	pop	{r4, pc}
		return -EIO;
    1e2a:	f06f 0004 	mvn.w	r0, #4
    1e2e:	e7fb      	b.n	1e28 <gpio_nrfx_init+0x28>
    1e30:	0bad0000 	.word	0x0bad0000
    1e34:	00001e39 	.word	0x00001e39

00001e38 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1e38:	0943      	lsrs	r3, r0, #5
{
    1e3a:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1e3c:	d107      	bne.n	1e4e <nrfx_gpio_handler+0x16>
	return list->head;
    1e3e:	4b0b      	ldr	r3, [pc, #44]	; (1e6c <nrfx_gpio_handler+0x34>)
    1e40:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1e42:	b121      	cbz	r1, 1e4e <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
    1e44:	2501      	movs	r5, #1
	return node->next;
    1e46:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    1e48:	4e09      	ldr	r6, [pc, #36]	; (1e70 <nrfx_gpio_handler+0x38>)
    1e4a:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1e4c:	b901      	cbnz	r1, 1e50 <nrfx_gpio_handler+0x18>
}
    1e4e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
    1e50:	688a      	ldr	r2, [r1, #8]
    1e52:	402a      	ands	r2, r5
    1e54:	d002      	beq.n	1e5c <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
    1e56:	684b      	ldr	r3, [r1, #4]
    1e58:	4630      	mov	r0, r6
    1e5a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1e5c:	b11c      	cbz	r4, 1e66 <nrfx_gpio_handler+0x2e>
    1e5e:	6823      	ldr	r3, [r4, #0]
    1e60:	4621      	mov	r1, r4
    1e62:	461c      	mov	r4, r3
    1e64:	e7f2      	b.n	1e4c <nrfx_gpio_handler+0x14>
    1e66:	4623      	mov	r3, r4
    1e68:	e7fa      	b.n	1e60 <nrfx_gpio_handler+0x28>
    1e6a:	bf00      	nop
    1e6c:	200002a0 	.word	0x200002a0
    1e70:	000049dc 	.word	0x000049dc

00001e74 <gpio_nrfx_pin_configure>:
{
    1e74:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    1e78:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1e7a:	7b3b      	ldrb	r3, [r7, #12]
    1e7c:	f001 051f 	and.w	r5, r1, #31
    1e80:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    1e84:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1e86:	4628      	mov	r0, r5
    1e88:	f10d 0103 	add.w	r1, sp, #3
{
    1e8c:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1e8e:	f001 f861 	bl	2f54 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    1e92:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1e96:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    1e98:	d10b      	bne.n	1eb2 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    1e9a:	4628      	mov	r0, r5
    1e9c:	f001 f91a 	bl	30d4 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    1ea0:	4b3d      	ldr	r3, [pc, #244]	; (1f98 <gpio_nrfx_pin_configure+0x124>)
    1ea2:	4598      	cmp	r8, r3
    1ea4:	d103      	bne.n	1eae <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    1ea6:	f89d 0003 	ldrb.w	r0, [sp, #3]
    1eaa:	f001 f89b 	bl	2fe4 <nrfx_gpiote_channel_free>
		return 0;
    1eae:	2000      	movs	r0, #0
    1eb0:	e00c      	b.n	1ecc <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    1eb2:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1eb4:	4619      	mov	r1, r3
    1eb6:	aa02      	add	r2, sp, #8
    1eb8:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    1eba:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1ebe:	f000 ff17 	bl	2cf0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    1ec2:	4b35      	ldr	r3, [pc, #212]	; (1f98 <gpio_nrfx_pin_configure+0x124>)
    1ec4:	4298      	cmp	r0, r3
    1ec6:	d004      	beq.n	1ed2 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    1ec8:	f06f 0015 	mvn.w	r0, #21
}
    1ecc:	b004      	add	sp, #16
    1ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    1ed2:	4580      	cmp	r8, r0
    1ed4:	d103      	bne.n	1ede <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    1ed6:	f89d 0003 	ldrb.w	r0, [sp, #3]
    1eda:	f001 f883 	bl	2fe4 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    1ede:	03a3      	lsls	r3, r4, #14
    1ee0:	d54b      	bpl.n	1f7a <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    1ee2:	f240 3306 	movw	r3, #774	; 0x306
    1ee6:	4023      	ands	r3, r4
    1ee8:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    1eec:	d019      	beq.n	1f22 <gpio_nrfx_pin_configure+0xae>
    1eee:	d80c      	bhi.n	1f0a <gpio_nrfx_pin_configure+0x96>
    1ef0:	2b06      	cmp	r3, #6
    1ef2:	d017      	beq.n	1f24 <gpio_nrfx_pin_configure+0xb0>
    1ef4:	d804      	bhi.n	1f00 <gpio_nrfx_pin_configure+0x8c>
    1ef6:	b1ab      	cbz	r3, 1f24 <gpio_nrfx_pin_configure+0xb0>
    1ef8:	2b02      	cmp	r3, #2
    1efa:	d1e5      	bne.n	1ec8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    1efc:	2304      	movs	r3, #4
    1efe:	e011      	b.n	1f24 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    1f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    1f04:	d1e0      	bne.n	1ec8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    1f06:	2301      	movs	r3, #1
    1f08:	e00c      	b.n	1f24 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    1f0a:	f240 2202 	movw	r2, #514	; 0x202
    1f0e:	4293      	cmp	r3, r2
    1f10:	d027      	beq.n	1f62 <gpio_nrfx_pin_configure+0xee>
    1f12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    1f16:	d026      	beq.n	1f66 <gpio_nrfx_pin_configure+0xf2>
    1f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    1f1c:	d1d4      	bne.n	1ec8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    1f1e:	2302      	movs	r3, #2
    1f20:	e000      	b.n	1f24 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    1f22:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    1f24:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    1f28:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    1f2c:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    1f30:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    1f32:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    1f36:	bf54      	ite	pl
    1f38:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    1f3c:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    1f3e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    1f40:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    1f44:	d511      	bpl.n	1f6a <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    1f46:	687a      	ldr	r2, [r7, #4]
    1f48:	2301      	movs	r3, #1
    1f4a:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    1f4c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    1f50:	2200      	movs	r2, #0
    1f52:	a901      	add	r1, sp, #4
    1f54:	4628      	mov	r0, r5
    1f56:	f000 ff79 	bl	2e4c <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    1f5a:	4b0f      	ldr	r3, [pc, #60]	; (1f98 <gpio_nrfx_pin_configure+0x124>)
    1f5c:	4298      	cmp	r0, r3
    1f5e:	d0a6      	beq.n	1eae <gpio_nrfx_pin_configure+0x3a>
    1f60:	e7b2      	b.n	1ec8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    1f62:	2305      	movs	r3, #5
    1f64:	e7de      	b.n	1f24 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    1f66:	2303      	movs	r3, #3
    1f68:	e7dc      	b.n	1f24 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    1f6a:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    1f6c:	bf41      	itttt	mi
    1f6e:	2301      	movmi	r3, #1
    1f70:	687a      	ldrmi	r2, [r7, #4]
    1f72:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    1f74:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    1f78:	e7ea      	b.n	1f50 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    1f7a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    1f7c:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    1f80:	bf54      	ite	pl
    1f82:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    1f86:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    1f88:	461a      	mov	r2, r3
    1f8a:	a901      	add	r1, sp, #4
    1f8c:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    1f8e:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    1f92:	f000 fead 	bl	2cf0 <nrfx_gpiote_input_configure>
    1f96:	e7e0      	b.n	1f5a <gpio_nrfx_pin_configure+0xe6>
    1f98:	0bad0000 	.word	0x0bad0000

00001f9c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    1f9c:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    1f9e:	794b      	ldrb	r3, [r1, #5]
    1fa0:	2b01      	cmp	r3, #1
    1fa2:	d120      	bne.n	1fe6 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    1fa4:	798b      	ldrb	r3, [r1, #6]
    1fa6:	2b03      	cmp	r3, #3
    1fa8:	d11d      	bne.n	1fe6 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    1faa:	79cd      	ldrb	r5, [r1, #7]
    1fac:	b10d      	cbz	r5, 1fb2 <uarte_nrfx_configure+0x16>
    1fae:	2d01      	cmp	r5, #1
    1fb0:	d119      	bne.n	1fe6 <uarte_nrfx_configure+0x4a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    1fb2:	790a      	ldrb	r2, [r1, #4]
    1fb4:	b112      	cbz	r2, 1fbc <uarte_nrfx_configure+0x20>
    1fb6:	2a02      	cmp	r2, #2
    1fb8:	d115      	bne.n	1fe6 <uarte_nrfx_configure+0x4a>
    1fba:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    1fbc:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    1fbe:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
    1fc0:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    1fc4:	6826      	ldr	r6, [r4, #0]
	switch (baudrate) {
    1fc6:	d064      	beq.n	2092 <uarte_nrfx_configure+0xf6>
    1fc8:	d82b      	bhi.n	2022 <uarte_nrfx_configure+0x86>
    1fca:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    1fce:	d063      	beq.n	2098 <uarte_nrfx_configure+0xfc>
    1fd0:	d814      	bhi.n	1ffc <uarte_nrfx_configure+0x60>
    1fd2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    1fd6:	d061      	beq.n	209c <uarte_nrfx_configure+0x100>
    1fd8:	d808      	bhi.n	1fec <uarte_nrfx_configure+0x50>
    1fda:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    1fde:	d060      	beq.n	20a2 <uarte_nrfx_configure+0x106>
    1fe0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    1fe4:	d060      	beq.n	20a8 <uarte_nrfx_configure+0x10c>
    1fe6:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1fea:	e051      	b.n	2090 <uarte_nrfx_configure+0xf4>
    1fec:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    1ff0:	d05d      	beq.n	20ae <uarte_nrfx_configure+0x112>
    1ff2:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    1ff6:	d1f6      	bne.n	1fe6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    1ff8:	4b37      	ldr	r3, [pc, #220]	; (20d8 <uarte_nrfx_configure+0x13c>)
    1ffa:	e03c      	b.n	2076 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    1ffc:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2000:	d058      	beq.n	20b4 <uarte_nrfx_configure+0x118>
    2002:	d807      	bhi.n	2014 <uarte_nrfx_configure+0x78>
    2004:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2008:	d056      	beq.n	20b8 <uarte_nrfx_configure+0x11c>
    200a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    200e:	d1ea      	bne.n	1fe6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2010:	4b32      	ldr	r3, [pc, #200]	; (20dc <uarte_nrfx_configure+0x140>)
    2012:	e030      	b.n	2076 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    2014:	f647 2412 	movw	r4, #31250	; 0x7a12
    2018:	42a3      	cmp	r3, r4
    201a:	d1e4      	bne.n	1fe6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    201c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2020:	e029      	b.n	2076 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    2022:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2026:	d049      	beq.n	20bc <uarte_nrfx_configure+0x120>
    2028:	d813      	bhi.n	2052 <uarte_nrfx_configure+0xb6>
    202a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    202e:	d048      	beq.n	20c2 <uarte_nrfx_configure+0x126>
    2030:	d809      	bhi.n	2046 <uarte_nrfx_configure+0xaa>
    2032:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    2036:	42a3      	cmp	r3, r4
    2038:	d045      	beq.n	20c6 <uarte_nrfx_configure+0x12a>
    203a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    203e:	d1d2      	bne.n	1fe6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2040:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2044:	e017      	b.n	2076 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    2046:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    204a:	d1cc      	bne.n	1fe6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    204c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2050:	e011      	b.n	2076 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    2052:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2056:	d039      	beq.n	20cc <uarte_nrfx_configure+0x130>
    2058:	d808      	bhi.n	206c <uarte_nrfx_configure+0xd0>
    205a:	4c21      	ldr	r4, [pc, #132]	; (20e0 <uarte_nrfx_configure+0x144>)
    205c:	42a3      	cmp	r3, r4
    205e:	d038      	beq.n	20d2 <uarte_nrfx_configure+0x136>
    2060:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2064:	d1bf      	bne.n	1fe6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2066:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    206a:	e004      	b.n	2076 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    206c:	4c1d      	ldr	r4, [pc, #116]	; (20e4 <uarte_nrfx_configure+0x148>)
    206e:	42a3      	cmp	r3, r4
    2070:	d1b9      	bne.n	1fe6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2072:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    2076:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2078:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
	return config->uarte_regs;
    207c:	6843      	ldr	r3, [r0, #4]
    207e:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
    2080:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2082:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    2086:	c903      	ldmia	r1, {r0, r1}
    2088:	1d23      	adds	r3, r4, #4
    208a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    208e:	2000      	movs	r0, #0
}
    2090:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2092:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2096:	e7ee      	b.n	2076 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2098:	4b13      	ldr	r3, [pc, #76]	; (20e8 <uarte_nrfx_configure+0x14c>)
    209a:	e7ec      	b.n	2076 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    209c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    20a0:	e7e9      	b.n	2076 <uarte_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
    20a2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    20a6:	e7e6      	b.n	2076 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    20a8:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    20ac:	e7e3      	b.n	2076 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    20ae:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    20b2:	e7e0      	b.n	2076 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    20b4:	4b0d      	ldr	r3, [pc, #52]	; (20ec <uarte_nrfx_configure+0x150>)
    20b6:	e7de      	b.n	2076 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    20b8:	4b0d      	ldr	r3, [pc, #52]	; (20f0 <uarte_nrfx_configure+0x154>)
    20ba:	e7dc      	b.n	2076 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    20bc:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    20c0:	e7d9      	b.n	2076 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    20c2:	4b0c      	ldr	r3, [pc, #48]	; (20f4 <uarte_nrfx_configure+0x158>)
    20c4:	e7d7      	b.n	2076 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    20c6:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    20ca:	e7d4      	b.n	2076 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    20cc:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    20d0:	e7d1      	b.n	2076 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    20d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    20d6:	e7ce      	b.n	2076 <uarte_nrfx_configure+0xda>
    20d8:	0013b000 	.word	0x0013b000
    20dc:	004ea000 	.word	0x004ea000
    20e0:	0003d090 	.word	0x0003d090
    20e4:	000f4240 	.word	0x000f4240
    20e8:	00275000 	.word	0x00275000
    20ec:	0075c000 	.word	0x0075c000
    20f0:	003af000 	.word	0x003af000
    20f4:	013a9000 	.word	0x013a9000

000020f8 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    20f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    20fc:	4680      	mov	r8, r0
    20fe:	2200      	movs	r2, #0
    2100:	2101      	movs	r1, #1
    2102:	2002      	movs	r0, #2
    2104:	f7ff f864 	bl	11d0 <z_arm_irq_priority_set>
    2108:	2002      	movs	r0, #2
    210a:	f7ff f845 	bl	1198 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
    210e:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
    2112:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
    2116:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    2118:	2100      	movs	r1, #0
    211a:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
    211e:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    2122:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    2126:	aa01      	add	r2, sp, #4
    2128:	4648      	mov	r0, r9
    212a:	f002 f9d5 	bl	44d8 <pinctrl_lookup_state>
	if (ret < 0) {
    212e:	1e05      	subs	r5, r0, #0
    2130:	db54      	blt.n	21dc <uarte_0_init+0xe4>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    2132:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    2134:	f8d9 2000 	ldr.w	r2, [r9]
    2138:	7919      	ldrb	r1, [r3, #4]
    213a:	6818      	ldr	r0, [r3, #0]
    213c:	f002 f9df 	bl	44fe <pinctrl_configure_pins>
	if (err < 0) {
    2140:	1e05      	subs	r5, r0, #0
    2142:	db4b      	blt.n	21dc <uarte_0_init+0xe4>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    2144:	1d31      	adds	r1, r6, #4
    2146:	4640      	mov	r0, r8
    2148:	f7ff ff28 	bl	1f9c <uarte_nrfx_configure>
	if (err) {
    214c:	4605      	mov	r5, r0
    214e:	2800      	cmp	r0, #0
    2150:	d144      	bne.n	21dc <uarte_0_init+0xe4>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    2152:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    2154:	0799      	lsls	r1, r3, #30
    2156:	d51a      	bpl.n	218e <uarte_0_init+0x96>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    2158:	f106 0018 	add.w	r0, r6, #24
    215c:	f001 f886 	bl	326c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    2160:	4b22      	ldr	r3, [pc, #136]	; (21ec <uarte_0_init+0xf4>)
    2162:	4298      	cmp	r0, r3
    2164:	d13e      	bne.n	21e4 <uarte_0_init+0xec>
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    2166:	7e33      	ldrb	r3, [r6, #24]
    2168:	00db      	lsls	r3, r3, #3
    216a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    216e:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    2172:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2176:	f504 7190 	add.w	r1, r4, #288	; 0x120
    217a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    217e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    2182:	7e32      	ldrb	r2, [r6, #24]
    2184:	2301      	movs	r3, #1
    2186:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
    2188:	4a19      	ldr	r2, [pc, #100]	; (21f0 <uarte_0_init+0xf8>)
    218a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    218e:	2308      	movs	r3, #8
    2190:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    2194:	7a3b      	ldrb	r3, [r7, #8]
    2196:	b953      	cbnz	r3, 21ae <uarte_0_init+0xb6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2198:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    219c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    21a0:	6973      	ldr	r3, [r6, #20]
    21a2:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    21a6:	2301      	movs	r3, #1
    21a8:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    21ac:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    21ae:	687b      	ldr	r3, [r7, #4]
    21b0:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    21b2:	bf5c      	itt	pl
    21b4:	f44f 7380 	movpl.w	r3, #256	; 0x100
    21b8:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    21bc:	687b      	ldr	r3, [r7, #4]
    21be:	06db      	lsls	r3, r3, #27
    21c0:	bf44      	itt	mi
    21c2:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    21c6:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    21ca:	6933      	ldr	r3, [r6, #16]
    21cc:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    21d0:	2300      	movs	r3, #0
    21d2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    21d6:	2301      	movs	r3, #1
    21d8:	60a3      	str	r3, [r4, #8]
    21da:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    21dc:	4628      	mov	r0, r5
    21de:	b003      	add	sp, #12
    21e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    21e4:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
    21e8:	e7f8      	b.n	21dc <uarte_0_init+0xe4>
    21ea:	bf00      	nop
    21ec:	0bad0000 	.word	0x0bad0000
    21f0:	4001f000 	.word	0x4001f000

000021f4 <uarte_nrfx_poll_out>:
{
    21f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21f6:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
    21f8:	6907      	ldr	r7, [r0, #16]
{
    21fa:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    21fc:	f002 fae3 	bl	47c6 <k_is_in_isr>
    2200:	b9b0      	cbnz	r0, 2230 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    2202:	4b2e      	ldr	r3, [pc, #184]	; (22bc <uarte_nrfx_poll_out+0xc8>)
    2204:	781b      	ldrb	r3, [r3, #0]
    2206:	b19b      	cbz	r3, 2230 <uarte_nrfx_poll_out+0x3c>
{
    2208:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    220a:	6860      	ldr	r0, [r4, #4]
    220c:	f002 fa21 	bl	4652 <is_tx_ready.isra.0>
    2210:	bb00      	cbnz	r0, 2254 <uarte_nrfx_poll_out+0x60>
    2212:	2001      	movs	r0, #1
    2214:	f002 fa86 	bl	4724 <nrfx_busy_wait>
    2218:	3e01      	subs	r6, #1
    221a:	d1f6      	bne.n	220a <uarte_nrfx_poll_out+0x16>
    221c:	2100      	movs	r1, #0
    221e:	2021      	movs	r0, #33	; 0x21
    2220:	f001 fcbe 	bl	3ba0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2224:	e7f0      	b.n	2208 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    2226:	f386 8811 	msr	BASEPRI, r6
    222a:	f3bf 8f6f 	isb	sy
}
    222e:	e7f5      	b.n	221c <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    2230:	f04f 0320 	mov.w	r3, #32
    2234:	f3ef 8611 	mrs	r6, BASEPRI
    2238:	f383 8812 	msr	BASEPRI_MAX, r3
    223c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2240:	6860      	ldr	r0, [r4, #4]
    2242:	4631      	mov	r1, r6
    2244:	f002 fa05 	bl	4652 <is_tx_ready.isra.0>
    2248:	b990      	cbnz	r0, 2270 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    224a:	f386 8811 	msr	BASEPRI, r6
    224e:	f3bf 8f6f 	isb	sy
}
    2252:	e7ed      	b.n	2230 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    2254:	f04f 0320 	mov.w	r3, #32
    2258:	f3ef 8611 	mrs	r6, BASEPRI
    225c:	f383 8812 	msr	BASEPRI_MAX, r3
    2260:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2264:	6860      	ldr	r0, [r4, #4]
    2266:	4631      	mov	r1, r6
    2268:	f002 f9f3 	bl	4652 <is_tx_ready.isra.0>
    226c:	2800      	cmp	r0, #0
    226e:	d0da      	beq.n	2226 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    2270:	693b      	ldr	r3, [r7, #16]
    2272:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
    2274:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2276:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    2278:	6813      	ldr	r3, [r2, #0]
    227a:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    227e:	2001      	movs	r0, #1
    2280:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2284:	2000      	movs	r0, #0
    2286:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    228a:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
    228e:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2292:	6852      	ldr	r2, [r2, #4]
    2294:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    2298:	06d2      	lsls	r2, r2, #27
    229a:	d508      	bpl.n	22ae <uarte_nrfx_poll_out+0xba>
	return config->uarte_regs;
    229c:	6862      	ldr	r2, [r4, #4]
    229e:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    22a0:	2008      	movs	r0, #8
    22a2:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    22a6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    22aa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    22ae:	2201      	movs	r2, #1
    22b0:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    22b2:	f381 8811 	msr	BASEPRI, r1
    22b6:	f3bf 8f6f 	isb	sy
}
    22ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22bc:	200007b0 	.word	0x200007b0

000022c0 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    22c0:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    22c2:	2301      	movs	r3, #1
    22c4:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    22c6:	4a0e      	ldr	r2, [pc, #56]	; (2300 <compare_int_lock+0x40>)
    22c8:	f3bf 8f5b 	dmb	ish
    22cc:	43dc      	mvns	r4, r3
    22ce:	e852 1f00 	ldrex	r1, [r2]
    22d2:	ea01 0504 	and.w	r5, r1, r4
    22d6:	e842 5600 	strex	r6, r5, [r2]
    22da:	2e00      	cmp	r6, #0
    22dc:	d1f7      	bne.n	22ce <compare_int_lock+0xe>
    22de:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    22e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    22e6:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    22e8:	4806      	ldr	r0, [pc, #24]	; (2304 <compare_int_lock+0x44>)
    22ea:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    22ee:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    22f2:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    22f6:	420b      	tst	r3, r1
}
    22f8:	bf14      	ite	ne
    22fa:	2001      	movne	r0, #1
    22fc:	2000      	moveq	r0, #0
    22fe:	bd70      	pop	{r4, r5, r6, pc}
    2300:	200002b0 	.word	0x200002b0
    2304:	40011000 	.word	0x40011000

00002308 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    2308:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    230a:	490e      	ldr	r1, [pc, #56]	; (2344 <sys_clock_timeout_handler+0x3c>)
    230c:	e9d1 3400 	ldrd	r3, r4, [r1]
    2310:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    2312:	18c3      	adds	r3, r0, r3
    2314:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
    2318:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
    231c:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    2320:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    2324:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    2328:	d209      	bcs.n	233e <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    232a:	4b07      	ldr	r3, [pc, #28]	; (2348 <sys_clock_timeout_handler+0x40>)
    232c:	681b      	ldr	r3, [r3, #0]
    232e:	0a1a      	lsrs	r2, r3, #8
    2330:	061b      	lsls	r3, r3, #24
    2332:	199c      	adds	r4, r3, r6
    2334:	4b05      	ldr	r3, [pc, #20]	; (234c <sys_clock_timeout_handler+0x44>)
    2336:	f142 0500 	adc.w	r5, r2, #0
    233a:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    233e:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    2340:	f001 bd84 	b.w	3e4c <sys_clock_announce>
    2344:	200000a8 	.word	0x200000a8
    2348:	200002b4 	.word	0x200002b4
    234c:	200000b0 	.word	0x200000b0

00002350 <compare_int_unlock>:
	if (key) {
    2350:	b311      	cbz	r1, 2398 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2352:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    2356:	2301      	movs	r3, #1
    2358:	4a10      	ldr	r2, [pc, #64]	; (239c <compare_int_unlock+0x4c>)
    235a:	4083      	lsls	r3, r0
    235c:	e852 cf00 	ldrex	ip, [r2]
    2360:	ea4c 0c03 	orr.w	ip, ip, r3
    2364:	e842 c100 	strex	r1, ip, [r2]
    2368:	2900      	cmp	r1, #0
    236a:	d1f7      	bne.n	235c <compare_int_unlock+0xc>
    236c:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    2370:	4a0b      	ldr	r2, [pc, #44]	; (23a0 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2372:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2376:	4083      	lsls	r3, r0
    2378:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    237c:	4b09      	ldr	r3, [pc, #36]	; (23a4 <compare_int_unlock+0x54>)
    237e:	f3bf 8f5b 	dmb	ish
    2382:	681b      	ldr	r3, [r3, #0]
    2384:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    2388:	40c3      	lsrs	r3, r0
    238a:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    238c:	bf42      	ittt	mi
    238e:	4b06      	ldrmi	r3, [pc, #24]	; (23a8 <compare_int_unlock+0x58>)
    2390:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    2394:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    2398:	4770      	bx	lr
    239a:	bf00      	nop
    239c:	200002b0 	.word	0x200002b0
    23a0:	40011000 	.word	0x40011000
    23a4:	200002ac 	.word	0x200002ac
    23a8:	e000e100 	.word	0xe000e100

000023ac <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    23ac:	4b0d      	ldr	r3, [pc, #52]	; (23e4 <z_nrf_rtc_timer_read+0x38>)
    23ae:	6818      	ldr	r0, [r3, #0]
    23b0:	0a01      	lsrs	r1, r0, #8
    23b2:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    23b4:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    23b8:	4b0b      	ldr	r3, [pc, #44]	; (23e8 <z_nrf_rtc_timer_read+0x3c>)
    23ba:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    23be:	1818      	adds	r0, r3, r0
    23c0:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    23c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    23c8:	d20a      	bcs.n	23e0 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    23ca:	4b08      	ldr	r3, [pc, #32]	; (23ec <z_nrf_rtc_timer_read+0x40>)
    23cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    23d0:	4290      	cmp	r0, r2
    23d2:	eb71 0303 	sbcs.w	r3, r1, r3
    23d6:	d203      	bcs.n	23e0 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    23d8:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    23dc:	f141 0100 	adc.w	r1, r1, #0
}
    23e0:	4770      	bx	lr
    23e2:	bf00      	nop
    23e4:	200002b4 	.word	0x200002b4
    23e8:	40011000 	.word	0x40011000
    23ec:	200000b0 	.word	0x200000b0

000023f0 <compare_set>:
{
    23f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23f4:	4616      	mov	r6, r2
    23f6:	461f      	mov	r7, r3
    23f8:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    23fa:	f7ff ff61 	bl	22c0 <compare_int_lock>
    23fe:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    2400:	f7ff ffd4 	bl	23ac <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    2404:	42b0      	cmp	r0, r6
    2406:	eb71 0307 	sbcs.w	r3, r1, r7
    240a:	d251      	bcs.n	24b0 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    240c:	4b3a      	ldr	r3, [pc, #232]	; (24f8 <compare_set+0x108>)
    240e:	1a30      	subs	r0, r6, r0
    2410:	eb67 0101 	sbc.w	r1, r7, r1
    2414:	4298      	cmp	r0, r3
    2416:	f171 0100 	sbcs.w	r1, r1, #0
    241a:	d26a      	bcs.n	24f2 <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
    241c:	4b37      	ldr	r3, [pc, #220]	; (24fc <compare_set+0x10c>)
    241e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2422:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    2426:	429f      	cmp	r7, r3
    2428:	bf08      	it	eq
    242a:	4296      	cmpeq	r6, r2
    242c:	d04e      	beq.n	24cc <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    242e:	4934      	ldr	r1, [pc, #208]	; (2500 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2430:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    2434:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2438:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    243c:	00ad      	lsls	r5, r5, #2
    243e:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    2442:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2444:	b2ad      	uxth	r5, r5
    2446:	f002 f94e 	bl	46e6 <event_clear>
	return absolute_time & COUNTER_MAX;
    244a:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    244e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    2452:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    2456:	4a2b      	ldr	r2, [pc, #172]	; (2504 <compare_set+0x114>)
    2458:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    245a:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
    245e:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    2460:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
    2464:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2466:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
    246a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
    246e:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    2472:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    2476:	f06f 0002 	mvn.w	r0, #2
    247a:	eba0 0008 	sub.w	r0, r0, r8
    247e:	4460      	add	r0, ip
    2480:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    2484:	4290      	cmp	r0, r2
    2486:	d921      	bls.n	24cc <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2488:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    248a:	b160      	cbz	r0, 24a6 <compare_set+0xb6>
     return p_reg->COUNTER;
    248c:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    2490:	eba8 000b 	sub.w	r0, r8, fp
    2494:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    2498:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    249c:	d916      	bls.n	24cc <compare_set+0xdc>
					event_clear(chan);
    249e:	4620      	mov	r0, r4
    24a0:	f002 f921 	bl	46e6 <event_clear>
    24a4:	4a17      	ldr	r2, [pc, #92]	; (2504 <compare_set+0x114>)
			cc_val = now + cc_inc;
    24a6:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
    24aa:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    24ae:	e7d9      	b.n	2464 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    24b0:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    24b2:	4a15      	ldr	r2, [pc, #84]	; (2508 <compare_set+0x118>)
    24b4:	f3bf 8f5b 	dmb	ish
    24b8:	40a3      	lsls	r3, r4
    24ba:	e852 0f00 	ldrex	r0, [r2]
    24be:	4318      	orrs	r0, r3
    24c0:	e842 0100 	strex	r1, r0, [r2]
    24c4:	2900      	cmp	r1, #0
    24c6:	d1f8      	bne.n	24ba <compare_set+0xca>
    24c8:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    24cc:	490b      	ldr	r1, [pc, #44]	; (24fc <compare_set+0x10c>)
	cc_data[chan].callback = handler;
    24ce:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    24d0:	0123      	lsls	r3, r4, #4
    24d2:	eb01 1204 	add.w	r2, r1, r4, lsl #4
    24d6:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
    24da:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    24dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    24de:	6053      	str	r3, [r2, #4]
	return ret;
    24e0:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
    24e2:	4620      	mov	r0, r4
    24e4:	9900      	ldr	r1, [sp, #0]
    24e6:	f7ff ff33 	bl	2350 <compare_int_unlock>
}
    24ea:	4628      	mov	r0, r5
    24ec:	b003      	add	sp, #12
    24ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    24f2:	f06f 0515 	mvn.w	r5, #21
    24f6:	e7f4      	b.n	24e2 <compare_set+0xf2>
    24f8:	00800001 	.word	0x00800001
    24fc:	20000098 	.word	0x20000098
    2500:	40011000 	.word	0x40011000
    2504:	007ffffd 	.word	0x007ffffd
    2508:	200002ac 	.word	0x200002ac

0000250c <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    250c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
    250e:	4c1b      	ldr	r4, [pc, #108]	; (257c <sys_clock_driver_init+0x70>)
    2510:	4b1b      	ldr	r3, [pc, #108]	; (2580 <sys_clock_driver_init+0x74>)
    2512:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    2516:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    251a:	4b1a      	ldr	r3, [pc, #104]	; (2584 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    251c:	2500      	movs	r5, #0
    251e:	f04f 30ff 	mov.w	r0, #4294967295
    2522:	f04f 31ff 	mov.w	r1, #4294967295
    2526:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    252a:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    252e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2532:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2536:	4b14      	ldr	r3, [pc, #80]	; (2588 <sys_clock_driver_init+0x7c>)
    2538:	2602      	movs	r6, #2
    253a:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    253e:	2101      	movs	r1, #1
    2540:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    2544:	2011      	movs	r0, #17
    2546:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    254a:	462a      	mov	r2, r5
    254c:	f7fe fe40 	bl	11d0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    2550:	2011      	movs	r0, #17
    2552:	f7fe fe21 	bl	1198 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    2556:	4a0d      	ldr	r2, [pc, #52]	; (258c <sys_clock_driver_init+0x80>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2558:	2301      	movs	r3, #1
    255a:	60a3      	str	r3, [r4, #8]
    255c:	6023      	str	r3, [r4, #0]
    255e:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    2560:	4b0b      	ldr	r3, [pc, #44]	; (2590 <sys_clock_driver_init+0x84>)
    2562:	4a0c      	ldr	r2, [pc, #48]	; (2594 <sys_clock_driver_init+0x88>)
    2564:	9300      	str	r3, [sp, #0]
    2566:	9501      	str	r5, [sp, #4]
    2568:	2300      	movs	r3, #0
    256a:	4628      	mov	r0, r5
    256c:	f7ff ff40 	bl	23f0 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    2570:	4630      	mov	r0, r6
    2572:	f7ff fb3b 	bl	1bec <z_nrf_clock_control_lf_on>

	return 0;
}
    2576:	4628      	mov	r0, r5
    2578:	b002      	add	sp, #8
    257a:	bd70      	pop	{r4, r5, r6, pc}
    257c:	40011000 	.word	0x40011000
    2580:	000f0003 	.word	0x000f0003
    2584:	20000098 	.word	0x20000098
    2588:	e000e100 	.word	0xe000e100
    258c:	200002b0 	.word	0x200002b0
    2590:	00002309 	.word	0x00002309
    2594:	007fffff 	.word	0x007fffff

00002598 <rtc_nrf_isr>:
{
    2598:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    259c:	4c2f      	ldr	r4, [pc, #188]	; (265c <rtc_nrf_isr+0xc4>)
    259e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    25a2:	0799      	lsls	r1, r3, #30
    25a4:	d50b      	bpl.n	25be <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    25a6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    25aa:	b143      	cbz	r3, 25be <rtc_nrf_isr+0x26>
		overflow_cnt++;
    25ac:	4a2c      	ldr	r2, [pc, #176]	; (2660 <rtc_nrf_isr+0xc8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    25ae:	2300      	movs	r3, #0
    25b0:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    25b4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    25b8:	6813      	ldr	r3, [r2, #0]
    25ba:	3301      	adds	r3, #1
    25bc:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    25be:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    25c2:	03da      	lsls	r2, r3, #15
    25c4:	d52a      	bpl.n	261c <rtc_nrf_isr+0x84>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    25c6:	f3bf 8f5b 	dmb	ish
    25ca:	4b26      	ldr	r3, [pc, #152]	; (2664 <rtc_nrf_isr+0xcc>)
    25cc:	e853 2f00 	ldrex	r2, [r3]
    25d0:	f022 0101 	bic.w	r1, r2, #1
    25d4:	e843 1000 	strex	r0, r1, [r3]
    25d8:	2800      	cmp	r0, #0
    25da:	d1f7      	bne.n	25cc <rtc_nrf_isr+0x34>
    25dc:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    25e0:	07d3      	lsls	r3, r2, #31
    25e2:	d402      	bmi.n	25ea <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    25e4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    25e8:	b1c3      	cbz	r3, 261c <rtc_nrf_isr+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    25ea:	2500      	movs	r5, #0
    25ec:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    25f0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    25f4:	f7ff feda 	bl	23ac <z_nrf_rtc_timer_read>
	__asm__ volatile(
    25f8:	f04f 0320 	mov.w	r3, #32
    25fc:	f3ef 8211 	mrs	r2, BASEPRI
    2600:	f383 8812 	msr	BASEPRI_MAX, r3
    2604:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    2608:	4b17      	ldr	r3, [pc, #92]	; (2668 <rtc_nrf_isr+0xd0>)
    260a:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    260e:	42b0      	cmp	r0, r6
    2610:	41b9      	sbcs	r1, r7
    2612:	d206      	bcs.n	2622 <rtc_nrf_isr+0x8a>
	__asm__ volatile(
    2614:	f382 8811 	msr	BASEPRI, r2
    2618:	f3bf 8f6f 	isb	sy
}
    261c:	b003      	add	sp, #12
    261e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2622:	f04f 38ff 	mov.w	r8, #4294967295
    2626:	f04f 39ff 	mov.w	r9, #4294967295
    262a:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
    262e:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
    2632:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
    2634:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2638:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    263c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    2640:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    2644:	f382 8811 	msr	BASEPRI, r2
    2648:	f3bf 8f6f 	isb	sy
		if (handler) {
    264c:	2900      	cmp	r1, #0
    264e:	d0e5      	beq.n	261c <rtc_nrf_isr+0x84>
			handler(chan, expire_time, user_context);
    2650:	9000      	str	r0, [sp, #0]
    2652:	4632      	mov	r2, r6
    2654:	463b      	mov	r3, r7
    2656:	4628      	mov	r0, r5
    2658:	4788      	blx	r1
    265a:	e7df      	b.n	261c <rtc_nrf_isr+0x84>
    265c:	40011000 	.word	0x40011000
    2660:	200002b4 	.word	0x200002b4
    2664:	200002ac 	.word	0x200002ac
    2668:	20000098 	.word	0x20000098

0000266c <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    266c:	1c43      	adds	r3, r0, #1
{
    266e:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    2670:	d022      	beq.n	26b8 <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    2672:	2801      	cmp	r0, #1
    2674:	dd22      	ble.n	26bc <sys_clock_set_timeout+0x50>
    2676:	4a12      	ldr	r2, [pc, #72]	; (26c0 <sys_clock_set_timeout+0x54>)
    2678:	4b12      	ldr	r3, [pc, #72]	; (26c4 <sys_clock_set_timeout+0x58>)
    267a:	4290      	cmp	r0, r2
    267c:	bfd4      	ite	le
    267e:	4604      	movle	r4, r0
    2680:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    2682:	f7ff fe93 	bl	23ac <z_nrf_rtc_timer_read>
    2686:	4b10      	ldr	r3, [pc, #64]	; (26c8 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    2688:	490e      	ldr	r1, [pc, #56]	; (26c4 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    268a:	e9d3 2300 	ldrd	r2, r3, [r3]
    268e:	1a80      	subs	r0, r0, r2
		cyc = 0;
    2690:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2694:	bf28      	it	cs
    2696:	2400      	movcs	r4, #0
	cyc += unannounced;
    2698:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    269a:	428c      	cmp	r4, r1
    269c:	bf28      	it	cs
    269e:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    26a0:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    26a2:	490a      	ldr	r1, [pc, #40]	; (26cc <sys_clock_set_timeout+0x60>)
    26a4:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    26a6:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    26aa:	9001      	str	r0, [sp, #4]
    26ac:	f143 0300 	adc.w	r3, r3, #0
    26b0:	f7ff fe9e 	bl	23f0 <compare_set>
}
    26b4:	b002      	add	sp, #8
    26b6:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    26b8:	4c02      	ldr	r4, [pc, #8]	; (26c4 <sys_clock_set_timeout+0x58>)
    26ba:	e7e2      	b.n	2682 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    26bc:	2401      	movs	r4, #1
    26be:	e7e0      	b.n	2682 <sys_clock_set_timeout+0x16>
    26c0:	007ffffe 	.word	0x007ffffe
    26c4:	007fffff 	.word	0x007fffff
    26c8:	200000a8 	.word	0x200000a8
    26cc:	00002309 	.word	0x00002309

000026d0 <sys_clock_elapsed>:
{
    26d0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    26d2:	f7ff fe6b 	bl	23ac <z_nrf_rtc_timer_read>
    26d6:	4b02      	ldr	r3, [pc, #8]	; (26e0 <sys_clock_elapsed+0x10>)
    26d8:	681b      	ldr	r3, [r3, #0]
}
    26da:	1ac0      	subs	r0, r0, r3
    26dc:	bd08      	pop	{r3, pc}
    26de:	bf00      	nop
    26e0:	200000a8 	.word	0x200000a8

000026e4 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    26e4:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    26e8:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    26ec:	2a06      	cmp	r2, #6
    26ee:	d109      	bne.n	2704 <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    26f0:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    26f4:	f3c3 1303 	ubfx	r3, r3, #4, #4
    26f8:	3b03      	subs	r3, #3
    26fa:	2b04      	cmp	r3, #4
    26fc:	d802      	bhi.n	2704 <nrf52_errata_16+0x20>
    26fe:	4a02      	ldr	r2, [pc, #8]	; (2708 <nrf52_errata_16+0x24>)
    2700:	5cd0      	ldrb	r0, [r2, r3]
    2702:	4770      	bx	lr
                switch(var2)
                {
                    case 0x03ul:
                        return true;
                    case 0x04ul:
                        return false;
    2704:	2000      	movs	r0, #0
                }
            }
        #endif
        return false;
    #endif
}
    2706:	4770      	bx	lr
    2708:	00004dae 	.word	0x00004dae

0000270c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    270c:	4a02      	ldr	r2, [pc, #8]	; (2718 <nvmc_wait+0xc>)
    270e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    2712:	2b00      	cmp	r3, #0
    2714:	d0fb      	beq.n	270e <nvmc_wait+0x2>
}
    2716:	4770      	bx	lr
    2718:	4001e000 	.word	0x4001e000

0000271c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    271c:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    271e:	f001 fff2 	bl	4706 <nrf52_errata_108>
    2722:	b140      	cbz	r0, 2736 <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    2724:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2728:	4a8e      	ldr	r2, [pc, #568]	; (2964 <SystemInit+0x248>)
    272a:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
    272e:	f3c3 2304 	ubfx	r3, r3, #8, #5
    2732:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    2736:	f7ff ffd5 	bl	26e4 <nrf52_errata_16>
    273a:	b110      	cbz	r0, 2742 <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    273c:	4b8a      	ldr	r3, [pc, #552]	; (2968 <SystemInit+0x24c>)
    273e:	4a8b      	ldr	r2, [pc, #556]	; (296c <SystemInit+0x250>)
    2740:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    2742:	f001 ffe0 	bl	4706 <nrf52_errata_108>
    2746:	b148      	cbz	r0, 275c <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    2748:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    274c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2750:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    2754:	f3c3 3342 	ubfx	r3, r3, #13, #3
    2758:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    275c:	f7ff ffc2 	bl	26e4 <nrf52_errata_16>
    2760:	b130      	cbz	r0, 2770 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    2762:	4a83      	ldr	r2, [pc, #524]	; (2970 <SystemInit+0x254>)
    2764:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    2768:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    276c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    2770:	f001 ffc9 	bl	4706 <nrf52_errata_108>
    2774:	b140      	cbz	r0, 2788 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
    2776:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    277a:	2200      	movs	r2, #0
    277c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    2780:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    2784:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    2788:	f7ff ffac 	bl	26e4 <nrf52_errata_16>
    278c:	b120      	cbz	r0, 2798 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    278e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2792:	2203      	movs	r2, #3
    2794:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    2798:	f7ff ffa4 	bl	26e4 <nrf52_errata_16>
    279c:	b160      	cbz	r0, 27b8 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    279e:	4b75      	ldr	r3, [pc, #468]	; (2974 <SystemInit+0x258>)
    27a0:	2205      	movs	r2, #5
    27a2:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    27a6:	2201      	movs	r2, #1
    27a8:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    27ac:	2200      	movs	r2, #0
    27ae:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    27b2:	223f      	movs	r2, #63	; 0x3f
    27b4:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    27b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    27bc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    27c0:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    27c2:	bf09      	itett	eq
    27c4:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    27c8:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    27cc:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    27d0:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
    27d4:	bf08      	it	eq
    27d6:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    27da:	2a06      	cmp	r2, #6
    27dc:	d14d      	bne.n	287a <SystemInit+0x15e>
            {
                switch(var2)
    27de:	3b03      	subs	r3, #3
    27e0:	2b04      	cmp	r3, #4
    27e2:	d803      	bhi.n	27ec <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    27e4:	4a64      	ldr	r2, [pc, #400]	; (2978 <SystemInit+0x25c>)
    27e6:	5cd3      	ldrb	r3, [r2, r3]
    27e8:	2b00      	cmp	r3, #0
    27ea:	d046      	beq.n	287a <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    27ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    27f0:	4b62      	ldr	r3, [pc, #392]	; (297c <SystemInit+0x260>)
    27f2:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    27f6:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    27fa:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    27fe:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    2802:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    2806:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    280a:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    280e:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    2812:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    2816:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    281a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    281e:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    2822:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    2826:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    282a:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    282e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    2832:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    2836:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    283a:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    283e:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    2842:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    2846:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    284a:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    284e:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    2852:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    2856:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    285a:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    285e:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    2862:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    2866:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    286a:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    286e:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    2872:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    2876:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    287a:	f001 ff44 	bl	4706 <nrf52_errata_108>
    287e:	b148      	cbz	r0, 2894 <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    2880:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2884:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2888:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    288c:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    2890:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    2894:	f001 ff37 	bl	4706 <nrf52_errata_108>
    2898:	b148      	cbz	r0, 28ae <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    289a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    289e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    28a2:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    28a4:	bf44      	itt	mi
    28a6:	f06f 0201 	mvnmi.w	r2, #1
    28aa:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    28ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    28b2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    28b6:	2a06      	cmp	r2, #6
    28b8:	d126      	bne.n	2908 <SystemInit+0x1ec>
            {
                switch(var2)
    28ba:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    28be:	3b03      	subs	r3, #3
    28c0:	2b04      	cmp	r3, #4
    28c2:	d802      	bhi.n	28ca <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    28c4:	4a2e      	ldr	r2, [pc, #184]	; (2980 <SystemInit+0x264>)
    28c6:	5cd3      	ldrb	r3, [r2, r3]
    28c8:	b163      	cbz	r3, 28e4 <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    28ca:	4a2e      	ldr	r2, [pc, #184]	; (2984 <SystemInit+0x268>)
    28cc:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
    28d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    28d4:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    28d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    28dc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    28e0:	2b06      	cmp	r3, #6
    28e2:	d111      	bne.n	2908 <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    28e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    28e8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    28ec:	3b03      	subs	r3, #3
    28ee:	2b04      	cmp	r3, #4
    28f0:	d802      	bhi.n	28f8 <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    28f2:	4a25      	ldr	r2, [pc, #148]	; (2988 <SystemInit+0x26c>)
    28f4:	5cd3      	ldrb	r3, [r2, r3]
    28f6:	b13b      	cbz	r3, 2908 <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    28f8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    28fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    2900:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2904:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2908:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    290c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2910:	2a00      	cmp	r2, #0
    2912:	db03      	blt.n	291c <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    2914:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2918:	2b00      	cmp	r3, #0
    291a:	da22      	bge.n	2962 <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    291c:	491b      	ldr	r1, [pc, #108]	; (298c <SystemInit+0x270>)
    291e:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2920:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2924:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2928:	2415      	movs	r4, #21
    nvmc_wait();
    292a:	f7ff feef 	bl	270c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    292e:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    2932:	f7ff feeb 	bl	270c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    2936:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    293a:	f7ff fee7 	bl	270c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    293e:	2300      	movs	r3, #0
    2940:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    2944:	f7ff fee2 	bl	270c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    2948:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    294c:	4908      	ldr	r1, [pc, #32]	; (2970 <SystemInit+0x254>)
    294e:	4b10      	ldr	r3, [pc, #64]	; (2990 <SystemInit+0x274>)
    2950:	68ca      	ldr	r2, [r1, #12]
    2952:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2956:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2958:	60cb      	str	r3, [r1, #12]
    295a:	f3bf 8f4f 	dsb	sy
    __NOP();
    295e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2960:	e7fd      	b.n	295e <SystemInit+0x242>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
    2962:	bd10      	pop	{r4, pc}
    2964:	40013000 	.word	0x40013000
    2968:	4007c000 	.word	0x4007c000
    296c:	baadf00d 	.word	0xbaadf00d
    2970:	e000ed00 	.word	0xe000ed00
    2974:	40005000 	.word	0x40005000
    2978:	00004da9 	.word	0x00004da9
    297c:	4000c000 	.word	0x4000c000
    2980:	00004da4 	.word	0x00004da4
    2984:	40001000 	.word	0x40001000
    2988:	00004d9f 	.word	0x00004d9f
    298c:	4001e000 	.word	0x4001e000
    2990:	05fa0004 	.word	0x05fa0004

00002994 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    2994:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    2996:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    2998:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    299a:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    299e:	fab2 f382 	clz	r3, r2
    29a2:	f1c3 031f 	rsb	r3, r3, #31
    29a6:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    29a8:	fa05 f403 	lsl.w	r4, r5, r3
    29ac:	ea22 0404 	bic.w	r4, r2, r4
    29b0:	e850 6f00 	ldrex	r6, [r0]
    29b4:	4296      	cmp	r6, r2
    29b6:	d104      	bne.n	29c2 <nrfx_flag32_alloc+0x2e>
    29b8:	e840 4c00 	strex	ip, r4, [r0]
    29bc:	f1bc 0f00 	cmp.w	ip, #0
    29c0:	d1f6      	bne.n	29b0 <nrfx_flag32_alloc+0x1c>
    29c2:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    29c6:	d1e7      	bne.n	2998 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    29c8:	4801      	ldr	r0, [pc, #4]	; (29d0 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    29ca:	700b      	strb	r3, [r1, #0]
}
    29cc:	bd70      	pop	{r4, r5, r6, pc}
    29ce:	bf00      	nop
    29d0:	0bad0000 	.word	0x0bad0000

000029d4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    29d4:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    29d6:	6803      	ldr	r3, [r0, #0]
    29d8:	40cb      	lsrs	r3, r1
    29da:	07db      	lsls	r3, r3, #31
    29dc:	d414      	bmi.n	2a08 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    29de:	2301      	movs	r3, #1
    29e0:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    29e2:	6802      	ldr	r2, [r0, #0]
    29e4:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    29e8:	ea43 0102 	orr.w	r1, r3, r2
    29ec:	e850 4f00 	ldrex	r4, [r0]
    29f0:	4294      	cmp	r4, r2
    29f2:	d104      	bne.n	29fe <nrfx_flag32_free+0x2a>
    29f4:	e840 1c00 	strex	ip, r1, [r0]
    29f8:	f1bc 0f00 	cmp.w	ip, #0
    29fc:	d1f6      	bne.n	29ec <nrfx_flag32_free+0x18>
    29fe:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2a02:	d1ee      	bne.n	29e2 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    2a04:	4801      	ldr	r0, [pc, #4]	; (2a0c <nrfx_flag32_free+0x38>)
}
    2a06:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    2a08:	4801      	ldr	r0, [pc, #4]	; (2a10 <nrfx_flag32_free+0x3c>)
    2a0a:	e7fc      	b.n	2a06 <nrfx_flag32_free+0x32>
    2a0c:	0bad0000 	.word	0x0bad0000
    2a10:	0bad0004 	.word	0x0bad0004

00002a14 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    2a14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    2a16:	4604      	mov	r4, r0
    2a18:	b118      	cbz	r0, 2a22 <clock_stop+0xe>
    2a1a:	2801      	cmp	r0, #1
    2a1c:	d022      	beq.n	2a64 <clock_stop+0x50>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    2a1e:	b003      	add	sp, #12
    2a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    2a22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a26:	2202      	movs	r2, #2
    2a28:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2a2c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    2a30:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2a34:	2201      	movs	r2, #1
    2a36:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    2a38:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    2a3a:	2301      	movs	r3, #1
    2a3c:	f88d 3007 	strb.w	r3, [sp, #7]
    2a40:	f242 7510 	movw	r5, #10000	; 0x2710
    2a44:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    2a48:	b1cc      	cbz	r4, 2a7e <clock_stop+0x6a>
    2a4a:	2c01      	cmp	r4, #1
    2a4c:	d1e7      	bne.n	2a1e <clock_stop+0xa>
            if (p_clk_src != NULL)
    2a4e:	b3c7      	cbz	r7, 2ac2 <clock_stop+0xae>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2a50:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    2a54:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    2a58:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2a5a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    2a5e:	03da      	lsls	r2, r3, #15
    2a60:	d521      	bpl.n	2aa6 <clock_stop+0x92>
    2a62:	e016      	b.n	2a92 <clock_stop+0x7e>
    p_reg->INTENCLR = mask;
    2a64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2a68:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    2a6a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2a6e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2a72:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2a76:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    2a78:	f10d 0707 	add.w	r7, sp, #7
    2a7c:	e7dd      	b.n	2a3a <clock_stop+0x26>
            if (p_clk_src != NULL)
    2a7e:	b1b7      	cbz	r7, 2aae <clock_stop+0x9a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2a80:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2a84:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    2a88:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2a8a:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    2a8e:	03d8      	lsls	r0, r3, #15
    2a90:	d5c5      	bpl.n	2a1e <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    2a92:	f89d 0007 	ldrb.w	r0, [sp, #7]
    2a96:	2801      	cmp	r0, #1
    2a98:	d103      	bne.n	2aa2 <clock_stop+0x8e>
    2a9a:	f001 fe43 	bl	4724 <nrfx_busy_wait>
    2a9e:	3d01      	subs	r5, #1
    2aa0:	d1d2      	bne.n	2a48 <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    2aa2:	2c01      	cmp	r4, #1
    2aa4:	d1bb      	bne.n	2a1e <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
    2aa6:	4b0c      	ldr	r3, [pc, #48]	; (2ad8 <clock_stop+0xc4>)
    2aa8:	2200      	movs	r2, #0
    2aaa:	715a      	strb	r2, [r3, #5]
    2aac:	e7b7      	b.n	2a1e <clock_stop+0xa>
    2aae:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    2ab2:	03d9      	lsls	r1, r3, #15
    2ab4:	d5b3      	bpl.n	2a1e <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    2ab6:	2001      	movs	r0, #1
    2ab8:	f001 fe34 	bl	4724 <nrfx_busy_wait>
    2abc:	3d01      	subs	r5, #1
    2abe:	d1f6      	bne.n	2aae <clock_stop+0x9a>
    2ac0:	e7ad      	b.n	2a1e <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2ac2:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    2ac6:	03db      	lsls	r3, r3, #15
    2ac8:	d5ed      	bpl.n	2aa6 <clock_stop+0x92>
    2aca:	2001      	movs	r0, #1
    2acc:	f001 fe2a 	bl	4724 <nrfx_busy_wait>
    2ad0:	3d01      	subs	r5, #1
    2ad2:	d1f6      	bne.n	2ac2 <clock_stop+0xae>
    2ad4:	e7e7      	b.n	2aa6 <clock_stop+0x92>
    2ad6:	bf00      	nop
    2ad8:	200002b8 	.word	0x200002b8

00002adc <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    2adc:	4b04      	ldr	r3, [pc, #16]	; (2af0 <nrfx_clock_init+0x14>)
    2ade:	791a      	ldrb	r2, [r3, #4]
    2ae0:	b922      	cbnz	r2, 2aec <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    2ae2:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    2ae4:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    2ae6:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    2ae8:	4802      	ldr	r0, [pc, #8]	; (2af4 <nrfx_clock_init+0x18>)
    2aea:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    2aec:	4802      	ldr	r0, [pc, #8]	; (2af8 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2aee:	4770      	bx	lr
    2af0:	200002b8 	.word	0x200002b8
    2af4:	0bad0000 	.word	0x0bad0000
    2af8:	0bad000c 	.word	0x0bad000c

00002afc <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    2afc:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    2afe:	b110      	cbz	r0, 2b06 <nrfx_clock_start+0xa>
    2b00:	2801      	cmp	r0, #1
    2b02:	d043      	beq.n	2b8c <nrfx_clock_start+0x90>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    2b04:	bd38      	pop	{r3, r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2b06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2b0a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2b0e:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    2b12:	03c8      	lsls	r0, r1, #15
    2b14:	d40b      	bmi.n	2b2e <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    2b16:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    2b1a:	07d9      	lsls	r1, r3, #31
    2b1c:	d50f      	bpl.n	2b3e <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2b1e:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    2b22:	079b      	lsls	r3, r3, #30
    2b24:	d408      	bmi.n	2b38 <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
    2b26:	2302      	movs	r3, #2
    2b28:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    2b2c:	e7ea      	b.n	2b04 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2b2e:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    2b32:	2b01      	cmp	r3, #1
    2b34:	d004      	beq.n	2b40 <nrfx_clock_start+0x44>
    2b36:	b113      	cbz	r3, 2b3e <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    2b38:	2000      	movs	r0, #0
    2b3a:	f7ff ff6b 	bl	2a14 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    2b3e:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    2b40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2b44:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2b48:	2300      	movs	r3, #0
    2b4a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    2b4e:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    2b52:	2302      	movs	r3, #2
    2b54:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
    2b58:	4a12      	ldr	r2, [pc, #72]	; (2ba4 <nrfx_clock_start+0xa8>)
    2b5a:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
    2b5e:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
    2b62:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dwt_ctrl = DWT->CTRL;
    2b66:	4b10      	ldr	r3, [pc, #64]	; (2ba8 <nrfx_clock_start+0xac>)
    2b68:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
    2b6a:	f044 0101 	orr.w	r1, r4, #1
    2b6e:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
    2b70:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
    2b72:	6859      	ldr	r1, [r3, #4]
    2b74:	1b49      	subs	r1, r1, r5
    2b76:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
    2b7a:	d3fa      	bcc.n	2b72 <nrfx_clock_start+0x76>
    DWT->CTRL = dwt_ctrl;
    2b7c:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2b7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    CoreDebug->DEMCR = core_debug;
    2b82:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    2b86:	2201      	movs	r2, #1
    2b88:	609a      	str	r2, [r3, #8]
}
    2b8a:	e7bb      	b.n	2b04 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2b8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b90:	2200      	movs	r2, #0
    2b92:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2b96:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    2b9a:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2b9e:	6018      	str	r0, [r3, #0]
}
    2ba0:	e7b0      	b.n	2b04 <nrfx_clock_start+0x8>
    2ba2:	bf00      	nop
    2ba4:	e000ed00 	.word	0xe000ed00
    2ba8:	e0001000 	.word	0xe0001000

00002bac <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    2bac:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2bae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2bb2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    2bb6:	b16a      	cbz	r2, 2bd4 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2bb8:	2200      	movs	r2, #0
    2bba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2bbe:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    2bc2:	2201      	movs	r2, #1
    2bc4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    2bc8:	4b11      	ldr	r3, [pc, #68]	; (2c10 <nrfx_power_clock_irq_handler+0x64>)
    2bca:	7958      	ldrb	r0, [r3, #5]
    2bcc:	b910      	cbnz	r0, 2bd4 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    2bce:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    2bd0:	681b      	ldr	r3, [r3, #0]
    2bd2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2bd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2bd8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    2bdc:	b172      	cbz	r2, 2bfc <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2bde:	2200      	movs	r2, #0
    2be0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2be4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2be8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2bec:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    2bf0:	0792      	lsls	r2, r2, #30
    2bf2:	d104      	bne.n	2bfe <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2bf4:	2201      	movs	r2, #1
    2bf6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2bfa:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    2bfc:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    2bfe:	2202      	movs	r2, #2
    2c00:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2c04:	4b02      	ldr	r3, [pc, #8]	; (2c10 <nrfx_power_clock_irq_handler+0x64>)
}
    2c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2c0a:	681b      	ldr	r3, [r3, #0]
    2c0c:	2001      	movs	r0, #1
    2c0e:	4718      	bx	r3
    2c10:	200002b8 	.word	0x200002b8

00002c14 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    2c14:	4b03      	ldr	r3, [pc, #12]	; (2c24 <pin_in_use_by_te+0x10>)
    2c16:	3008      	adds	r0, #8
    2c18:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2c1c:	f3c0 1040 	ubfx	r0, r0, #5, #1
    2c20:	4770      	bx	lr
    2c22:	bf00      	nop
    2c24:	20000028 	.word	0x20000028

00002c28 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    2c28:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2c2a:	f100 0308 	add.w	r3, r0, #8
    2c2e:	4c0c      	ldr	r4, [pc, #48]	; (2c60 <call_handler+0x38>)
    2c30:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    2c34:	05da      	lsls	r2, r3, #23
{
    2c36:	4605      	mov	r5, r0
    2c38:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2c3a:	d507      	bpl.n	2c4c <call_handler+0x24>
    2c3c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    2c40:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    2c44:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    2c48:	6852      	ldr	r2, [r2, #4]
    2c4a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    2c4c:	68a3      	ldr	r3, [r4, #8]
    2c4e:	b12b      	cbz	r3, 2c5c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    2c50:	68e2      	ldr	r2, [r4, #12]
    2c52:	4631      	mov	r1, r6
    2c54:	4628      	mov	r0, r5
    }
}
    2c56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    2c5a:	4718      	bx	r3
}
    2c5c:	bd70      	pop	{r4, r5, r6, pc}
    2c5e:	bf00      	nop
    2c60:	20000028 	.word	0x20000028

00002c64 <release_handler>:
{
    2c64:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2c66:	4a12      	ldr	r2, [pc, #72]	; (2cb0 <release_handler+0x4c>)
    2c68:	3008      	adds	r0, #8
    2c6a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    2c6e:	05d9      	lsls	r1, r3, #23
    2c70:	d51b      	bpl.n	2caa <release_handler+0x46>
    2c72:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    2c76:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    2c7a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2c7e:	f102 040e 	add.w	r4, r2, #14
    2c82:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    2c84:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    2c88:	f413 7f80 	tst.w	r3, #256	; 0x100
    2c8c:	d003      	beq.n	2c96 <release_handler+0x32>
    2c8e:	f3c3 2343 	ubfx	r3, r3, #9, #4
    2c92:	4299      	cmp	r1, r3
    2c94:	d009      	beq.n	2caa <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2c96:	3001      	adds	r0, #1
    2c98:	2820      	cmp	r0, #32
    2c9a:	d1f3      	bne.n	2c84 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    2c9c:	2300      	movs	r3, #0
    2c9e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    2ca2:	4804      	ldr	r0, [pc, #16]	; (2cb4 <release_handler+0x50>)
}
    2ca4:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    2ca6:	f7ff be95 	b.w	29d4 <nrfx_flag32_free>
}
    2caa:	bc10      	pop	{r4}
    2cac:	4770      	bx	lr
    2cae:	bf00      	nop
    2cb0:	20000028 	.word	0x20000028
    2cb4:	2000007c 	.word	0x2000007c

00002cb8 <pin_handler_trigger_uninit>:
{
    2cb8:	b538      	push	{r3, r4, r5, lr}
    2cba:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    2cbc:	f7ff ffaa 	bl	2c14 <pin_in_use_by_te>
    2cc0:	4c09      	ldr	r4, [pc, #36]	; (2ce8 <pin_handler_trigger_uninit+0x30>)
    2cc2:	f102 0508 	add.w	r5, r2, #8
    2cc6:	b140      	cbz	r0, 2cda <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2cc8:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    2ccc:	4907      	ldr	r1, [pc, #28]	; (2cec <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    2cce:	0b5b      	lsrs	r3, r3, #13
    2cd0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    2cd4:	2000      	movs	r0, #0
    2cd6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    2cda:	4610      	mov	r0, r2
    2cdc:	f7ff ffc2 	bl	2c64 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    2ce0:	2300      	movs	r3, #0
    2ce2:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    2ce6:	bd38      	pop	{r3, r4, r5, pc}
    2ce8:	20000028 	.word	0x20000028
    2cec:	40006000 	.word	0x40006000

00002cf0 <nrfx_gpiote_input_configure>:
{
    2cf0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    2cf4:	4604      	mov	r4, r0
    2cf6:	461d      	mov	r5, r3
    if (p_input_config)
    2cf8:	b309      	cbz	r1, 2d3e <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2cfa:	4f4f      	ldr	r7, [pc, #316]	; (2e38 <nrfx_gpiote_input_configure+0x148>)
    2cfc:	f100 0808 	add.w	r8, r0, #8
    2d00:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    2d04:	07b3      	lsls	r3, r6, #30
    2d06:	d506      	bpl.n	2d16 <nrfx_gpiote_input_configure+0x26>
    2d08:	f7ff ff84 	bl	2c14 <pin_in_use_by_te>
    2d0c:	b118      	cbz	r0, 2d16 <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    2d0e:	484b      	ldr	r0, [pc, #300]	; (2e3c <nrfx_gpiote_input_configure+0x14c>)
}
    2d10:	b002      	add	sp, #8
    2d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
    2d16:	f004 031f 	and.w	r3, r4, #31
    2d1a:	009b      	lsls	r3, r3, #2
    2d1c:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    2d20:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    2d22:	f8d3 0700 	ldr.w	r0, [r3, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    2d26:	f026 0602 	bic.w	r6, r6, #2
    cnf &= ~to_update;
    2d2a:	f020 000f 	bic.w	r0, r0, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    2d2e:	f046 0601 	orr.w	r6, r6, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    2d32:	ea40 0181 	orr.w	r1, r0, r1, lsl #2
    2d36:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    2d3a:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
    if (p_trigger_config)
    2d3e:	b19a      	cbz	r2, 2d68 <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2d40:	4b3d      	ldr	r3, [pc, #244]	; (2e38 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    2d42:	7817      	ldrb	r7, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    2d44:	6850      	ldr	r0, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2d46:	f104 0608 	add.w	r6, r4, #8
    2d4a:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        if (pin_is_output(pin))
    2d4e:	f011 0f02 	tst.w	r1, #2
    2d52:	d00d      	beq.n	2d70 <nrfx_gpiote_input_configure+0x80>
            if (use_evt)
    2d54:	2800      	cmp	r0, #0
    2d56:	d1da      	bne.n	2d0e <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    2d58:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    2d5c:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    2d60:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
    2d64:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
    if (p_handler_config)
    2d68:	2d00      	cmp	r5, #0
    2d6a:	d13b      	bne.n	2de4 <nrfx_gpiote_input_configure+0xf4>
        err = NRFX_SUCCESS;
    2d6c:	4834      	ldr	r0, [pc, #208]	; (2e40 <nrfx_gpiote_input_configure+0x150>)
    2d6e:	e7cf      	b.n	2d10 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    2d70:	f021 0120 	bic.w	r1, r1, #32
    2d74:	04c9      	lsls	r1, r1, #19
    2d76:	0cc9      	lsrs	r1, r1, #19
    2d78:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
    2d7c:	2800      	cmp	r0, #0
    2d7e:	d0eb      	beq.n	2d58 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    2d80:	2f03      	cmp	r7, #3
    2d82:	d8c4      	bhi.n	2d0e <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    2d84:	6852      	ldr	r2, [r2, #4]
    2d86:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    2d8a:	b92f      	cbnz	r7, 2d98 <nrfx_gpiote_input_configure+0xa8>
    2d8c:	4a2d      	ldr	r2, [pc, #180]	; (2e44 <nrfx_gpiote_input_configure+0x154>)
    2d8e:	f50c 7ca2 	add.w	ip, ip, #324	; 0x144
    2d92:	f842 702c 	str.w	r7, [r2, ip, lsl #2]
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
#endif
}
    2d96:	e7df      	b.n	2d58 <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    2d98:	ea4f 028c 	mov.w	r2, ip, lsl #2
    2d9c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2da0:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    2da4:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    2da8:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    2dac:	f020 0003 	bic.w	r0, r0, #3
    2db0:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2db4:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    2db8:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
    2dbc:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    2dc0:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2dc4:	0220      	lsls	r0, r4, #8
    2dc6:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    2dca:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
    2dce:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    2dd2:	ea40 000e 	orr.w	r0, r0, lr
    2dd6:	f041 0120 	orr.w	r1, r1, #32
    2dda:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
    2dde:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    2de2:	e7b9      	b.n	2d58 <nrfx_gpiote_input_configure+0x68>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    2de4:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    2de8:	4620      	mov	r0, r4
    2dea:	f7ff ff3b 	bl	2c64 <release_handler>
    if (!handler)
    2dee:	2e00      	cmp	r6, #0
    2df0:	d0bc      	beq.n	2d6c <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    2df2:	4d11      	ldr	r5, [pc, #68]	; (2e38 <nrfx_gpiote_input_configure+0x148>)
    2df4:	e9d5 2300 	ldrd	r2, r3, [r5]
    2df8:	4296      	cmp	r6, r2
    2dfa:	d101      	bne.n	2e00 <nrfx_gpiote_input_configure+0x110>
    2dfc:	429f      	cmp	r7, r3
    2dfe:	d019      	beq.n	2e34 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    2e00:	4811      	ldr	r0, [pc, #68]	; (2e48 <nrfx_gpiote_input_configure+0x158>)
    2e02:	f10d 0107 	add.w	r1, sp, #7
    2e06:	f7ff fdc5 	bl	2994 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    2e0a:	4b0d      	ldr	r3, [pc, #52]	; (2e40 <nrfx_gpiote_input_configure+0x150>)
    2e0c:	4298      	cmp	r0, r3
    2e0e:	f47f af7f 	bne.w	2d10 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    2e12:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
    2e16:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    2e1a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    2e1e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    2e20:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    2e22:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    2e26:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    2e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2e2e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    2e32:	e79b      	b.n	2d6c <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    2e34:	2200      	movs	r2, #0
    2e36:	e7ee      	b.n	2e16 <nrfx_gpiote_input_configure+0x126>
    2e38:	20000028 	.word	0x20000028
    2e3c:	0bad0004 	.word	0x0bad0004
    2e40:	0bad0000 	.word	0x0bad0000
    2e44:	40006000 	.word	0x40006000
    2e48:	2000007c 	.word	0x2000007c

00002e4c <nrfx_gpiote_output_configure>:
{
    2e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e4e:	4604      	mov	r4, r0
    if (p_config)
    2e50:	b389      	cbz	r1, 2eb6 <nrfx_gpiote_output_configure+0x6a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2e52:	4e3a      	ldr	r6, [pc, #232]	; (2f3c <nrfx_gpiote_output_configure+0xf0>)
    2e54:	f100 0708 	add.w	r7, r0, #8
    2e58:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    2e5c:	07ab      	lsls	r3, r5, #30
    2e5e:	d404      	bmi.n	2e6a <nrfx_gpiote_output_configure+0x1e>
    2e60:	f7ff fed8 	bl	2c14 <pin_in_use_by_te>
    2e64:	b108      	cbz	r0, 2e6a <nrfx_gpiote_output_configure+0x1e>
{
    2e66:	4836      	ldr	r0, [pc, #216]	; (2f40 <nrfx_gpiote_output_configure+0xf4>)
}
    2e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    2e6a:	f015 0f1c 	tst.w	r5, #28
    2e6e:	784b      	ldrb	r3, [r1, #1]
    2e70:	d124      	bne.n	2ebc <nrfx_gpiote_output_configure+0x70>
    *p_pin = pin_number & 0x1F;
    2e72:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    2e76:	f500 7ee0 	add.w	lr, r0, #448	; 0x1c0
    2e7a:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    2e7e:	005b      	lsls	r3, r3, #1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    2e80:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    2e84:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    2e88:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    2e8a:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
    2e8e:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    2e92:	f02c 0c07 	bic.w	ip, ip, #7
    2e96:	ea43 030c 	orr.w	r3, r3, ip
    2e9a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    2e9e:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    2ea2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    2ea6:	f043 0301 	orr.w	r3, r3, #1
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    2eaa:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    2eae:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
    2eb2:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
    2eb6:	b922      	cbnz	r2, 2ec2 <nrfx_gpiote_output_configure+0x76>
    return NRFX_SUCCESS;
    2eb8:	4822      	ldr	r0, [pc, #136]	; (2f44 <nrfx_gpiote_output_configure+0xf8>)
    2eba:	e7d5      	b.n	2e68 <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    2ebc:	2b01      	cmp	r3, #1
    2ebe:	d1d8      	bne.n	2e72 <nrfx_gpiote_output_configure+0x26>
    2ec0:	e7d1      	b.n	2e66 <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2ec2:	4e1e      	ldr	r6, [pc, #120]	; (2f3c <nrfx_gpiote_output_configure+0xf0>)
    2ec4:	f104 0708 	add.w	r7, r4, #8
    2ec8:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    2ecc:	0783      	lsls	r3, r0, #30
    2ece:	d5ca      	bpl.n	2e66 <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    2ed0:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    2ed4:	4661      	mov	r1, ip
    2ed6:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    2ed8:	f020 0020 	bic.w	r0, r0, #32
    2edc:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2ee0:	04c0      	lsls	r0, r0, #19
    2ee2:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    2ee6:	0cc0      	lsrs	r0, r0, #19
    2ee8:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    2eec:	2300      	movs	r3, #0
    2eee:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    2ef2:	7855      	ldrb	r5, [r2, #1]
    2ef4:	2d00      	cmp	r5, #0
    2ef6:	d0df      	beq.n	2eb8 <nrfx_gpiote_output_configure+0x6c>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    2ef8:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    2efc:	7892      	ldrb	r2, [r2, #2]
    2efe:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    2f02:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    2f06:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2f0a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    2f0e:	0223      	lsls	r3, r4, #8
    2f10:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    2f14:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2f16:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    2f1a:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    2f1e:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2f20:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    2f22:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    2f26:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2f2a:	4313      	orrs	r3, r2
    2f2c:	f040 0020 	orr.w	r0, r0, #32
    2f30:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    2f34:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    2f38:	e7be      	b.n	2eb8 <nrfx_gpiote_output_configure+0x6c>
    2f3a:	bf00      	nop
    2f3c:	20000028 	.word	0x20000028
    2f40:	0bad0004 	.word	0x0bad0004
    2f44:	0bad0000 	.word	0x0bad0000

00002f48 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    2f48:	4b01      	ldr	r3, [pc, #4]	; (2f50 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    2f4a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    2f4e:	4770      	bx	lr
    2f50:	20000028 	.word	0x20000028

00002f54 <nrfx_gpiote_channel_get>:
{
    2f54:	b508      	push	{r3, lr}
    2f56:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    2f58:	f7ff fe5c 	bl	2c14 <pin_in_use_by_te>
    2f5c:	b138      	cbz	r0, 2f6e <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2f5e:	4b05      	ldr	r3, [pc, #20]	; (2f74 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    2f60:	4805      	ldr	r0, [pc, #20]	; (2f78 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2f62:	3208      	adds	r2, #8
    2f64:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    2f68:	0b5b      	lsrs	r3, r3, #13
    2f6a:	700b      	strb	r3, [r1, #0]
}
    2f6c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    2f6e:	4803      	ldr	r0, [pc, #12]	; (2f7c <nrfx_gpiote_channel_get+0x28>)
    2f70:	e7fc      	b.n	2f6c <nrfx_gpiote_channel_get+0x18>
    2f72:	bf00      	nop
    2f74:	20000028 	.word	0x20000028
    2f78:	0bad0000 	.word	0x0bad0000
    2f7c:	0bad0004 	.word	0x0bad0004

00002f80 <nrfx_gpiote_init>:
{
    2f80:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    2f82:	4c0f      	ldr	r4, [pc, #60]	; (2fc0 <nrfx_gpiote_init+0x40>)
    2f84:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    2f88:	b9bd      	cbnz	r5, 2fba <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    2f8a:	2240      	movs	r2, #64	; 0x40
    2f8c:	4629      	mov	r1, r5
    2f8e:	f104 0010 	add.w	r0, r4, #16
    2f92:	f001 f99e 	bl	42d2 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    2f96:	2006      	movs	r0, #6
    2f98:	f7fe f8fe 	bl	1198 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2f9c:	4b09      	ldr	r3, [pc, #36]	; (2fc4 <nrfx_gpiote_init+0x44>)
    return err_code;
    2f9e:	480a      	ldr	r0, [pc, #40]	; (2fc8 <nrfx_gpiote_init+0x48>)
    2fa0:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    2fa4:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    2fa8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    2fac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    2fb0:	2301      	movs	r3, #1
    2fb2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    2fb6:	6563      	str	r3, [r4, #84]	; 0x54
}
    2fb8:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    2fba:	4804      	ldr	r0, [pc, #16]	; (2fcc <nrfx_gpiote_init+0x4c>)
    2fbc:	e7fc      	b.n	2fb8 <nrfx_gpiote_init+0x38>
    2fbe:	bf00      	nop
    2fc0:	20000028 	.word	0x20000028
    2fc4:	40006000 	.word	0x40006000
    2fc8:	0bad0000 	.word	0x0bad0000
    2fcc:	0bad0005 	.word	0x0bad0005

00002fd0 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    2fd0:	4b03      	ldr	r3, [pc, #12]	; (2fe0 <nrfx_gpiote_is_init+0x10>)
    2fd2:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    2fd6:	3800      	subs	r0, #0
    2fd8:	bf18      	it	ne
    2fda:	2001      	movne	r0, #1
    2fdc:	4770      	bx	lr
    2fde:	bf00      	nop
    2fe0:	20000028 	.word	0x20000028

00002fe4 <nrfx_gpiote_channel_free>:
{
    2fe4:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    2fe6:	4801      	ldr	r0, [pc, #4]	; (2fec <nrfx_gpiote_channel_free+0x8>)
    2fe8:	f7ff bcf4 	b.w	29d4 <nrfx_flag32_free>
    2fec:	20000078 	.word	0x20000078

00002ff0 <nrfx_gpiote_channel_alloc>:
{
    2ff0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    2ff2:	4801      	ldr	r0, [pc, #4]	; (2ff8 <nrfx_gpiote_channel_alloc+0x8>)
    2ff4:	f7ff bcce 	b.w	2994 <nrfx_flag32_alloc>
    2ff8:	20000078 	.word	0x20000078

00002ffc <nrfx_gpiote_trigger_enable>:
{
    2ffc:	b510      	push	{r4, lr}
    2ffe:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3000:	f7ff fe08 	bl	2c14 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3004:	f102 0408 	add.w	r4, r2, #8
    3008:	4b1c      	ldr	r3, [pc, #112]	; (307c <nrfx_gpiote_trigger_enable+0x80>)
    300a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    300e:	b1e0      	cbz	r0, 304a <nrfx_gpiote_trigger_enable+0x4e>
    3010:	f013 0402 	ands.w	r4, r3, #2
    3014:	d119      	bne.n	304a <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3016:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    3018:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    301a:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    301e:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    3022:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3026:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    302a:	6004      	str	r4, [r0, #0]
    302c:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    302e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    3032:	f040 0001 	orr.w	r0, r0, #1
    3036:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    303a:	b129      	cbz	r1, 3048 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    303c:	2201      	movs	r2, #1
    303e:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    3042:	4a0f      	ldr	r2, [pc, #60]	; (3080 <nrfx_gpiote_trigger_enable+0x84>)
    3044:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    3048:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    304a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    304e:	2b04      	cmp	r3, #4
    3050:	d010      	beq.n	3074 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    3052:	2b05      	cmp	r3, #5
    3054:	d010      	beq.n	3078 <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
    3056:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    305a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
    305e:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3062:	40d9      	lsrs	r1, r3
    3064:	f001 0101 	and.w	r1, r1, #1
    3068:	3102      	adds	r1, #2
}
    306a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    306e:	4610      	mov	r0, r2
    3070:	f001 bb69 	b.w	4746 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3074:	2103      	movs	r1, #3
    3076:	e7f8      	b.n	306a <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    3078:	2102      	movs	r1, #2
    307a:	e7f6      	b.n	306a <nrfx_gpiote_trigger_enable+0x6e>
    307c:	20000028 	.word	0x20000028
    3080:	40006000 	.word	0x40006000

00003084 <nrfx_gpiote_trigger_disable>:
{
    3084:	b508      	push	{r3, lr}
    3086:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3088:	f7ff fdc4 	bl	2c14 <pin_in_use_by_te>
    308c:	b1c0      	cbz	r0, 30c0 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    308e:	f102 0108 	add.w	r1, r2, #8
    3092:	4b0e      	ldr	r3, [pc, #56]	; (30cc <nrfx_gpiote_trigger_disable+0x48>)
    3094:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3098:	0799      	lsls	r1, r3, #30
    309a:	d411      	bmi.n	30c0 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    309c:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    309e:	2201      	movs	r2, #1
    30a0:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    30a2:	009b      	lsls	r3, r3, #2
    30a4:	490a      	ldr	r1, [pc, #40]	; (30d0 <nrfx_gpiote_trigger_disable+0x4c>)
    30a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    30aa:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    30ae:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    30b2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    30b6:	f022 0203 	bic.w	r2, r2, #3
    30ba:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    30be:	bd08      	pop	{r3, pc}
    30c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    30c4:	2100      	movs	r1, #0
    30c6:	4610      	mov	r0, r2
    30c8:	f001 bb3d 	b.w	4746 <nrf_gpio_cfg_sense_set>
    30cc:	20000028 	.word	0x20000028
    30d0:	40006000 	.word	0x40006000

000030d4 <nrfx_gpiote_pin_uninit>:
{
    30d4:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    30d6:	4b0d      	ldr	r3, [pc, #52]	; (310c <nrfx_gpiote_pin_uninit+0x38>)
    30d8:	f100 0208 	add.w	r2, r0, #8
{
    30dc:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    30de:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    30e2:	07db      	lsls	r3, r3, #31
    30e4:	d50f      	bpl.n	3106 <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
    30e6:	f7ff ffcd 	bl	3084 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    30ea:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
    30ec:	f004 041f 	and.w	r4, r4, #31
    30f0:	f7ff fde2 	bl	2cb8 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    30f4:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    30f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    30fc:	2202      	movs	r2, #2
    30fe:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    3102:	4803      	ldr	r0, [pc, #12]	; (3110 <nrfx_gpiote_pin_uninit+0x3c>)
}
    3104:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3106:	4803      	ldr	r0, [pc, #12]	; (3114 <nrfx_gpiote_pin_uninit+0x40>)
    3108:	e7fc      	b.n	3104 <nrfx_gpiote_pin_uninit+0x30>
    310a:	bf00      	nop
    310c:	20000028 	.word	0x20000028
    3110:	0bad0000 	.word	0x0bad0000
    3114:	0bad0004 	.word	0x0bad0004

00003118 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    3118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    311c:	4b4f      	ldr	r3, [pc, #316]	; (325c <nrfx_gpiote_irq_handler+0x144>)
    return p_reg->INTENSET & mask;
    311e:	4850      	ldr	r0, [pc, #320]	; (3260 <nrfx_gpiote_irq_handler+0x148>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3120:	4950      	ldr	r1, [pc, #320]	; (3264 <nrfx_gpiote_irq_handler+0x14c>)
    uint32_t status = 0;
    3122:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    3124:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3126:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3128:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    312a:	b136      	cbz	r6, 313a <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
    312c:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    3130:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3132:	bf1e      	ittt	ne
    3134:	601c      	strne	r4, [r3, #0]
    3136:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    3138:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    313a:	3304      	adds	r3, #4
    313c:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    313e:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3142:	d1f1      	bne.n	3128 <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3144:	4b46      	ldr	r3, [pc, #280]	; (3260 <nrfx_gpiote_irq_handler+0x148>)
    3146:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    314a:	b1bb      	cbz	r3, 317c <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
    314c:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    3150:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    3154:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    3156:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    315a:	af01      	add	r7, sp, #4
    315c:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
    3160:	9c01      	ldr	r4, [sp, #4]
    3162:	b98c      	cbnz	r4, 3188 <nrfx_gpiote_irq_handler+0x70>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3164:	4b3e      	ldr	r3, [pc, #248]	; (3260 <nrfx_gpiote_irq_handler+0x148>)
    3166:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
    316a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    316e:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    3172:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    3174:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
    3178:	2b00      	cmp	r3, #0
    317a:	d1ee      	bne.n	315a <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
    317c:	2401      	movs	r4, #1
    while (mask)
    317e:	2d00      	cmp	r5, #0
    3180:	d153      	bne.n	322a <nrfx_gpiote_irq_handler+0x112>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    3182:	b003      	add	sp, #12
    3184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    3188:	fa94 f4a4 	rbit	r4, r4
    318c:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3190:	4a35      	ldr	r2, [pc, #212]	; (3268 <nrfx_gpiote_irq_handler+0x150>)
    3192:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    3196:	08e0      	lsrs	r0, r4, #3
    3198:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    319c:	5c3b      	ldrb	r3, [r7, r0]
    bit = BITMASK_RELBIT_GET(bit);
    319e:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    31a2:	fa08 f202 	lsl.w	r2, r8, r2
    31a6:	ea23 0302 	bic.w	r3, r3, r2
    31aa:	543b      	strb	r3, [r7, r0]
    31ac:	00a3      	lsls	r3, r4, #2
    31ae:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
    31b2:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    31b6:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
    31ba:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    31bc:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    31be:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    31c2:	d518      	bpl.n	31f6 <nrfx_gpiote_irq_handler+0xde>
        call_handler(pin, trigger);
    31c4:	4659      	mov	r1, fp
    31c6:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    31c8:	fa5f fa82 	uxtb.w	sl, r2
    31cc:	f7ff fd2c 	bl	2c28 <call_handler>
    31d0:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
    31d4:	f3c3 4301 	ubfx	r3, r3, #16, #2
    31d8:	459a      	cmp	sl, r3
    31da:	d107      	bne.n	31ec <nrfx_gpiote_irq_handler+0xd4>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    31dc:	2100      	movs	r1, #0
    31de:	4620      	mov	r0, r4
    31e0:	f001 fab1 	bl	4746 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    31e4:	4651      	mov	r1, sl
    31e6:	4620      	mov	r0, r4
    31e8:	f001 faad 	bl	4746 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    31ec:	fa08 f404 	lsl.w	r4, r8, r4
    31f0:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
    31f4:	e7b4      	b.n	3160 <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    31f6:	2a02      	cmp	r2, #2
    31f8:	d10c      	bne.n	3214 <nrfx_gpiote_irq_handler+0xfc>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    31fa:	2103      	movs	r1, #3
    31fc:	4620      	mov	r0, r4
    31fe:	f001 faa2 	bl	4746 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3202:	f00a 0305 	and.w	r3, sl, #5
    3206:	2b01      	cmp	r3, #1
    3208:	d1f0      	bne.n	31ec <nrfx_gpiote_irq_handler+0xd4>
            call_handler(pin, trigger);
    320a:	4659      	mov	r1, fp
    320c:	4620      	mov	r0, r4
    320e:	f7ff fd0b 	bl	2c28 <call_handler>
    3212:	e7eb      	b.n	31ec <nrfx_gpiote_irq_handler+0xd4>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    3214:	2102      	movs	r1, #2
    3216:	4620      	mov	r0, r4
    3218:	f001 fa95 	bl	4746 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    321c:	f1ba 0f03 	cmp.w	sl, #3
    3220:	d0f3      	beq.n	320a <nrfx_gpiote_irq_handler+0xf2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3222:	2a03      	cmp	r2, #3
    3224:	d1e2      	bne.n	31ec <nrfx_gpiote_irq_handler+0xd4>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    3226:	458a      	cmp	sl, r1
    3228:	e7ee      	b.n	3208 <nrfx_gpiote_irq_handler+0xf0>
        uint32_t ch = NRF_CTZ(mask);
    322a:	fa95 f3a5 	rbit	r3, r5
    322e:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    3232:	fa04 f203 	lsl.w	r2, r4, r3
    3236:	009b      	lsls	r3, r3, #2
    3238:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    323c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    3240:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3244:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    3248:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    324c:	f3c0 2004 	ubfx	r0, r0, #8, #5
    3250:	f3c1 4101 	ubfx	r1, r1, #16, #2
    3254:	f7ff fce8 	bl	2c28 <call_handler>
    3258:	e791      	b.n	317e <nrfx_gpiote_irq_handler+0x66>
    325a:	bf00      	nop
    325c:	40006100 	.word	0x40006100
    3260:	40006000 	.word	0x40006000
    3264:	40006120 	.word	0x40006120
    3268:	20000028 	.word	0x20000028

0000326c <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    326c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    326e:	4801      	ldr	r0, [pc, #4]	; (3274 <nrfx_ppi_channel_alloc+0x8>)
    3270:	f7ff bb90 	b.w	2994 <nrfx_flag32_alloc>
    3274:	20000084 	.word	0x20000084

00003278 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    3278:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    327a:	4c14      	ldr	r4, [pc, #80]	; (32cc <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    327c:	4a14      	ldr	r2, [pc, #80]	; (32d0 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    327e:	4915      	ldr	r1, [pc, #84]	; (32d4 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    3280:	2303      	movs	r3, #3
    3282:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    3284:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    3286:	4b14      	ldr	r3, [pc, #80]	; (32d8 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    3288:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    328a:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    328c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3290:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    3292:	2300      	movs	r3, #0
    3294:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    3296:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    3298:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    329a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    329c:	4a0f      	ldr	r2, [pc, #60]	; (32dc <_DoInit+0x64>)
    329e:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    32a0:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    32a2:	2210      	movs	r2, #16
    32a4:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    32a6:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    32a8:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    32aa:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    32ac:	f000 ffec 	bl	4288 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    32b0:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    32b4:	490a      	ldr	r1, [pc, #40]	; (32e0 <_DoInit+0x68>)
    32b6:	4620      	mov	r0, r4
    32b8:	f000 ffe6 	bl	4288 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    32bc:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    32c0:	2320      	movs	r3, #32
    32c2:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    32c4:	f3bf 8f5f 	dmb	sy
}
    32c8:	bd10      	pop	{r4, pc}
    32ca:	bf00      	nop
    32cc:	200002c0 	.word	0x200002c0
    32d0:	00004dd3 	.word	0x00004dd3
    32d4:	00004ddc 	.word	0x00004ddc
    32d8:	200003b0 	.word	0x200003b0
    32dc:	200003a0 	.word	0x200003a0
    32e0:	00004de0 	.word	0x00004de0

000032e4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    32e4:	4b10      	ldr	r3, [pc, #64]	; (3328 <z_sys_init_run_level+0x44>)
{
    32e6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    32e8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    32ec:	3001      	adds	r0, #1
    32ee:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    32f2:	42a6      	cmp	r6, r4
    32f4:	d800      	bhi.n	32f8 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    32f6:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    32f8:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    32fc:	b18d      	cbz	r5, 3322 <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    32fe:	4628      	mov	r0, r5
    3300:	4798      	blx	r3
			if (rc != 0) {
    3302:	b138      	cbz	r0, 3314 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    3304:	2800      	cmp	r0, #0
    3306:	bfb8      	it	lt
    3308:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    330a:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    330c:	28ff      	cmp	r0, #255	; 0xff
    330e:	bfa8      	it	ge
    3310:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    3312:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    3314:	68ea      	ldr	r2, [r5, #12]
    3316:	7853      	ldrb	r3, [r2, #1]
    3318:	f043 0301 	orr.w	r3, r3, #1
    331c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    331e:	3408      	adds	r4, #8
    3320:	e7e7      	b.n	32f2 <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    3322:	4798      	blx	r3
    3324:	e7fb      	b.n	331e <z_sys_init_run_level+0x3a>
    3326:	bf00      	nop
    3328:	00004ccc 	.word	0x00004ccc

0000332c <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    332c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    332e:	4b0a      	ldr	r3, [pc, #40]	; (3358 <bg_thread_main+0x2c>)
    3330:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    3332:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    3334:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    3336:	f7ff ffd5 	bl	32e4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    333a:	f000 fe0b 	bl	3f54 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    333e:	2004      	movs	r0, #4
    3340:	f7ff ffd0 	bl	32e4 <z_sys_init_run_level>

	z_init_static_threads();
    3344:	f000 f8f0 	bl	3528 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    3348:	f7fd f850 	bl	3ec <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    334c:	4a03      	ldr	r2, [pc, #12]	; (335c <bg_thread_main+0x30>)
    334e:	7b13      	ldrb	r3, [r2, #12]
    3350:	f023 0301 	bic.w	r3, r3, #1
    3354:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3356:	bd08      	pop	{r3, pc}
    3358:	200007b0 	.word	0x200007b0
    335c:	20000138 	.word	0x20000138

00003360 <z_bss_zero>:
{
    3360:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    3362:	4803      	ldr	r0, [pc, #12]	; (3370 <z_bss_zero+0x10>)
    3364:	4a03      	ldr	r2, [pc, #12]	; (3374 <z_bss_zero+0x14>)
    3366:	2100      	movs	r1, #0
    3368:	1a12      	subs	r2, r2, r0
    336a:	f001 fa28 	bl	47be <z_early_memset>
}
    336e:	bd08      	pop	{r3, pc}
    3370:	20000098 	.word	0x20000098
    3374:	200007b4 	.word	0x200007b4

00003378 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    3378:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    337a:	2300      	movs	r3, #0
{
    337c:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    337e:	2201      	movs	r2, #1
    3380:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    3384:	4e13      	ldr	r6, [pc, #76]	; (33d4 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3386:	4d14      	ldr	r5, [pc, #80]	; (33d8 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    3388:	9301      	str	r3, [sp, #4]
    338a:	220f      	movs	r2, #15
    338c:	e9cd 3202 	strd	r3, r2, [sp, #8]
    3390:	4912      	ldr	r1, [pc, #72]	; (33dc <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3392:	2314      	movs	r3, #20
    3394:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    3398:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    339c:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    339e:	f44f 70c0 	mov.w	r0, #384	; 0x180
    33a2:	fb00 1104 	mla	r1, r0, r4, r1
    33a6:	4b0e      	ldr	r3, [pc, #56]	; (33e0 <z_init_cpu+0x68>)
    33a8:	9500      	str	r5, [sp, #0]
    33aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
    33ae:	4630      	mov	r0, r6
    33b0:	f000 f888 	bl	34c4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    33b4:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    33b6:	4a0b      	ldr	r2, [pc, #44]	; (33e4 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    33b8:	60ee      	str	r6, [r5, #12]
    33ba:	f023 0304 	bic.w	r3, r3, #4
    33be:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    33c0:	f44f 6304 	mov.w	r3, #2112	; 0x840
    33c4:	fb04 3303 	mla	r3, r4, r3, r3
    33c8:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    33ca:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
    33cc:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    33ce:	b006      	add	sp, #24
    33d0:	bd70      	pop	{r4, r5, r6, pc}
    33d2:	bf00      	nop
    33d4:	200000b8 	.word	0x200000b8
    33d8:	20000368 	.word	0x20000368
    33dc:	20001000 	.word	0x20001000
    33e0:	000035e1 	.word	0x000035e1
    33e4:	200007c0 	.word	0x200007c0

000033e8 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    33e8:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    33ea:	2000      	movs	r0, #0
{
    33ec:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    33ee:	f7ff ff79 	bl	32e4 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    33f2:	4b2d      	ldr	r3, [pc, #180]	; (34a8 <z_cstart+0xc0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    33f4:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    33f8:	4d2c      	ldr	r5, [pc, #176]	; (34ac <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    33fa:	4e2d      	ldr	r6, [pc, #180]	; (34b0 <z_cstart+0xc8>)
    33fc:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    33fe:	4f2d      	ldr	r7, [pc, #180]	; (34b4 <z_cstart+0xcc>)
    3400:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3404:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3406:	2400      	movs	r4, #0
    3408:	23e0      	movs	r3, #224	; 0xe0
    340a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    340e:	77ec      	strb	r4, [r5, #31]
    3410:	762c      	strb	r4, [r5, #24]
    3412:	766c      	strb	r4, [r5, #25]
    3414:	76ac      	strb	r4, [r5, #26]
    3416:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    341a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    341c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3420:	626b      	str	r3, [r5, #36]	; 0x24
    3422:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3426:	f7fe f913 	bl	1650 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    342a:	f7fd fe95 	bl	1158 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    342e:	f04f 33ff 	mov.w	r3, #4294967295
    3432:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3434:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    3436:	f7fe fa45 	bl	18c4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    343a:	f7fe f9ab 	bl	1794 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    343e:	f240 1301 	movw	r3, #257	; 0x101
    3442:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    3446:	ab06      	add	r3, sp, #24
    3448:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    344a:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    344e:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    3450:	f001 f98e 	bl	4770 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    3454:	2001      	movs	r0, #1
    3456:	f7ff ff45 	bl	32e4 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    345a:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    345c:	4d16      	ldr	r5, [pc, #88]	; (34b8 <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    345e:	f7ff ff41 	bl	32e4 <z_sys_init_run_level>
	z_sched_init();
    3462:	f000 fb13 	bl	3a8c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3466:	4b15      	ldr	r3, [pc, #84]	; (34bc <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    3468:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    346a:	9305      	str	r3, [sp, #20]
    346c:	2301      	movs	r3, #1
    346e:	4914      	ldr	r1, [pc, #80]	; (34c0 <z_cstart+0xd8>)
    3470:	9400      	str	r4, [sp, #0]
    3472:	e9cd 4303 	strd	r4, r3, [sp, #12]
    3476:	f44f 6280 	mov.w	r2, #1024	; 0x400
    347a:	463b      	mov	r3, r7
    347c:	e9cd 4401 	strd	r4, r4, [sp, #4]
    3480:	4628      	mov	r0, r5
    3482:	f000 f81f 	bl	34c4 <z_setup_new_thread>
    3486:	7b6a      	ldrb	r2, [r5, #13]
    3488:	4606      	mov	r6, r0
    348a:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    348e:	4628      	mov	r0, r5
    3490:	736a      	strb	r2, [r5, #13]
    3492:	f001 f9df 	bl	4854 <z_ready_thread>
	z_init_cpu(0);
    3496:	4620      	mov	r0, r4
    3498:	f7ff ff6e 	bl	3378 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    349c:	463a      	mov	r2, r7
    349e:	4631      	mov	r1, r6
    34a0:	4628      	mov	r0, r5
    34a2:	f7fd ff53 	bl	134c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    34a6:	bf00      	nop
    34a8:	20001000 	.word	0x20001000
    34ac:	e000ed00 	.word	0xe000ed00
    34b0:	20000368 	.word	0x20000368
    34b4:	0000332d 	.word	0x0000332d
    34b8:	20000138 	.word	0x20000138
    34bc:	00004de7 	.word	0x00004de7
    34c0:	20001180 	.word	0x20001180

000034c4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    34c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    34c8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    34ca:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    34cc:	2604      	movs	r6, #4
    34ce:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    34d0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    34d2:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    34d4:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    34d8:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    34da:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    34dc:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    34e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    34e2:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    34e4:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    34e8:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    34ea:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    34ee:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    34f2:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    34f4:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    34f6:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    34f8:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    34fc:	9202      	str	r2, [sp, #8]
    34fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3500:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    3502:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3504:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3506:	9200      	str	r2, [sp, #0]
    3508:	4642      	mov	r2, r8
{
    350a:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    350c:	f7fd feec 	bl	12e8 <arch_new_thread>
	if (!_current) {
    3510:	4b04      	ldr	r3, [pc, #16]	; (3524 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    3512:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    3514:	689b      	ldr	r3, [r3, #8]
    3516:	b103      	cbz	r3, 351a <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    3518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    351a:	6723      	str	r3, [r4, #112]	; 0x70
}
    351c:	4640      	mov	r0, r8
    351e:	b004      	add	sp, #16
    3520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3524:	20000368 	.word	0x20000368

00003528 <z_init_static_threads>:
{
    3528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    352c:	4c29      	ldr	r4, [pc, #164]	; (35d4 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    352e:	4d2a      	ldr	r5, [pc, #168]	; (35d8 <z_init_static_threads+0xb0>)
{
    3530:	b087      	sub	sp, #28
    3532:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    3534:	42ae      	cmp	r6, r5
    3536:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    353a:	d30f      	bcc.n	355c <z_init_static_threads+0x34>
	k_sched_lock();
    353c:	f000 fa76 	bl	3a2c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    3540:	4c24      	ldr	r4, [pc, #144]	; (35d4 <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3542:	f8df 9098 	ldr.w	r9, [pc, #152]	; 35dc <z_init_static_threads+0xb4>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    3546:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    354a:	f240 37e7 	movw	r7, #999	; 0x3e7
    354e:	42ac      	cmp	r4, r5
    3550:	d320      	bcc.n	3594 <z_init_static_threads+0x6c>
}
    3552:	b007      	add	sp, #28
    3554:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    3558:	f000 ba7c 	b.w	3a54 <k_sched_unlock>
		z_setup_new_thread(
    355c:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3560:	9305      	str	r3, [sp, #20]
    3562:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    3566:	9304      	str	r3, [sp, #16]
    3568:	f854 3c10 	ldr.w	r3, [r4, #-16]
    356c:	9303      	str	r3, [sp, #12]
    356e:	f854 3c14 	ldr.w	r3, [r4, #-20]
    3572:	9302      	str	r3, [sp, #8]
    3574:	f854 3c18 	ldr.w	r3, [r4, #-24]
    3578:	9301      	str	r3, [sp, #4]
    357a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    357e:	9300      	str	r3, [sp, #0]
    3580:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    3584:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    3588:	f7ff ff9c 	bl	34c4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    358c:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    3590:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    3592:	e7ce      	b.n	3532 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3594:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3596:	1c5a      	adds	r2, r3, #1
    3598:	d00d      	beq.n	35b6 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    359a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    359e:	2100      	movs	r1, #0
    35a0:	4638      	mov	r0, r7
    35a2:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    35a6:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    35aa:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    35ae:	d104      	bne.n	35ba <z_init_static_threads+0x92>
	z_sched_start(thread);
    35b0:	4640      	mov	r0, r8
    35b2:	f000 f9eb 	bl	398c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    35b6:	342c      	adds	r4, #44	; 0x2c
    35b8:	e7c9      	b.n	354e <z_init_static_threads+0x26>
    35ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    35be:	2300      	movs	r3, #0
    35c0:	f7fc fd8c 	bl	dc <__aeabi_uldivmod>
    35c4:	4602      	mov	r2, r0
    35c6:	460b      	mov	r3, r1
    35c8:	f108 0018 	add.w	r0, r8, #24
    35cc:	4649      	mov	r1, r9
    35ce:	f000 fbc7 	bl	3d60 <z_add_timeout>
    35d2:	e7f0      	b.n	35b6 <z_init_static_threads+0x8e>
    35d4:	00004b44 	.word	0x00004b44
    35d8:	00004b44 	.word	0x00004b44
    35dc:	000048b9 	.word	0x000048b9

000035e0 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    35e0:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    35e2:	4c0b      	ldr	r4, [pc, #44]	; (3610 <idle+0x30>)
	return !z_sys_post_kernel;
    35e4:	4d0b      	ldr	r5, [pc, #44]	; (3614 <idle+0x34>)
	__asm__ volatile(
    35e6:	f04f 0220 	mov.w	r2, #32
    35ea:	f3ef 8311 	mrs	r3, BASEPRI
    35ee:	f382 8812 	msr	BASEPRI_MAX, r2
    35f2:	f3bf 8f6f 	isb	sy
    35f6:	f001 f9ab 	bl	4950 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    35fa:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    35fc:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    35fe:	b913      	cbnz	r3, 3606 <idle+0x26>
	arch_cpu_idle();
    3600:	f7fd fdb0 	bl	1164 <arch_cpu_idle>
}
    3604:	e7ef      	b.n	35e6 <idle+0x6>
    3606:	f7fd fcd9 	bl	fbc <pm_system_suspend>
    360a:	2800      	cmp	r0, #0
    360c:	d1eb      	bne.n	35e6 <idle+0x6>
    360e:	e7f7      	b.n	3600 <idle+0x20>
    3610:	20000368 	.word	0x20000368
    3614:	200007b0 	.word	0x200007b0

00003618 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3618:	b538      	push	{r3, r4, r5, lr}
    361a:	4604      	mov	r4, r0
    361c:	f04f 0320 	mov.w	r3, #32
    3620:	f3ef 8511 	mrs	r5, BASEPRI
    3624:	f383 8812 	msr	BASEPRI_MAX, r3
    3628:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    362c:	f001 f948 	bl	48c0 <z_unpend_first_thread>

	if (thread != NULL) {
    3630:	b148      	cbz	r0, 3646 <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    3632:	2200      	movs	r2, #0
    3634:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    3636:	f001 f90d 	bl	4854 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    363a:	4629      	mov	r1, r5
    363c:	4805      	ldr	r0, [pc, #20]	; (3654 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    363e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    3642:	f000 b991 	b.w	3968 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3646:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    364a:	429a      	cmp	r2, r3
    364c:	bf18      	it	ne
    364e:	3301      	addne	r3, #1
    3650:	60a3      	str	r3, [r4, #8]
}
    3652:	e7f2      	b.n	363a <z_impl_k_sem_give+0x22>
    3654:	200007b1 	.word	0x200007b1

00003658 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    3658:	b513      	push	{r0, r1, r4, lr}
    365a:	f04f 0420 	mov.w	r4, #32
    365e:	f3ef 8111 	mrs	r1, BASEPRI
    3662:	f384 8812 	msr	BASEPRI_MAX, r4
    3666:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    366a:	6884      	ldr	r4, [r0, #8]
    366c:	b144      	cbz	r4, 3680 <z_impl_k_sem_take+0x28>
		sem->count--;
    366e:	3c01      	subs	r4, #1
    3670:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    3672:	f381 8811 	msr	BASEPRI, r1
    3676:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    367a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    367c:	b002      	add	sp, #8
    367e:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    3680:	ea52 0403 	orrs.w	r4, r2, r3
    3684:	d106      	bne.n	3694 <z_impl_k_sem_take+0x3c>
    3686:	f381 8811 	msr	BASEPRI, r1
    368a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    368e:	f06f 000f 	mvn.w	r0, #15
    3692:	e7f3      	b.n	367c <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    3694:	e9cd 2300 	strd	r2, r3, [sp]
    3698:	4602      	mov	r2, r0
    369a:	4802      	ldr	r0, [pc, #8]	; (36a4 <z_impl_k_sem_take+0x4c>)
    369c:	f000 f946 	bl	392c <z_pend_curr>
	return ret;
    36a0:	e7ec      	b.n	367c <z_impl_k_sem_take+0x24>
    36a2:	bf00      	nop
    36a4:	200007b1 	.word	0x200007b1

000036a8 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    36a8:	89c3      	ldrh	r3, [r0, #14]
    36aa:	2b7f      	cmp	r3, #127	; 0x7f
    36ac:	d812      	bhi.n	36d4 <sliceable+0x2c>
	int ret = slice_ticks;
    36ae:	4b0a      	ldr	r3, [pc, #40]	; (36d8 <sliceable+0x30>)
    36b0:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    36b2:	b163      	cbz	r3, 36ce <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    36b4:	4b09      	ldr	r3, [pc, #36]	; (36dc <sliceable+0x34>)
    36b6:	f990 200e 	ldrsb.w	r2, [r0, #14]
    36ba:	681b      	ldr	r3, [r3, #0]
    36bc:	429a      	cmp	r2, r3
    36be:	db09      	blt.n	36d4 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
    36c0:	7b43      	ldrb	r3, [r0, #13]
    36c2:	06db      	lsls	r3, r3, #27
    36c4:	d106      	bne.n	36d4 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    36c6:	4b06      	ldr	r3, [pc, #24]	; (36e0 <sliceable+0x38>)
    36c8:	1ac3      	subs	r3, r0, r3
    36ca:	bf18      	it	ne
    36cc:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    36ce:	f003 0001 	and.w	r0, r3, #1
    36d2:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    36d4:	2300      	movs	r3, #0
    36d6:	e7fa      	b.n	36ce <sliceable+0x26>
    36d8:	20000394 	.word	0x20000394
    36dc:	20000390 	.word	0x20000390
    36e0:	200000b8 	.word	0x200000b8

000036e4 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    36e4:	4b04      	ldr	r3, [pc, #16]	; (36f8 <slice_timeout+0x14>)
    36e6:	1ac0      	subs	r0, r0, r3
    36e8:	4b04      	ldr	r3, [pc, #16]	; (36fc <slice_timeout+0x18>)
    36ea:	10c0      	asrs	r0, r0, #3
    36ec:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
    36ee:	4b04      	ldr	r3, [pc, #16]	; (3700 <slice_timeout+0x1c>)
    36f0:	2201      	movs	r2, #1
    36f2:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    36f4:	4770      	bx	lr
    36f6:	bf00      	nop
    36f8:	200001b8 	.word	0x200001b8
    36fc:	aaaaaaab 	.word	0xaaaaaaab
    3700:	200007b1 	.word	0x200007b1

00003704 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    3704:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
    3706:	4b0e      	ldr	r3, [pc, #56]	; (3740 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
    3708:	4c0e      	ldr	r4, [pc, #56]	; (3744 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
    370a:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
    370c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    3710:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
    3714:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
    3716:	4620      	mov	r0, r4
    3718:	f001 f904 	bl	4924 <z_abort_timeout>
	slice_expired[cpu] = false;
    371c:	4b0a      	ldr	r3, [pc, #40]	; (3748 <z_reset_time_slice+0x44>)
    371e:	2200      	movs	r2, #0
	if (sliceable(curr)) {
    3720:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
    3722:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    3724:	f7ff ffc0 	bl	36a8 <sliceable>
    3728:	b148      	cbz	r0, 373e <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
    372a:	4b08      	ldr	r3, [pc, #32]	; (374c <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    372c:	4908      	ldr	r1, [pc, #32]	; (3750 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
    372e:	681a      	ldr	r2, [r3, #0]
    3730:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    3732:	4620      	mov	r0, r4
    3734:	17d3      	asrs	r3, r2, #31
	}
}
    3736:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    373a:	f000 bb11 	b.w	3d60 <z_add_timeout>
}
    373e:	bd70      	pop	{r4, r5, r6, pc}
    3740:	20000368 	.word	0x20000368
    3744:	200001b8 	.word	0x200001b8
    3748:	200007b1 	.word	0x200007b1
    374c:	20000394 	.word	0x20000394
    3750:	000036e5 	.word	0x000036e5

00003754 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    3754:	b538      	push	{r3, r4, r5, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    3756:	4d0d      	ldr	r5, [pc, #52]	; (378c <update_cache+0x38>)
    3758:	462b      	mov	r3, r5
    375a:	f853 4f1c 	ldr.w	r4, [r3, #28]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    375e:	429c      	cmp	r4, r3
    3760:	d000      	beq.n	3764 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    3762:	b904      	cbnz	r4, 3766 <update_cache+0x12>
    3764:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    3766:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    3768:	b938      	cbnz	r0, 377a <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    376a:	7b5a      	ldrb	r2, [r3, #13]
    376c:	06d2      	lsls	r2, r2, #27
    376e:	d104      	bne.n	377a <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    3770:	69a2      	ldr	r2, [r4, #24]
    3772:	b912      	cbnz	r2, 377a <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    3774:	89da      	ldrh	r2, [r3, #14]
    3776:	2a7f      	cmp	r2, #127	; 0x7f
    3778:	d805      	bhi.n	3786 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    377a:	429c      	cmp	r4, r3
    377c:	d002      	beq.n	3784 <update_cache+0x30>
			z_reset_time_slice(thread);
    377e:	4620      	mov	r0, r4
    3780:	f7ff ffc0 	bl	3704 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    3784:	4623      	mov	r3, r4
    3786:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    3788:	bd38      	pop	{r3, r4, r5, pc}
    378a:	bf00      	nop
    378c:	20000368 	.word	0x20000368

00003790 <move_thread_to_end_of_prio_q>:
{
    3790:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    3792:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    3796:	7b43      	ldrb	r3, [r0, #13]
    3798:	2a00      	cmp	r2, #0
{
    379a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    379c:	da04      	bge.n	37a8 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    379e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    37a2:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    37a4:	f001 f81c 	bl	47e0 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    37a8:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    37aa:	4a15      	ldr	r2, [pc, #84]	; (3800 <move_thread_to_end_of_prio_q+0x70>)
    37ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
    37b0:	4610      	mov	r0, r2
    37b2:	734b      	strb	r3, [r1, #13]
    37b4:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    37b8:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    37ba:	4283      	cmp	r3, r0
    37bc:	bf08      	it	eq
    37be:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    37c0:	b923      	cbnz	r3, 37cc <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    37c2:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    37c6:	6021      	str	r1, [r4, #0]
	list->tail = node;
    37c8:	6211      	str	r1, [r2, #32]
}
    37ca:	e00c      	b.n	37e6 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    37cc:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    37d0:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    37d4:	42b5      	cmp	r5, r6
    37d6:	d00e      	beq.n	37f6 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    37d8:	42ae      	cmp	r6, r5
    37da:	dd0c      	ble.n	37f6 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    37dc:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    37de:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    37e2:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    37e4:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    37e6:	6890      	ldr	r0, [r2, #8]
    37e8:	1a43      	subs	r3, r0, r1
    37ea:	4258      	negs	r0, r3
}
    37ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    37f0:	4158      	adcs	r0, r3
    37f2:	f7ff bfaf 	b.w	3754 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    37f6:	429c      	cmp	r4, r3
    37f8:	d0e3      	beq.n	37c2 <move_thread_to_end_of_prio_q+0x32>
    37fa:	681b      	ldr	r3, [r3, #0]
    37fc:	e7e0      	b.n	37c0 <move_thread_to_end_of_prio_q+0x30>
    37fe:	bf00      	nop
    3800:	20000368 	.word	0x20000368

00003804 <ready_thread>:
{
    3804:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    3806:	f990 300d 	ldrsb.w	r3, [r0, #13]
    380a:	7b42      	ldrb	r2, [r0, #13]
    380c:	2b00      	cmp	r3, #0
    380e:	db29      	blt.n	3864 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3810:	06d3      	lsls	r3, r2, #27
    3812:	d127      	bne.n	3864 <ready_thread+0x60>
	return node->next != NULL;
    3814:	6983      	ldr	r3, [r0, #24]
    3816:	bb2b      	cbnz	r3, 3864 <ready_thread+0x60>
	return list->head == list;
    3818:	4913      	ldr	r1, [pc, #76]	; (3868 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    381a:	f062 027f 	orn	r2, r2, #127	; 0x7f
    381e:	7342      	strb	r2, [r0, #13]
    3820:	460a      	mov	r2, r1
    3822:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3826:	4294      	cmp	r4, r2
    3828:	bf18      	it	ne
    382a:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    382c:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    382e:	b923      	cbnz	r3, 383a <ready_thread+0x36>
	node->prev = tail;
    3830:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    3834:	6020      	str	r0, [r4, #0]
	list->tail = node;
    3836:	6208      	str	r0, [r1, #32]
}
    3838:	e00c      	b.n	3854 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    383a:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    383e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    3842:	42b5      	cmp	r5, r6
    3844:	d00a      	beq.n	385c <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3846:	42ae      	cmp	r6, r5
    3848:	dd08      	ble.n	385c <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    384a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    384c:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    3850:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    3852:	6058      	str	r0, [r3, #4]
}
    3854:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    3856:	2000      	movs	r0, #0
    3858:	f7ff bf7c 	b.w	3754 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    385c:	42a3      	cmp	r3, r4
    385e:	d0e7      	beq.n	3830 <ready_thread+0x2c>
    3860:	681b      	ldr	r3, [r3, #0]
    3862:	e7e4      	b.n	382e <ready_thread+0x2a>
}
    3864:	bc70      	pop	{r4, r5, r6}
    3866:	4770      	bx	lr
    3868:	20000368 	.word	0x20000368

0000386c <unready_thread>:
{
    386c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    386e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    3872:	7b43      	ldrb	r3, [r0, #13]
    3874:	2a00      	cmp	r2, #0
{
    3876:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3878:	da04      	bge.n	3884 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    387a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    387e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3880:	f000 ffae 	bl	47e0 <sys_dlist_remove>
	update_cache(thread == _current);
    3884:	4b04      	ldr	r3, [pc, #16]	; (3898 <unready_thread+0x2c>)
    3886:	6898      	ldr	r0, [r3, #8]
    3888:	1a43      	subs	r3, r0, r1
    388a:	4258      	negs	r0, r3
    388c:	4158      	adcs	r0, r3
}
    388e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    3892:	f7ff bf5f 	b.w	3754 <update_cache>
    3896:	bf00      	nop
    3898:	20000368 	.word	0x20000368

0000389c <pend_locked>:
{
    389c:	b570      	push	{r4, r5, r6, lr}
    389e:	4615      	mov	r5, r2
    38a0:	461c      	mov	r4, r3
    38a2:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    38a4:	f000 ffae 	bl	4804 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    38a8:	f1b4 3fff 	cmp.w	r4, #4294967295
    38ac:	bf08      	it	eq
    38ae:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    38b2:	d008      	beq.n	38c6 <pend_locked+0x2a>
    38b4:	462a      	mov	r2, r5
    38b6:	4623      	mov	r3, r4
    38b8:	f106 0018 	add.w	r0, r6, #24
    38bc:	4902      	ldr	r1, [pc, #8]	; (38c8 <pend_locked+0x2c>)
}
    38be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    38c2:	f000 ba4d 	b.w	3d60 <z_add_timeout>
    38c6:	bd70      	pop	{r4, r5, r6, pc}
    38c8:	000048b9 	.word	0x000048b9

000038cc <z_time_slice>:
{
    38cc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    38ce:	f04f 0320 	mov.w	r3, #32
    38d2:	f3ef 8511 	mrs	r5, BASEPRI
    38d6:	f383 8812 	msr	BASEPRI_MAX, r3
    38da:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
    38de:	4b10      	ldr	r3, [pc, #64]	; (3920 <z_time_slice+0x54>)
	if (pending_current == curr) {
    38e0:	4a10      	ldr	r2, [pc, #64]	; (3924 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
    38e2:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    38e4:	6810      	ldr	r0, [r2, #0]
    38e6:	42a0      	cmp	r0, r4
    38e8:	d106      	bne.n	38f8 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
    38ea:	f7ff ff0b 	bl	3704 <z_reset_time_slice>
	__asm__ volatile(
    38ee:	f385 8811 	msr	BASEPRI, r5
    38f2:	f3bf 8f6f 	isb	sy
}
    38f6:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    38f8:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    38fa:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
    38fc:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    38fe:	4a0a      	ldr	r2, [pc, #40]	; (3928 <z_time_slice+0x5c>)
    3900:	5cd3      	ldrb	r3, [r2, r3]
    3902:	2b00      	cmp	r3, #0
    3904:	d0f3      	beq.n	38ee <z_time_slice+0x22>
    3906:	4620      	mov	r0, r4
    3908:	f7ff fece 	bl	36a8 <sliceable>
    390c:	2800      	cmp	r0, #0
    390e:	d0ee      	beq.n	38ee <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
    3910:	7b63      	ldrb	r3, [r4, #13]
    3912:	06db      	lsls	r3, r3, #27
    3914:	d102      	bne.n	391c <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
    3916:	4620      	mov	r0, r4
    3918:	f7ff ff3a 	bl	3790 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    391c:	4620      	mov	r0, r4
    391e:	e7e4      	b.n	38ea <z_time_slice+0x1e>
    3920:	20000368 	.word	0x20000368
    3924:	2000038c 	.word	0x2000038c
    3928:	200007b1 	.word	0x200007b1

0000392c <z_pend_curr>:
{
    392c:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    392e:	480c      	ldr	r0, [pc, #48]	; (3960 <z_pend_curr+0x34>)
    3930:	4d0c      	ldr	r5, [pc, #48]	; (3964 <z_pend_curr+0x38>)
    3932:	6886      	ldr	r6, [r0, #8]
    3934:	602e      	str	r6, [r5, #0]
{
    3936:	460c      	mov	r4, r1
    3938:	4611      	mov	r1, r2
    393a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    393e:	f04f 0620 	mov.w	r6, #32
    3942:	f3ef 8511 	mrs	r5, BASEPRI
    3946:	f386 8812 	msr	BASEPRI_MAX, r6
    394a:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    394e:	6880      	ldr	r0, [r0, #8]
    3950:	f7ff ffa4 	bl	389c <pend_locked>
	ret = arch_swap(key);
    3954:	4620      	mov	r0, r4
}
    3956:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    395a:	f7fd bc71 	b.w	1240 <arch_swap>
    395e:	bf00      	nop
    3960:	20000368 	.word	0x20000368
    3964:	2000038c 	.word	0x2000038c

00003968 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3968:	b949      	cbnz	r1, 397e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    396a:	f3ef 8005 	mrs	r0, IPSR
    396e:	b930      	cbnz	r0, 397e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    3970:	4b05      	ldr	r3, [pc, #20]	; (3988 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    3972:	699a      	ldr	r2, [r3, #24]
    3974:	689b      	ldr	r3, [r3, #8]
    3976:	429a      	cmp	r2, r3
    3978:	d001      	beq.n	397e <z_reschedule+0x16>
    397a:	f7fd bc61 	b.w	1240 <arch_swap>
	__asm__ volatile(
    397e:	f381 8811 	msr	BASEPRI, r1
    3982:	f3bf 8f6f 	isb	sy
}
    3986:	4770      	bx	lr
    3988:	20000368 	.word	0x20000368

0000398c <z_sched_start>:
{
    398c:	b510      	push	{r4, lr}
	__asm__ volatile(
    398e:	f04f 0220 	mov.w	r2, #32
    3992:	f3ef 8411 	mrs	r4, BASEPRI
    3996:	f382 8812 	msr	BASEPRI_MAX, r2
    399a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    399e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    39a0:	0751      	lsls	r1, r2, #29
    39a2:	d404      	bmi.n	39ae <z_sched_start+0x22>
	__asm__ volatile(
    39a4:	f384 8811 	msr	BASEPRI, r4
    39a8:	f3bf 8f6f 	isb	sy
}
    39ac:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    39ae:	f022 0204 	bic.w	r2, r2, #4
    39b2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    39b4:	f7ff ff26 	bl	3804 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    39b8:	4621      	mov	r1, r4
    39ba:	4802      	ldr	r0, [pc, #8]	; (39c4 <z_sched_start+0x38>)
}
    39bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    39c0:	f7ff bfd2 	b.w	3968 <z_reschedule>
    39c4:	200007b2 	.word	0x200007b2

000039c8 <z_impl_k_thread_suspend>:
{
    39c8:	b570      	push	{r4, r5, r6, lr}
    39ca:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    39cc:	3018      	adds	r0, #24
    39ce:	f000 ffa9 	bl	4924 <z_abort_timeout>
	__asm__ volatile(
    39d2:	f04f 0320 	mov.w	r3, #32
    39d6:	f3ef 8611 	mrs	r6, BASEPRI
    39da:	f383 8812 	msr	BASEPRI_MAX, r3
    39de:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    39e2:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    39e6:	7b63      	ldrb	r3, [r4, #13]
    39e8:	2a00      	cmp	r2, #0
    39ea:	da05      	bge.n	39f8 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    39ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    39f0:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    39f2:	4620      	mov	r0, r4
    39f4:	f000 fef4 	bl	47e0 <sys_dlist_remove>
		update_cache(thread == _current);
    39f8:	4d0b      	ldr	r5, [pc, #44]	; (3a28 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    39fa:	7b63      	ldrb	r3, [r4, #13]
    39fc:	68a8      	ldr	r0, [r5, #8]
    39fe:	f043 0310 	orr.w	r3, r3, #16
    3a02:	7363      	strb	r3, [r4, #13]
    3a04:	1b03      	subs	r3, r0, r4
    3a06:	4258      	negs	r0, r3
    3a08:	4158      	adcs	r0, r3
    3a0a:	f7ff fea3 	bl	3754 <update_cache>
	__asm__ volatile(
    3a0e:	f386 8811 	msr	BASEPRI, r6
    3a12:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    3a16:	68ab      	ldr	r3, [r5, #8]
    3a18:	42a3      	cmp	r3, r4
    3a1a:	d103      	bne.n	3a24 <z_impl_k_thread_suspend+0x5c>
}
    3a1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    3a20:	f000 bf76 	b.w	4910 <z_reschedule_unlocked>
}
    3a24:	bd70      	pop	{r4, r5, r6, pc}
    3a26:	bf00      	nop
    3a28:	20000368 	.word	0x20000368

00003a2c <k_sched_lock>:
	__asm__ volatile(
    3a2c:	f04f 0320 	mov.w	r3, #32
    3a30:	f3ef 8111 	mrs	r1, BASEPRI
    3a34:	f383 8812 	msr	BASEPRI_MAX, r3
    3a38:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    3a3c:	4b04      	ldr	r3, [pc, #16]	; (3a50 <k_sched_lock+0x24>)
    3a3e:	689a      	ldr	r2, [r3, #8]
    3a40:	7bd3      	ldrb	r3, [r2, #15]
    3a42:	3b01      	subs	r3, #1
    3a44:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    3a46:	f381 8811 	msr	BASEPRI, r1
    3a4a:	f3bf 8f6f 	isb	sy
}
    3a4e:	4770      	bx	lr
    3a50:	20000368 	.word	0x20000368

00003a54 <k_sched_unlock>:
{
    3a54:	b510      	push	{r4, lr}
	__asm__ volatile(
    3a56:	f04f 0320 	mov.w	r3, #32
    3a5a:	f3ef 8411 	mrs	r4, BASEPRI
    3a5e:	f383 8812 	msr	BASEPRI_MAX, r3
    3a62:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    3a66:	4b08      	ldr	r3, [pc, #32]	; (3a88 <k_sched_unlock+0x34>)
    3a68:	689a      	ldr	r2, [r3, #8]
    3a6a:	7bd3      	ldrb	r3, [r2, #15]
    3a6c:	3301      	adds	r3, #1
    3a6e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    3a70:	2000      	movs	r0, #0
    3a72:	f7ff fe6f 	bl	3754 <update_cache>
	__asm__ volatile(
    3a76:	f384 8811 	msr	BASEPRI, r4
    3a7a:	f3bf 8f6f 	isb	sy
}
    3a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    3a82:	f000 bf45 	b.w	4910 <z_reschedule_unlocked>
    3a86:	bf00      	nop
    3a88:	20000368 	.word	0x20000368

00003a8c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    3a8c:	4b02      	ldr	r3, [pc, #8]	; (3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>)
    3a8e:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    3a92:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    3a96:	4770      	bx	lr
    3a98:	20000368 	.word	0x20000368

00003a9c <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    3a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    3a9e:	f04f 0320 	mov.w	r3, #32
    3aa2:	f3ef 8511 	mrs	r5, BASEPRI
    3aa6:	f383 8812 	msr	BASEPRI_MAX, r3
    3aaa:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    3aae:	4919      	ldr	r1, [pc, #100]	; (3b14 <z_impl_k_yield+0x78>)
    3ab0:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3ab2:	7b43      	ldrb	r3, [r0, #13]
    3ab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3ab8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3aba:	f000 fe91 	bl	47e0 <sys_dlist_remove>
	}
	queue_thread(_current);
    3abe:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    3ac0:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    3ac2:	4608      	mov	r0, r1
    3ac4:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3ac8:	735a      	strb	r2, [r3, #13]
    3aca:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
    3ace:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3ad0:	4282      	cmp	r2, r0
    3ad2:	bf08      	it	eq
    3ad4:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3ad6:	b922      	cbnz	r2, 3ae2 <z_impl_k_yield+0x46>
	node->prev = tail;
    3ad8:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    3adc:	6023      	str	r3, [r4, #0]
	list->tail = node;
    3ade:	620b      	str	r3, [r1, #32]
}
    3ae0:	e00c      	b.n	3afc <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    3ae2:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    3ae6:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    3aea:	42be      	cmp	r6, r7
    3aec:	d00e      	beq.n	3b0c <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3aee:	42b7      	cmp	r7, r6
    3af0:	dd0c      	ble.n	3b0c <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    3af2:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    3af4:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    3af8:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    3afa:	6053      	str	r3, [r2, #4]
	update_cache(1);
    3afc:	2001      	movs	r0, #1
    3afe:	f7ff fe29 	bl	3754 <update_cache>
    3b02:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    3b04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3b08:	f7fd bb9a 	b.w	1240 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    3b0c:	42a2      	cmp	r2, r4
    3b0e:	d0e3      	beq.n	3ad8 <z_impl_k_yield+0x3c>
    3b10:	6812      	ldr	r2, [r2, #0]
    3b12:	e7e0      	b.n	3ad6 <z_impl_k_yield+0x3a>
    3b14:	20000368 	.word	0x20000368

00003b18 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    3b18:	ea50 0301 	orrs.w	r3, r0, r1
{
    3b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b20:	4605      	mov	r5, r0
    3b22:	460e      	mov	r6, r1
	if (ticks == 0) {
    3b24:	d103      	bne.n	3b2e <z_tick_sleep+0x16>
	z_impl_k_yield();
    3b26:	f7ff ffb9 	bl	3a9c <z_impl_k_yield>
		k_yield();
		return 0;
    3b2a:	2000      	movs	r0, #0
    3b2c:	e02c      	b.n	3b88 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    3b2e:	1c83      	adds	r3, r0, #2
    3b30:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    3b34:	db2a      	blt.n	3b8c <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    3b36:	f000 ff1b 	bl	4970 <sys_clock_tick_get_32>
    3b3a:	182c      	adds	r4, r5, r0
    3b3c:	f04f 0320 	mov.w	r3, #32
    3b40:	f3ef 8811 	mrs	r8, BASEPRI
    3b44:	f383 8812 	msr	BASEPRI_MAX, r3
    3b48:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    3b4c:	4f11      	ldr	r7, [pc, #68]	; (3b94 <z_tick_sleep+0x7c>)
    3b4e:	4b12      	ldr	r3, [pc, #72]	; (3b98 <z_tick_sleep+0x80>)
    3b50:	68b8      	ldr	r0, [r7, #8]
    3b52:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    3b54:	f7ff fe8a 	bl	386c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    3b58:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3b5a:	4910      	ldr	r1, [pc, #64]	; (3b9c <z_tick_sleep+0x84>)
    3b5c:	462a      	mov	r2, r5
    3b5e:	4633      	mov	r3, r6
    3b60:	3018      	adds	r0, #24
    3b62:	f000 f8fd 	bl	3d60 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    3b66:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    3b68:	7b53      	ldrb	r3, [r2, #13]
    3b6a:	f043 0310 	orr.w	r3, r3, #16
    3b6e:	7353      	strb	r3, [r2, #13]
    3b70:	4640      	mov	r0, r8
    3b72:	f7fd fb65 	bl	1240 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    3b76:	f000 fefb 	bl	4970 <sys_clock_tick_get_32>
    3b7a:	1a20      	subs	r0, r4, r0
    3b7c:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    3b80:	2801      	cmp	r0, #1
    3b82:	f173 0300 	sbcs.w	r3, r3, #0
    3b86:	dbd0      	blt.n	3b2a <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    3b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    3b8c:	f06f 0401 	mvn.w	r4, #1
    3b90:	1a24      	subs	r4, r4, r0
    3b92:	e7d3      	b.n	3b3c <z_tick_sleep+0x24>
    3b94:	20000368 	.word	0x20000368
    3b98:	2000038c 	.word	0x2000038c
    3b9c:	000048b9 	.word	0x000048b9

00003ba0 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3ba0:	f1b1 3fff 	cmp.w	r1, #4294967295
    3ba4:	bf08      	it	eq
    3ba6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    3baa:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3bac:	d106      	bne.n	3bbc <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    3bae:	4b08      	ldr	r3, [pc, #32]	; (3bd0 <z_impl_k_sleep+0x30>)
    3bb0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    3bb2:	f7ff ff09 	bl	39c8 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    3bb6:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    3bba:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    3bbc:	f7ff ffac 	bl	3b18 <z_tick_sleep>
    3bc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3bc4:	fb80 0303 	smull	r0, r3, r0, r3
    3bc8:	0bc0      	lsrs	r0, r0, #15
    3bca:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    3bce:	e7f4      	b.n	3bba <z_impl_k_sleep+0x1a>
    3bd0:	20000368 	.word	0x20000368

00003bd4 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    3bd4:	4b01      	ldr	r3, [pc, #4]	; (3bdc <z_impl_z_current_get+0x8>)
    3bd6:	6898      	ldr	r0, [r3, #8]
    3bd8:	4770      	bx	lr
    3bda:	bf00      	nop
    3bdc:	20000368 	.word	0x20000368

00003be0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    3be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3be4:	4604      	mov	r4, r0
    3be6:	f04f 0320 	mov.w	r3, #32
    3bea:	f3ef 8611 	mrs	r6, BASEPRI
    3bee:	f383 8812 	msr	BASEPRI_MAX, r3
    3bf2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    3bf6:	7b03      	ldrb	r3, [r0, #12]
    3bf8:	07d9      	lsls	r1, r3, #31
    3bfa:	d50b      	bpl.n	3c14 <z_thread_abort+0x34>
	__asm__ volatile(
    3bfc:	f386 8811 	msr	BASEPRI, r6
    3c00:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    3c04:	4040      	eors	r0, r0
    3c06:	f380 8811 	msr	BASEPRI, r0
    3c0a:	f04f 0004 	mov.w	r0, #4
    3c0e:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    3c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    3c14:	7b43      	ldrb	r3, [r0, #13]
    3c16:	071a      	lsls	r2, r3, #28
    3c18:	d504      	bpl.n	3c24 <z_thread_abort+0x44>
    3c1a:	f386 8811 	msr	BASEPRI, r6
    3c1e:	f3bf 8f6f 	isb	sy
    3c22:	e7f5      	b.n	3c10 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    3c24:	f023 0220 	bic.w	r2, r3, #32
    3c28:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    3c2c:	09d2      	lsrs	r2, r2, #7
    3c2e:	d120      	bne.n	3c72 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    3c30:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    3c32:	68a3      	ldr	r3, [r4, #8]
    3c34:	b113      	cbz	r3, 3c3c <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    3c36:	4620      	mov	r0, r4
    3c38:	f000 fdda 	bl	47f0 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    3c3c:	f104 0018 	add.w	r0, r4, #24
    3c40:	f000 fe70 	bl	4924 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    3c44:	f104 0758 	add.w	r7, r4, #88	; 0x58
    3c48:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    3c4c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3c4e:	42bd      	cmp	r5, r7
    3c50:	d000      	beq.n	3c54 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    3c52:	b9b5      	cbnz	r5, 3c82 <z_thread_abort+0xa2>
		update_cache(1);
    3c54:	2001      	movs	r0, #1
    3c56:	f7ff fd7d 	bl	3754 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    3c5a:	4b10      	ldr	r3, [pc, #64]	; (3c9c <z_thread_abort+0xbc>)
    3c5c:	689b      	ldr	r3, [r3, #8]
    3c5e:	42a3      	cmp	r3, r4
    3c60:	d1db      	bne.n	3c1a <z_thread_abort+0x3a>
    3c62:	f3ef 8305 	mrs	r3, IPSR
    3c66:	2b00      	cmp	r3, #0
    3c68:	d1d7      	bne.n	3c1a <z_thread_abort+0x3a>
    3c6a:	4630      	mov	r0, r6
    3c6c:	f7fd fae8 	bl	1240 <arch_swap>
	return ret;
    3c70:	e7d3      	b.n	3c1a <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3c72:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    3c76:	f043 0308 	orr.w	r3, r3, #8
    3c7a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3c7c:	f000 fdb0 	bl	47e0 <sys_dlist_remove>
}
    3c80:	e7d7      	b.n	3c32 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    3c82:	4628      	mov	r0, r5
    3c84:	f000 fdb4 	bl	47f0 <unpend_thread_no_timeout>
    3c88:	f105 0018 	add.w	r0, r5, #24
    3c8c:	f000 fe4a 	bl	4924 <z_abort_timeout>
    3c90:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    3c94:	4628      	mov	r0, r5
    3c96:	f7ff fdb5 	bl	3804 <ready_thread>
    3c9a:	e7d7      	b.n	3c4c <z_thread_abort+0x6c>
    3c9c:	20000368 	.word	0x20000368

00003ca0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    3ca0:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    3ca2:	4806      	ldr	r0, [pc, #24]	; (3cbc <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    3ca4:	4a06      	ldr	r2, [pc, #24]	; (3cc0 <z_data_copy+0x20>)
    3ca6:	4907      	ldr	r1, [pc, #28]	; (3cc4 <z_data_copy+0x24>)
    3ca8:	1a12      	subs	r2, r2, r0
    3caa:	f000 fd8a 	bl	47c2 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    3cae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    3cb2:	4a05      	ldr	r2, [pc, #20]	; (3cc8 <z_data_copy+0x28>)
    3cb4:	4905      	ldr	r1, [pc, #20]	; (3ccc <z_data_copy+0x2c>)
    3cb6:	4806      	ldr	r0, [pc, #24]	; (3cd0 <z_data_copy+0x30>)
    3cb8:	f000 bd83 	b.w	47c2 <z_early_memcpy>
    3cbc:	20000000 	.word	0x20000000
    3cc0:	20000096 	.word	0x20000096
    3cc4:	00004e20 	.word	0x00004e20
    3cc8:	00000000 	.word	0x00000000
    3ccc:	00004e20 	.word	0x00004e20
    3cd0:	20000000 	.word	0x20000000

00003cd4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    3cd4:	4b03      	ldr	r3, [pc, #12]	; (3ce4 <elapsed+0x10>)
    3cd6:	681b      	ldr	r3, [r3, #0]
    3cd8:	b90b      	cbnz	r3, 3cde <elapsed+0xa>
    3cda:	f7fe bcf9 	b.w	26d0 <sys_clock_elapsed>
}
    3cde:	2000      	movs	r0, #0
    3ce0:	4770      	bx	lr
    3ce2:	bf00      	nop
    3ce4:	20000398 	.word	0x20000398

00003ce8 <next_timeout>:

static int32_t next_timeout(void)
{
    3ce8:	b510      	push	{r4, lr}
	return list->head == list;
    3cea:	4b0e      	ldr	r3, [pc, #56]	; (3d24 <next_timeout+0x3c>)
    3cec:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3cee:	429c      	cmp	r4, r3
    3cf0:	d104      	bne.n	3cfc <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    3cf2:	f7ff ffef 	bl	3cd4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    3cf6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    3cfa:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    3cfc:	f7ff ffea 	bl	3cd4 <elapsed>
	if ((to == NULL) ||
    3d00:	2c00      	cmp	r4, #0
    3d02:	d0f8      	beq.n	3cf6 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    3d04:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    3d08:	1a1b      	subs	r3, r3, r0
    3d0a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    3d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    3d12:	f172 0100 	sbcs.w	r1, r2, #0
    3d16:	daee      	bge.n	3cf6 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    3d18:	2a00      	cmp	r2, #0
    3d1a:	bfac      	ite	ge
    3d1c:	4618      	movge	r0, r3
    3d1e:	2000      	movlt	r0, #0
	return ret;
    3d20:	e7eb      	b.n	3cfa <next_timeout+0x12>
    3d22:	bf00      	nop
    3d24:	20000088 	.word	0x20000088

00003d28 <remove_timeout>:
{
    3d28:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3d2a:	b170      	cbz	r0, 3d4a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    3d2c:	4b0b      	ldr	r3, [pc, #44]	; (3d5c <remove_timeout+0x34>)
    3d2e:	685b      	ldr	r3, [r3, #4]
    3d30:	4298      	cmp	r0, r3
    3d32:	d00a      	beq.n	3d4a <remove_timeout+0x22>
    3d34:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    3d36:	b143      	cbz	r3, 3d4a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    3d38:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    3d3c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    3d40:	1912      	adds	r2, r2, r4
    3d42:	eb41 0105 	adc.w	r1, r1, r5
    3d46:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    3d4a:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    3d4e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    3d50:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3d52:	2300      	movs	r3, #0
	node->prev = NULL;
    3d54:	e9c0 3300 	strd	r3, r3, [r0]
}
    3d58:	bd30      	pop	{r4, r5, pc}
    3d5a:	bf00      	nop
    3d5c:	20000088 	.word	0x20000088

00003d60 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3d60:	f1b3 3fff 	cmp.w	r3, #4294967295
    3d64:	bf08      	it	eq
    3d66:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    3d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d6c:	4604      	mov	r4, r0
    3d6e:	461d      	mov	r5, r3
    3d70:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3d72:	d05c      	beq.n	3e2e <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    3d74:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    3d76:	f04f 0320 	mov.w	r3, #32
    3d7a:	f3ef 8711 	mrs	r7, BASEPRI
    3d7e:	f383 8812 	msr	BASEPRI_MAX, r3
    3d82:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    3d86:	3201      	adds	r2, #1
    3d88:	f175 33ff 	sbcs.w	r3, r5, #4294967295
    3d8c:	da24      	bge.n	3dd8 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    3d8e:	492d      	ldr	r1, [pc, #180]	; (3e44 <z_add_timeout+0xe4>)
    3d90:	e9d1 2000 	ldrd	r2, r0, [r1]
    3d94:	f06f 0301 	mvn.w	r3, #1
    3d98:	1a9b      	subs	r3, r3, r2
    3d9a:	f04f 32ff 	mov.w	r2, #4294967295
    3d9e:	eb62 0000 	sbc.w	r0, r2, r0
    3da2:	1b9e      	subs	r6, r3, r6
    3da4:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    3da8:	2e01      	cmp	r6, #1
    3daa:	f170 0300 	sbcs.w	r3, r0, #0
    3dae:	da01      	bge.n	3db4 <z_add_timeout+0x54>
    3db0:	2601      	movs	r6, #1
    3db2:	2000      	movs	r0, #0
    3db4:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    3db8:	4e23      	ldr	r6, [pc, #140]	; (3e48 <z_add_timeout+0xe8>)
    3dba:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    3dbe:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3dc0:	45b4      	cmp	ip, r6
    3dc2:	bf08      	it	eq
    3dc4:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    3dc8:	f1bc 0f00 	cmp.w	ip, #0
    3dcc:	d10d      	bne.n	3dea <z_add_timeout+0x8a>
	node->prev = tail;
    3dce:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    3dd2:	602c      	str	r4, [r5, #0]
	list->tail = node;
    3dd4:	6074      	str	r4, [r6, #4]
}
    3dd6:	e01c      	b.n	3e12 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    3dd8:	f7ff ff7c 	bl	3cd4 <elapsed>
    3ddc:	3601      	adds	r6, #1
    3dde:	f145 0500 	adc.w	r5, r5, #0
    3de2:	1836      	adds	r6, r6, r0
    3de4:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    3de8:	e7e4      	b.n	3db4 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    3dea:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    3dee:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    3df2:	4293      	cmp	r3, r2
    3df4:	eb71 0e00 	sbcs.w	lr, r1, r0
    3df8:	da1a      	bge.n	3e30 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    3dfa:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    3dfc:	f8dc 3004 	ldr.w	r3, [ip, #4]
    3e00:	eb60 0001 	sbc.w	r0, r0, r1
    3e04:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    3e08:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    3e0c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    3e0e:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    3e12:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3e14:	42b3      	cmp	r3, r6
    3e16:	d006      	beq.n	3e26 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    3e18:	429c      	cmp	r4, r3
    3e1a:	d104      	bne.n	3e26 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
    3e1c:	f7ff ff64 	bl	3ce8 <next_timeout>
    3e20:	2100      	movs	r1, #0
    3e22:	f7fe fc23 	bl	266c <sys_clock_set_timeout>
	__asm__ volatile(
    3e26:	f387 8811 	msr	BASEPRI, r7
    3e2a:	f3bf 8f6f 	isb	sy
		}
	}
}
    3e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    3e30:	1a9b      	subs	r3, r3, r2
    3e32:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    3e36:	45ac      	cmp	ip, r5
    3e38:	e9c4 3104 	strd	r3, r1, [r4, #16]
    3e3c:	d0c7      	beq.n	3dce <z_add_timeout+0x6e>
    3e3e:	f8dc c000 	ldr.w	ip, [ip]
    3e42:	e7c1      	b.n	3dc8 <z_add_timeout+0x68>
    3e44:	200001d0 	.word	0x200001d0
    3e48:	20000088 	.word	0x20000088

00003e4c <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    3e4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    3e50:	f04f 0320 	mov.w	r3, #32
    3e54:	f3ef 8c11 	mrs	ip, BASEPRI
    3e58:	f383 8812 	msr	BASEPRI_MAX, r3
    3e5c:	f3bf 8f6f 	isb	sy
	return list->head == list;
    3e60:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 3f14 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    3e64:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 3f18 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
    3e68:	4f2c      	ldr	r7, [pc, #176]	; (3f1c <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
    3e6a:	f8c9 0000 	str.w	r0, [r9]
    3e6e:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    3e72:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3e74:	4550      	cmp	r0, sl
    3e76:	bf08      	it	eq
    3e78:	2000      	moveq	r0, #0
    3e7a:	2500      	movs	r5, #0
		curr_tick += dt;
    3e7c:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    3e80:	f8d9 3000 	ldr.w	r3, [r9]
    3e84:	46e0      	mov	r8, ip
    3e86:	b380      	cbz	r0, 3eea <sys_clock_announce+0x9e>
    3e88:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    3e8c:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    3e90:	42b3      	cmp	r3, r6
    3e92:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    3e96:	da05      	bge.n	3ea4 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    3e98:	1af6      	subs	r6, r6, r3
    3e9a:	eb6c 040e 	sbc.w	r4, ip, lr
    3e9e:	e9c0 6404 	strd	r6, r4, [r0, #16]
    3ea2:	e022      	b.n	3eea <sys_clock_announce+0x9e>
		curr_tick += dt;
    3ea4:	18b2      	adds	r2, r6, r2
    3ea6:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    3eaa:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    3eae:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    3eb2:	f7ff ff39 	bl	3d28 <remove_timeout>
	__asm__ volatile(
    3eb6:	f388 8811 	msr	BASEPRI, r8
    3eba:	f3bf 8f6f 	isb	sy
		t->fn(t);
    3ebe:	6883      	ldr	r3, [r0, #8]
    3ec0:	4798      	blx	r3
	__asm__ volatile(
    3ec2:	f04f 0320 	mov.w	r3, #32
    3ec6:	f3ef 8811 	mrs	r8, BASEPRI
    3eca:	f383 8812 	msr	BASEPRI_MAX, r3
    3ece:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    3ed2:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    3ed6:	f8da 0000 	ldr.w	r0, [sl]
    3eda:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3edc:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    3ede:	46c4      	mov	ip, r8
    3ee0:	f8c9 3000 	str.w	r3, [r9]
    3ee4:	d1ca      	bne.n	3e7c <sys_clock_announce+0x30>
		curr_tick += dt;
    3ee6:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
    3eea:	189a      	adds	r2, r3, r2
    3eec:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
    3ef0:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    3ef2:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    3ef6:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    3efa:	f7ff fef5 	bl	3ce8 <next_timeout>
    3efe:	4621      	mov	r1, r4
    3f00:	f7fe fbb4 	bl	266c <sys_clock_set_timeout>
	__asm__ volatile(
    3f04:	f388 8811 	msr	BASEPRI, r8
    3f08:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    3f0c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
    3f10:	f7ff bcdc 	b.w	38cc <z_time_slice>
    3f14:	20000088 	.word	0x20000088
    3f18:	20000398 	.word	0x20000398
    3f1c:	200001d0 	.word	0x200001d0

00003f20 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    3f20:	b510      	push	{r4, lr}
	__asm__ volatile(
    3f22:	f04f 0320 	mov.w	r3, #32
    3f26:	f3ef 8411 	mrs	r4, BASEPRI
    3f2a:	f383 8812 	msr	BASEPRI_MAX, r3
    3f2e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    3f32:	f7ff fecf 	bl	3cd4 <elapsed>
    3f36:	4a06      	ldr	r2, [pc, #24]	; (3f50 <sys_clock_tick_get+0x30>)
    3f38:	4603      	mov	r3, r0
    3f3a:	e9d2 0100 	ldrd	r0, r1, [r2]
    3f3e:	1818      	adds	r0, r3, r0
    3f40:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    3f44:	f384 8811 	msr	BASEPRI, r4
    3f48:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    3f4c:	bd10      	pop	{r4, pc}
    3f4e:	bf00      	nop
    3f50:	200001d0 	.word	0x200001d0

00003f54 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    3f54:	4801      	ldr	r0, [pc, #4]	; (3f5c <boot_banner+0x8>)
    3f56:	f000 b838 	b.w	3fca <printk>
    3f5a:	bf00      	nop
    3f5c:	00004def 	.word	0x00004def

00003f60 <gpio_pin_configure_dt>:
{
    3f60:	b470      	push	{r4, r5, r6}
    3f62:	4603      	mov	r3, r0
    3f64:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
    3f66:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    3f68:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
    3f6a:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
    3f6c:	4322      	orrs	r2, r4
	struct gpio_driver_data *data =
    3f6e:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
    3f70:	6886      	ldr	r6, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    3f72:	682b      	ldr	r3, [r5, #0]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    3f74:	2401      	movs	r4, #1
    3f76:	408c      	lsls	r4, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    3f78:	f012 0f01 	tst.w	r2, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
    3f7c:	bf14      	ite	ne
    3f7e:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    3f80:	43a3      	biceq	r3, r4
    3f82:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
    3f84:	6833      	ldr	r3, [r6, #0]
}
    3f86:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
    3f88:	4718      	bx	r3

00003f8a <gpio_pin_toggle_dt>:
{
    3f8a:	4603      	mov	r3, r0
	return gpio_port_toggle_bits(port, (gpio_port_pins_t)BIT(pin));
    3f8c:	2101      	movs	r1, #1
    3f8e:	791b      	ldrb	r3, [r3, #4]
	return gpio_pin_toggle(spec->port, spec->pin);
    3f90:	6800      	ldr	r0, [r0, #0]
	return gpio_port_toggle_bits(port, (gpio_port_pins_t)BIT(pin));
    3f92:	4099      	lsls	r1, r3
	return api->port_toggle_bits(port, pins);
    3f94:	6883      	ldr	r3, [r0, #8]
    3f96:	695b      	ldr	r3, [r3, #20]
    3f98:	4718      	bx	r3

00003f9a <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>:
static inline int gpio_pin_interrupt_configure_dt(const struct gpio_dt_spec *spec,
    3f9a:	b410      	push	{r4}
    3f9c:	4603      	mov	r3, r0
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
    3f9e:	6800      	ldr	r0, [r0, #0]
    3fa0:	7919      	ldrb	r1, [r3, #4]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    3fa2:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
    3fa4:	6882      	ldr	r2, [r0, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    3fa6:	6824      	ldr	r4, [r4, #0]
    3fa8:	2301      	movs	r3, #1
    3faa:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    3fac:	4223      	tst	r3, r4
	return api->pin_interrupt_configure(port, pin, mode, trig);
    3fae:	6994      	ldr	r4, [r2, #24]
    3fb0:	bf18      	it	ne
    3fb2:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
    3fb6:	46a4      	mov	ip, r4
    3fb8:	bf08      	it	eq
    3fba:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
}
    3fbe:	bc10      	pop	{r4}
	return api->pin_interrupt_configure(port, pin, mode, trig);
    3fc0:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
    3fc4:	4760      	bx	ip

00003fc6 <arch_printk_char_out>:
}
    3fc6:	2000      	movs	r0, #0
    3fc8:	4770      	bx	lr

00003fca <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    3fca:	b40f      	push	{r0, r1, r2, r3}
    3fcc:	b507      	push	{r0, r1, r2, lr}
    3fce:	a904      	add	r1, sp, #16
    3fd0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    3fd4:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    3fd6:	f7fc fab7 	bl	548 <vprintk>

	va_end(ap);
}
    3fda:	b003      	add	sp, #12
    3fdc:	f85d eb04 	ldr.w	lr, [sp], #4
    3fe0:	b004      	add	sp, #16
    3fe2:	4770      	bx	lr

00003fe4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    3fe4:	4604      	mov	r4, r0
    3fe6:	b508      	push	{r3, lr}
    3fe8:	4608      	mov	r0, r1
    3fea:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    3fec:	461a      	mov	r2, r3
    3fee:	47a0      	blx	r4
	return z_impl_z_current_get();
    3ff0:	f7ff fdf0 	bl	3bd4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    3ff4:	f7fd fbb8 	bl	1768 <z_impl_k_thread_abort>

00003ff8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3ff8:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    3ffa:	f013 0307 	ands.w	r3, r3, #7
    3ffe:	d105      	bne.n	400c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc>
	    && !sys_slist_is_empty(&mgr->clients)) {
    4000:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    4002:	2b00      	cmp	r3, #0
    4004:	bf0c      	ite	eq
    4006:	2000      	moveq	r0, #0
    4008:	2003      	movne	r0, #3
    400a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    400c:	2b02      	cmp	r3, #2
    400e:	d105      	bne.n	401c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c>
		   && (mgr->refs == 0U)) {
    4010:	8b40      	ldrh	r0, [r0, #26]
    4012:	fab0 f080 	clz	r0, r0
    4016:	0940      	lsrs	r0, r0, #5
    4018:	0080      	lsls	r0, r0, #2
    401a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    401c:	2b01      	cmp	r3, #1
    401e:	d105      	bne.n	402c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2c>
		   && !sys_slist_is_empty(&mgr->clients)) {
    4020:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    4022:	2b00      	cmp	r3, #0
    4024:	bf0c      	ite	eq
    4026:	2000      	moveq	r0, #0
    4028:	2005      	movne	r0, #5
    402a:	4770      	bx	lr
	int evt = EVT_NOP;
    402c:	2000      	movs	r0, #0
}
    402e:	4770      	bx	lr

00004030 <validate_args>:
{
    4030:	b510      	push	{r4, lr}
    4032:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    4034:	b100      	cbz	r0, 4038 <validate_args+0x8>
    4036:	b911      	cbnz	r1, 403e <validate_args+0xe>
		return -EINVAL;
    4038:	f06f 0015 	mvn.w	r0, #21
}
    403c:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    403e:	1d08      	adds	r0, r1, #4
    4040:	f000 f895 	bl	416e <sys_notify_validate>
	if ((rv == 0)
    4044:	2800      	cmp	r0, #0
    4046:	d1f9      	bne.n	403c <validate_args+0xc>
	    && ((cli->notify.flags
    4048:	68a3      	ldr	r3, [r4, #8]
    404a:	2b03      	cmp	r3, #3
    404c:	d9f6      	bls.n	403c <validate_args+0xc>
    404e:	e7f3      	b.n	4038 <validate_args+0x8>

00004050 <notify_one>:
{
    4050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4054:	460d      	mov	r5, r1
    4056:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4058:	4619      	mov	r1, r3
    405a:	1d28      	adds	r0, r5, #4
{
    405c:	4690      	mov	r8, r2
    405e:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4060:	f000 f896 	bl	4190 <sys_notify_finalize>
	if (cb) {
    4064:	4604      	mov	r4, r0
    4066:	b138      	cbz	r0, 4078 <notify_one+0x28>
		cb(mgr, cli, state, res);
    4068:	4633      	mov	r3, r6
    406a:	4642      	mov	r2, r8
    406c:	4629      	mov	r1, r5
    406e:	4638      	mov	r0, r7
    4070:	46a4      	mov	ip, r4
}
    4072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    4076:	4760      	bx	ip
}
    4078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000407c <transition_complete>:
{
    407c:	b410      	push	{r4}
	__asm__ volatile(
    407e:	f04f 0420 	mov.w	r4, #32
    4082:	f3ef 8211 	mrs	r2, BASEPRI
    4086:	f384 8812 	msr	BASEPRI_MAX, r4
    408a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    408e:	6141      	str	r1, [r0, #20]
}
    4090:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    4092:	2101      	movs	r1, #1
    4094:	f7fc ba66 	b.w	564 <process_event>

00004098 <onoff_manager_init>:
{
    4098:	b538      	push	{r3, r4, r5, lr}
    409a:	460c      	mov	r4, r1
	if ((mgr == NULL)
    409c:	4605      	mov	r5, r0
    409e:	b158      	cbz	r0, 40b8 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    40a0:	b151      	cbz	r1, 40b8 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    40a2:	680b      	ldr	r3, [r1, #0]
    40a4:	b143      	cbz	r3, 40b8 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    40a6:	684b      	ldr	r3, [r1, #4]
    40a8:	b133      	cbz	r3, 40b8 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    40aa:	221c      	movs	r2, #28
    40ac:	2100      	movs	r1, #0
    40ae:	f000 f910 	bl	42d2 <memset>
    40b2:	612c      	str	r4, [r5, #16]
	return 0;
    40b4:	2000      	movs	r0, #0
}
    40b6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    40b8:	f06f 0015 	mvn.w	r0, #21
    40bc:	e7fb      	b.n	40b6 <onoff_manager_init+0x1e>

000040be <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    40be:	b570      	push	{r4, r5, r6, lr}
    40c0:	4605      	mov	r5, r0
    40c2:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    40c4:	f7ff ffb4 	bl	4030 <validate_args>

	if (rv < 0) {
    40c8:	1e04      	subs	r4, r0, #0
    40ca:	db15      	blt.n	40f8 <onoff_request+0x3a>
    40cc:	f04f 0320 	mov.w	r3, #32
    40d0:	f3ef 8211 	mrs	r2, BASEPRI
    40d4:	f383 8812 	msr	BASEPRI_MAX, r3
    40d8:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    40dc:	8b6b      	ldrh	r3, [r5, #26]
    40de:	8b2c      	ldrh	r4, [r5, #24]
    40e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    40e4:	428b      	cmp	r3, r1
    40e6:	f004 0407 	and.w	r4, r4, #7
    40ea:	d107      	bne.n	40fc <onoff_request+0x3e>
	__asm__ volatile(
    40ec:	f382 8811 	msr	BASEPRI, r2
    40f0:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    40f4:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    40f8:	4620      	mov	r0, r4
    40fa:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    40fc:	2c02      	cmp	r4, #2
    40fe:	d10c      	bne.n	411a <onoff_request+0x5c>
		mgr->refs += 1U;
    4100:	3301      	adds	r3, #1
    4102:	836b      	strh	r3, [r5, #26]
    4104:	f382 8811 	msr	BASEPRI, r2
    4108:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    410c:	2300      	movs	r3, #0
    410e:	4622      	mov	r2, r4
    4110:	4631      	mov	r1, r6
    4112:	4628      	mov	r0, r5
    4114:	f7ff ff9c 	bl	4050 <notify_one>
    4118:	e7ee      	b.n	40f8 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    411a:	2c06      	cmp	r4, #6
    411c:	d814      	bhi.n	4148 <onoff_request+0x8a>
    411e:	e8df f004 	tbb	[pc, r4]
    4122:	1304      	.short	0x1304
    4124:	1a041313 	.word	0x1a041313
    4128:	04          	.byte	0x04
    4129:	00          	.byte	0x00
	parent->next = child;
    412a:	2300      	movs	r3, #0
    412c:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    412e:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    4130:	b93b      	cbnz	r3, 4142 <onoff_request+0x84>
	list->head = node;
    4132:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    4136:	b9ac      	cbnz	r4, 4164 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    4138:	2102      	movs	r1, #2
    413a:	4628      	mov	r0, r5
    413c:	f7fc fa12 	bl	564 <process_event>
    4140:	e7da      	b.n	40f8 <onoff_request+0x3a>
	parent->next = child;
    4142:	601e      	str	r6, [r3, #0]
	list->tail = node;
    4144:	606e      	str	r6, [r5, #4]
}
    4146:	e7f6      	b.n	4136 <onoff_request+0x78>
    4148:	f382 8811 	msr	BASEPRI, r2
    414c:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    4150:	f06f 0404 	mvn.w	r4, #4
    4154:	e7d0      	b.n	40f8 <onoff_request+0x3a>
    4156:	f382 8811 	msr	BASEPRI, r2
    415a:	f3bf 8f6f 	isb	sy
    415e:	f06f 0485 	mvn.w	r4, #133	; 0x85
    4162:	e7c9      	b.n	40f8 <onoff_request+0x3a>
    4164:	f382 8811 	msr	BASEPRI, r2
    4168:	f3bf 8f6f 	isb	sy
		if (notify) {
    416c:	e7c4      	b.n	40f8 <onoff_request+0x3a>

0000416e <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    416e:	4603      	mov	r3, r0
    4170:	b158      	cbz	r0, 418a <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4172:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    4174:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    4178:	2a01      	cmp	r2, #1
    417a:	d003      	beq.n	4184 <sys_notify_validate+0x16>
    417c:	2a03      	cmp	r2, #3
    417e:	d104      	bne.n	418a <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    4180:	6802      	ldr	r2, [r0, #0]
    4182:	b112      	cbz	r2, 418a <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    4184:	2000      	movs	r0, #0
    4186:	6098      	str	r0, [r3, #8]
    4188:	4770      	bx	lr
    418a:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    418e:	4770      	bx	lr

00004190 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4190:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    4192:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    4194:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    4198:	2a03      	cmp	r2, #3
    419a:	f04f 0200 	mov.w	r2, #0
{
    419e:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    41a0:	bf0c      	ite	eq
    41a2:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    41a4:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    41a6:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    41a8:	4770      	bx	lr

000041aa <encode_uint>:
{
    41aa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41ae:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    41b0:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    41b2:	2b6f      	cmp	r3, #111	; 0x6f
{
    41b4:	4680      	mov	r8, r0
    41b6:	460f      	mov	r7, r1
    41b8:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    41ba:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    41be:	d029      	beq.n	4214 <encode_uint+0x6a>
    41c0:	d824      	bhi.n	420c <encode_uint+0x62>
		return 10;
    41c2:	2b58      	cmp	r3, #88	; 0x58
    41c4:	bf0c      	ite	eq
    41c6:	2610      	moveq	r6, #16
    41c8:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    41ca:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    41ce:	4632      	mov	r2, r6
    41d0:	2300      	movs	r3, #0
    41d2:	4640      	mov	r0, r8
    41d4:	4639      	mov	r1, r7
    41d6:	f7fb ff81 	bl	dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    41da:	2a09      	cmp	r2, #9
    41dc:	b2d4      	uxtb	r4, r2
    41de:	d81e      	bhi.n	421e <encode_uint+0x74>
    41e0:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    41e2:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    41e4:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    41e6:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    41ea:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    41ee:	d301      	bcc.n	41f4 <encode_uint+0x4a>
    41f0:	45d1      	cmp	r9, sl
    41f2:	d811      	bhi.n	4218 <encode_uint+0x6e>
	if (conv->flag_hash) {
    41f4:	782b      	ldrb	r3, [r5, #0]
    41f6:	069b      	lsls	r3, r3, #26
    41f8:	d505      	bpl.n	4206 <encode_uint+0x5c>
		if (radix == 8) {
    41fa:	2e08      	cmp	r6, #8
    41fc:	d115      	bne.n	422a <encode_uint+0x80>
			conv->altform_0 = true;
    41fe:	78ab      	ldrb	r3, [r5, #2]
    4200:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    4204:	70ab      	strb	r3, [r5, #2]
}
    4206:	4648      	mov	r0, r9
    4208:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    420c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    4210:	2b70      	cmp	r3, #112	; 0x70
    4212:	e7d7      	b.n	41c4 <encode_uint+0x1a>
	switch (specifier) {
    4214:	2608      	movs	r6, #8
    4216:	e7d8      	b.n	41ca <encode_uint+0x20>
		value /= radix;
    4218:	4680      	mov	r8, r0
    421a:	460f      	mov	r7, r1
    421c:	e7d7      	b.n	41ce <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    421e:	f1bb 0f19 	cmp.w	fp, #25
    4222:	bf94      	ite	ls
    4224:	3437      	addls	r4, #55	; 0x37
    4226:	3457      	addhi	r4, #87	; 0x57
    4228:	e7db      	b.n	41e2 <encode_uint+0x38>
		} else if (radix == 16) {
    422a:	2e10      	cmp	r6, #16
    422c:	d1eb      	bne.n	4206 <encode_uint+0x5c>
			conv->altform_0c = true;
    422e:	78ab      	ldrb	r3, [r5, #2]
    4230:	f043 0310 	orr.w	r3, r3, #16
    4234:	e7e6      	b.n	4204 <encode_uint+0x5a>

00004236 <outs>:
{
    4236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    423a:	4607      	mov	r7, r0
    423c:	4688      	mov	r8, r1
    423e:	4615      	mov	r5, r2
    4240:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    4242:	4614      	mov	r4, r2
    4244:	42b4      	cmp	r4, r6
    4246:	d305      	bcc.n	4254 <outs+0x1e>
    4248:	b10e      	cbz	r6, 424e <outs+0x18>
	return (int)count;
    424a:	1b60      	subs	r0, r4, r5
    424c:	e008      	b.n	4260 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    424e:	7823      	ldrb	r3, [r4, #0]
    4250:	2b00      	cmp	r3, #0
    4252:	d0fa      	beq.n	424a <outs+0x14>
		int rc = out((int)*sp++, ctx);
    4254:	f814 0b01 	ldrb.w	r0, [r4], #1
    4258:	4641      	mov	r1, r8
    425a:	47b8      	blx	r7
		if (rc < 0) {
    425c:	2800      	cmp	r0, #0
    425e:	daf1      	bge.n	4244 <outs+0xe>
}
    4260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004264 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    4264:	4770      	bx	lr

00004266 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    4266:	f000 ba8f 	b.w	4788 <z_fatal_error>

0000426a <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    426a:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    426c:	6800      	ldr	r0, [r0, #0]
    426e:	f000 ba8b 	b.w	4788 <z_fatal_error>

00004272 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    4272:	2100      	movs	r1, #0
    4274:	2001      	movs	r0, #1
    4276:	f7ff bff6 	b.w	4266 <z_arm_fatal_error>

0000427a <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    427a:	b508      	push	{r3, lr}
	handler();
    427c:	f7fc ffc0 	bl	1200 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    4280:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    4284:	f7fd b898 	b.w	13b8 <z_arm_exc_exit>

00004288 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    4288:	3901      	subs	r1, #1
    428a:	4603      	mov	r3, r0
    428c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    4290:	b90a      	cbnz	r2, 4296 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    4292:	701a      	strb	r2, [r3, #0]

	return dest;
}
    4294:	4770      	bx	lr
		*d = *s;
    4296:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    429a:	e7f7      	b.n	428c <strcpy+0x4>

0000429c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    429c:	4603      	mov	r3, r0
	size_t n = 0;
    429e:	2000      	movs	r0, #0

	while (*s != '\0') {
    42a0:	5c1a      	ldrb	r2, [r3, r0]
    42a2:	b902      	cbnz	r2, 42a6 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    42a4:	4770      	bx	lr
		n++;
    42a6:	3001      	adds	r0, #1
    42a8:	e7fa      	b.n	42a0 <strlen+0x4>

000042aa <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    42aa:	4603      	mov	r3, r0
	size_t n = 0;
    42ac:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    42ae:	5c1a      	ldrb	r2, [r3, r0]
    42b0:	b10a      	cbz	r2, 42b6 <strnlen+0xc>
    42b2:	4288      	cmp	r0, r1
    42b4:	d100      	bne.n	42b8 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    42b6:	4770      	bx	lr
		n++;
    42b8:	3001      	adds	r0, #1
    42ba:	e7f8      	b.n	42ae <strnlen+0x4>

000042bc <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    42bc:	b510      	push	{r4, lr}
    42be:	1e43      	subs	r3, r0, #1
    42c0:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    42c2:	4291      	cmp	r1, r2
    42c4:	d100      	bne.n	42c8 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    42c6:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    42c8:	f811 4b01 	ldrb.w	r4, [r1], #1
    42cc:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    42d0:	e7f7      	b.n	42c2 <memcpy+0x6>

000042d2 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    42d2:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    42d4:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    42d6:	4603      	mov	r3, r0
	while (n > 0) {
    42d8:	4293      	cmp	r3, r2
    42da:	d100      	bne.n	42de <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    42dc:	4770      	bx	lr
		*(d_byte++) = c_byte;
    42de:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    42e2:	e7f9      	b.n	42d8 <memset+0x6>

000042e4 <_stdout_hook_default>:
}
    42e4:	f04f 30ff 	mov.w	r0, #4294967295
    42e8:	4770      	bx	lr

000042ea <fputc>:
		union { uintptr_t x; FILE * val; } parm1 = { .val = stream };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
    42ea:	f7fd bb21 	b.w	1930 <z_impl_zephyr_fputc>

000042ee <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    42ee:	2806      	cmp	r0, #6
    42f0:	d108      	bne.n	4304 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    42f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    42f6:	2201      	movs	r2, #1
    42f8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    42fc:	f3bf 8f4f 	dsb	sy
        __WFE();
    4300:	bf20      	wfe
    while (true)
    4302:	e7fd      	b.n	4300 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    4304:	4770      	bx	lr

00004306 <pm_state_exit_post_ops>:
    4306:	2300      	movs	r3, #0
    4308:	f383 8811 	msr	BASEPRI, r3
    430c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    4310:	4770      	bx	lr

00004312 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    4312:	6903      	ldr	r3, [r0, #16]
    4314:	b2c9      	uxtb	r1, r1
    4316:	220c      	movs	r2, #12
    4318:	fb01 3302 	mla	r3, r1, r2, r3
    431c:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    431e:	f000 0007 	and.w	r0, r0, #7
    4322:	4770      	bx	lr

00004324 <set_on_state>:
	__asm__ volatile(
    4324:	f04f 0320 	mov.w	r3, #32
    4328:	f3ef 8211 	mrs	r2, BASEPRI
    432c:	f383 8812 	msr	BASEPRI_MAX, r3
    4330:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    4334:	6803      	ldr	r3, [r0, #0]
    4336:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    433a:	f043 0302 	orr.w	r3, r3, #2
    433e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    4340:	f382 8811 	msr	BASEPRI, r2
    4344:	f3bf 8f6f 	isb	sy
}
    4348:	4770      	bx	lr

0000434a <stop>:
{
    434a:	b570      	push	{r4, r5, r6, lr}
    434c:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    434e:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    4350:	f04f 0420 	mov.w	r4, #32
    4354:	f3ef 8511 	mrs	r5, BASEPRI
    4358:	f384 8812 	msr	BASEPRI_MAX, r4
    435c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4360:	260c      	movs	r6, #12
    4362:	fb06 3401 	mla	r4, r6, r1, r3
    4366:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    4368:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    436c:	d008      	beq.n	4380 <stop+0x36>
    436e:	42a2      	cmp	r2, r4
    4370:	d006      	beq.n	4380 <stop+0x36>
	__asm__ volatile(
    4372:	f385 8811 	msr	BASEPRI, r5
    4376:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    437a:	f04f 30ff 	mov.w	r0, #4294967295
}
    437e:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    4380:	fb06 3301 	mla	r3, r6, r1, r3
    4384:	2201      	movs	r2, #1
    4386:	641a      	str	r2, [r3, #64]	; 0x40
    4388:	f385 8811 	msr	BASEPRI, r5
    438c:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    4390:	6843      	ldr	r3, [r0, #4]
    4392:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    4396:	685b      	ldr	r3, [r3, #4]
    4398:	4798      	blx	r3
	return 0;
    439a:	2000      	movs	r0, #0
    439c:	e7ef      	b.n	437e <stop+0x34>

0000439e <api_stop>:
	return stop(dev, subsys, CTX_API);
    439e:	2280      	movs	r2, #128	; 0x80
    43a0:	f7ff bfd3 	b.w	434a <stop>

000043a4 <async_start>:
{
    43a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    43a6:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    43a8:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    43aa:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    43ac:	f04f 0520 	mov.w	r5, #32
    43b0:	f3ef 8611 	mrs	r6, BASEPRI
    43b4:	f385 8812 	msr	BASEPRI_MAX, r5
    43b8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    43bc:	250c      	movs	r5, #12
    43be:	fb05 4401 	mla	r4, r5, r1, r4
    43c2:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    43c4:	f005 0c07 	and.w	ip, r5, #7
    43c8:	f1bc 0f01 	cmp.w	ip, #1
    43cc:	d10c      	bne.n	43e8 <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    43ce:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    43d0:	f386 8811 	msr	BASEPRI, r6
    43d4:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    43d8:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    43dc:	6843      	ldr	r3, [r0, #4]
    43de:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    43e2:	4798      	blx	r3
	return 0;
    43e4:	2000      	movs	r0, #0
}
    43e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    43e8:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    43ec:	42af      	cmp	r7, r5
    43ee:	f386 8811 	msr	BASEPRI, r6
    43f2:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    43f6:	bf0c      	ite	eq
    43f8:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    43fc:	f04f 30ff 	movne.w	r0, #4294967295
    4400:	e7f1      	b.n	43e6 <async_start+0x42>

00004402 <api_start>:
{
    4402:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    4404:	2480      	movs	r4, #128	; 0x80
    4406:	9400      	str	r4, [sp, #0]
    4408:	f7ff ffcc 	bl	43a4 <async_start>
}
    440c:	b002      	add	sp, #8
    440e:	bd10      	pop	{r4, pc}

00004410 <onoff_started_callback>:
{
    4410:	b410      	push	{r4}
	return &data->mgr[type];
    4412:	6900      	ldr	r0, [r0, #16]
    4414:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    4416:	241c      	movs	r4, #28
    4418:	fb03 0004 	mla	r0, r3, r4, r0
    441c:	2100      	movs	r1, #0
}
    441e:	bc10      	pop	{r4}
	notify(mgr, 0);
    4420:	4710      	bx	r2

00004422 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    4422:	2000      	movs	r0, #0
    4424:	f000 b98d 	b.w	4742 <nrfx_clock_stop>

00004428 <blocking_start_callback>:
{
    4428:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    442a:	f7ff b8f5 	b.w	3618 <z_impl_k_sem_give>

0000442e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    442e:	6843      	ldr	r3, [r0, #4]
    4430:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    4432:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    4436:	600b      	str	r3, [r1, #0]
}
    4438:	2000      	movs	r0, #0
    443a:	4770      	bx	lr

0000443c <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    443c:	6843      	ldr	r3, [r0, #4]
    443e:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    4440:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    4444:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    4448:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    444c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    4450:	2000      	movs	r0, #0
    4452:	4770      	bx	lr

00004454 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4454:	6843      	ldr	r3, [r0, #4]
    4456:	685b      	ldr	r3, [r3, #4]
}
    4458:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    445a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    445e:	4770      	bx	lr

00004460 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4460:	6843      	ldr	r3, [r0, #4]
    4462:	685b      	ldr	r3, [r3, #4]
}
    4464:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    4466:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    446a:	4770      	bx	lr

0000446c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    446c:	6843      	ldr	r3, [r0, #4]
    446e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    4470:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    4474:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    4478:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    447a:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    447e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    4482:	2000      	movs	r0, #0
    4484:	4770      	bx	lr

00004486 <gpio_nrfx_manage_callback>:
{
    4486:	b510      	push	{r4, lr}
	return port->data;
    4488:	6903      	ldr	r3, [r0, #16]
	return list->head;
    448a:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    448c:	b1f8      	cbz	r0, 44ce <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    448e:	4288      	cmp	r0, r1
    4490:	d119      	bne.n	44c6 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    4492:	689c      	ldr	r4, [r3, #8]
	return node->next;
    4494:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    4496:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    4498:	42a1      	cmp	r1, r4
    449a:	d100      	bne.n	449e <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    449c:	6098      	str	r0, [r3, #8]
	parent->next = child;
    449e:	2000      	movs	r0, #0
    44a0:	6008      	str	r0, [r1, #0]
	if (set) {
    44a2:	b12a      	cbz	r2, 44b0 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    44a4:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    44a6:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    44a8:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    44aa:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    44ac:	b902      	cbnz	r2, 44b0 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    44ae:	6099      	str	r1, [r3, #8]
	return 0;
    44b0:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    44b2:	e010      	b.n	44d6 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    44b4:	4281      	cmp	r1, r0
    44b6:	d106      	bne.n	44c6 <gpio_nrfx_manage_callback+0x40>
	return node->next;
    44b8:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    44ba:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    44bc:	6898      	ldr	r0, [r3, #8]
    44be:	4281      	cmp	r1, r0
    44c0:	d1ed      	bne.n	449e <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    44c2:	609c      	str	r4, [r3, #8]
}
    44c4:	e7eb      	b.n	449e <gpio_nrfx_manage_callback+0x18>
	return node->next;
    44c6:	4604      	mov	r4, r0
    44c8:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    44ca:	2800      	cmp	r0, #0
    44cc:	d1f2      	bne.n	44b4 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    44ce:	2a00      	cmp	r2, #0
    44d0:	d1e8      	bne.n	44a4 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    44d2:	f06f 0015 	mvn.w	r0, #21
}
    44d6:	bd10      	pop	{r4, pc}

000044d8 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    44d8:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    44da:	6843      	ldr	r3, [r0, #4]
    44dc:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    44de:	7a05      	ldrb	r5, [r0, #8]
    44e0:	6844      	ldr	r4, [r0, #4]
    44e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    44e6:	42a3      	cmp	r3, r4
    44e8:	d302      	bcc.n	44f0 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    44ea:	f06f 0001 	mvn.w	r0, #1
}
    44ee:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    44f0:	795c      	ldrb	r4, [r3, #5]
    44f2:	428c      	cmp	r4, r1
    44f4:	d001      	beq.n	44fa <pinctrl_lookup_state+0x22>
		(*state)++;
    44f6:	3308      	adds	r3, #8
    44f8:	e7f0      	b.n	44dc <pinctrl_lookup_state+0x4>
			return 0;
    44fa:	2000      	movs	r0, #0
    44fc:	e7f7      	b.n	44ee <pinctrl_lookup_state+0x16>

000044fe <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    44fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4502:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4506:	2701      	movs	r7, #1
    p_reg->OUTSET = set_mask;
    4508:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    450c:	4281      	cmp	r1, r0
    450e:	d102      	bne.n	4516 <pinctrl_configure_pins+0x18>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    4510:	2000      	movs	r0, #0
}
    4512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    4516:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    4518:	f005 037f 	and.w	r3, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    451c:	f3c5 2443 	ubfx	r4, r5, #9, #4
			pin = 0xFFFFFFFFU;
    4520:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    4522:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
    4526:	bf08      	it	eq
    4528:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    452c:	2d19      	cmp	r5, #25
    452e:	d86a      	bhi.n	4606 <pinctrl_configure_pins+0x108>
    4530:	e8df f005 	tbb	[pc, r5]
    4534:	1f1c170d 	.word	0x1f1c170d
    4538:	691f2e22 	.word	0x691f2e22
    453c:	32696969 	.word	0x32696969
    4540:	69696955 	.word	0x69696955
    4544:	69696969 	.word	0x69696969
    4548:	60586969 	.word	0x60586969
    454c:	6663      	.short	0x6663
			NRF_PSEL_UART(reg, TXD) = pin;
    454e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    4552:	f003 051f 	and.w	r5, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4556:	fa07 f505 	lsl.w	r5, r7, r5
    p_reg->OUTSET = set_mask;
    455a:	f8c6 5508 	str.w	r5, [r6, #1288]	; 0x508
}
    455e:	2501      	movs	r5, #1
    4560:	e002      	b.n	4568 <pinctrl_configure_pins+0x6a>
			NRF_PSEL_UART(reg, RXD) = pin;
    4562:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    4566:	2500      	movs	r5, #0
    4568:	46ac      	mov	ip, r5
    456a:	e01c      	b.n	45a6 <pinctrl_configure_pins+0xa8>
			NRF_PSEL_UART(reg, RTS) = pin;
    456c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    4570:	e7ef      	b.n	4552 <pinctrl_configure_pins+0x54>
			NRF_PSEL_UART(reg, CTS) = pin;
    4572:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    4576:	e7f6      	b.n	4566 <pinctrl_configure_pins+0x68>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    4578:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    457c:	2500      	movs	r5, #0
    *p_pin = pin_number & 0x1F;
    457e:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4582:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
    4586:	f8c6 c50c 	str.w	ip, [r6, #1292]	; 0x50c
}
    458a:	f04f 0c01 	mov.w	ip, #1
    458e:	e00a      	b.n	45a6 <pinctrl_configure_pins+0xa8>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    4590:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    4594:	2501      	movs	r5, #1
    4596:	e7f2      	b.n	457e <pinctrl_configure_pins+0x80>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    4598:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    459c:	2c00      	cmp	r4, #0
    459e:	d1e2      	bne.n	4566 <pinctrl_configure_pins+0x68>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    45a0:	2500      	movs	r5, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    45a2:	46ac      	mov	ip, r5
				drive = NRF_DRIVE_S0D1;
    45a4:	2406      	movs	r4, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    45a6:	f850 eb04 	ldr.w	lr, [r0], #4
    45aa:	f40e 5800 	and.w	r8, lr, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    45ae:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    45b2:	f3ce 1ec1 	ubfx	lr, lr, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    45b6:	ea4f 2404 	mov.w	r4, r4, lsl #8
    45ba:	bf18      	it	ne
    45bc:	f04f 0c00 	movne.w	ip, #0
    *p_pin = pin_number & 0x1F;
    45c0:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    45c4:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
    45c8:	bf18      	it	ne
    45ca:	2501      	movne	r5, #1
    45cc:	ea44 040c 	orr.w	r4, r4, ip
    reg->PIN_CNF[pin_number] = cnf;
    45d0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    45d4:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    45d8:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    45dc:	e796      	b.n	450c <pinctrl_configure_pins+0xe>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    45de:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    45e2:	e7db      	b.n	459c <pinctrl_configure_pins+0x9e>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    45e4:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    45e8:	6805      	ldr	r5, [r0, #0]
    45ea:	f3c5 3580 	ubfx	r5, r5, #14, #1
    if (value == 0)
    45ee:	2d00      	cmp	r5, #0
    45f0:	d0d0      	beq.n	4594 <pinctrl_configure_pins+0x96>
    45f2:	e7ae      	b.n	4552 <pinctrl_configure_pins+0x54>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    45f4:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    45f8:	e7f6      	b.n	45e8 <pinctrl_configure_pins+0xea>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    45fa:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    45fe:	e7f3      	b.n	45e8 <pinctrl_configure_pins+0xea>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    4600:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    4604:	e7f0      	b.n	45e8 <pinctrl_configure_pins+0xea>
		switch (NRF_GET_FUN(pins[i])) {
    4606:	f06f 0085 	mvn.w	r0, #133	; 0x85
    460a:	e782      	b.n	4512 <pinctrl_configure_pins+0x14>

0000460c <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
    460c:	6902      	ldr	r2, [r0, #16]
{
    460e:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    4610:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    4614:	e883 0003 	stmia.w	r3, {r0, r1}
}
    4618:	2000      	movs	r0, #0
    461a:	4770      	bx	lr

0000461c <uarte_nrfx_err_check>:
	return config->uarte_regs;
    461c:	6843      	ldr	r3, [r0, #4]
    461e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    4620:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    4624:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    4628:	4770      	bx	lr

0000462a <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    462a:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    462c:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    462e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4630:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    4634:	b150      	cbz	r0, 464c <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
    4636:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4638:	2000      	movs	r0, #0
    463a:	7812      	ldrb	r2, [r2, #0]
    463c:	700a      	strb	r2, [r1, #0]
    463e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    4642:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4646:	2201      	movs	r2, #1
    4648:	601a      	str	r2, [r3, #0]
	return 0;
    464a:	4770      	bx	lr
		return -1;
    464c:	f04f 30ff 	mov.w	r0, #4294967295
}
    4650:	4770      	bx	lr

00004652 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    4652:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    4654:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4656:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    465a:	b940      	cbnz	r0, 466e <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    465c:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    465e:	079b      	lsls	r3, r3, #30
    4660:	d406      	bmi.n	4670 <is_tx_ready.isra.0+0x1e>
    4662:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    4666:	3800      	subs	r0, #0
    4668:	bf18      	it	ne
    466a:	2001      	movne	r0, #1
    466c:	4770      	bx	lr
    466e:	2001      	movs	r0, #1
}
    4670:	4770      	bx	lr

00004672 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    4672:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    4674:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    4676:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    467a:	05c9      	lsls	r1, r1, #23
    467c:	d518      	bpl.n	46b0 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    467e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    4682:	b1a9      	cbz	r1, 46b0 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    4684:	f04f 0020 	mov.w	r0, #32
    4688:	f3ef 8111 	mrs	r1, BASEPRI
    468c:	f380 8812 	msr	BASEPRI_MAX, r0
    4690:	f3bf 8f6f 	isb	sy
    4694:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    4698:	b130      	cbz	r0, 46a8 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    469a:	2000      	movs	r0, #0
    469c:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    46a0:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    46a4:	2001      	movs	r0, #1
    46a6:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    46a8:	f381 8811 	msr	BASEPRI, r1
    46ac:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    46b0:	6852      	ldr	r2, [r2, #4]
    46b2:	06d2      	lsls	r2, r2, #27
    46b4:	d515      	bpl.n	46e2 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    46b6:	f04f 0120 	mov.w	r1, #32
    46ba:	f3ef 8211 	mrs	r2, BASEPRI
    46be:	f381 8812 	msr	BASEPRI_MAX, r1
    46c2:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    46c6:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    46ca:	b111      	cbz	r1, 46d2 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    46cc:	2100      	movs	r1, #0
    46ce:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    46d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    46d6:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    46da:	f382 8811 	msr	BASEPRI, r2
    46de:	f3bf 8f6f 	isb	sy
}
    46e2:	4770      	bx	lr

000046e4 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    46e4:	4770      	bx	lr

000046e6 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    46e6:	f100 0350 	add.w	r3, r0, #80	; 0x50
    46ea:	009b      	lsls	r3, r3, #2
    46ec:	b29b      	uxth	r3, r3
    46ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    46f2:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    46f6:	2200      	movs	r2, #0
    46f8:	601a      	str	r2, [r3, #0]
    46fa:	681b      	ldr	r3, [r3, #0]
}
    46fc:	4770      	bx	lr

000046fe <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    46fe:	b508      	push	{r3, lr}

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    4700:	2000      	movs	r0, #0
    4702:	f7fd f94d 	bl	19a0 <sys_arch_reboot>

00004706 <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    4706:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    470a:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
    470e:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    4710:	bf04      	itt	eq
    4712:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
    4716:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
    471a:	1f83      	subs	r3, r0, #6
    471c:	4258      	negs	r0, r3
    471e:	4158      	adcs	r0, r3
    4720:	4770      	bx	lr

00004722 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    4722:	4700      	bx	r0

00004724 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    4724:	f000 b928 	b.w	4978 <z_impl_k_busy_wait>

00004728 <nrfx_clock_enable>:
{
    4728:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    472a:	2000      	movs	r0, #0
    472c:	f7fc fd42 	bl	11b4 <arch_irq_is_enabled>
    4730:	b908      	cbnz	r0, 4736 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    4732:	f7fc fd31 	bl	1198 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4736:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    473a:	2200      	movs	r2, #0
    473c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    4740:	bd08      	pop	{r3, pc}

00004742 <nrfx_clock_stop>:
    clock_stop(domain);
    4742:	f7fe b967 	b.w	2a14 <clock_stop>

00004746 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    4746:	f000 001f 	and.w	r0, r0, #31
    474a:	0080      	lsls	r0, r0, #2
    474c:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4750:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    4754:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4758:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    475c:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    4760:	4770      	bx	lr

00004762 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    4762:	f7fe bd89 	b.w	3278 <_DoInit>

00004766 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
    4766:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
    4768:	f7ff fffb 	bl	4762 <SEGGER_RTT_Init>

	return 0;
}
    476c:	2000      	movs	r0, #0
    476e:	bd08      	pop	{r3, pc}

00004770 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    4770:	4770      	bx	lr

00004772 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    4772:	b140      	cbz	r0, 4786 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    4774:	68c3      	ldr	r3, [r0, #12]
    4776:	7858      	ldrb	r0, [r3, #1]
    4778:	f010 0001 	ands.w	r0, r0, #1
    477c:	bf1e      	ittt	ne
    477e:	7818      	ldrbne	r0, [r3, #0]
    4780:	fab0 f080 	clzne	r0, r0
    4784:	0940      	lsrne	r0, r0, #5
}
    4786:	4770      	bx	lr

00004788 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    478a:	4605      	mov	r5, r0
    478c:	460e      	mov	r6, r1
	__asm__ volatile(
    478e:	f04f 0320 	mov.w	r3, #32
    4792:	f3ef 8711 	mrs	r7, BASEPRI
    4796:	f383 8812 	msr	BASEPRI_MAX, r3
    479a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    479e:	f7ff fa19 	bl	3bd4 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    47a2:	4631      	mov	r1, r6
    47a4:	4604      	mov	r4, r0
    47a6:	4628      	mov	r0, r5
    47a8:	f7ff ffa9 	bl	46fe <k_sys_fatal_error_handler>
	__asm__ volatile(
    47ac:	f387 8811 	msr	BASEPRI, r7
    47b0:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    47b4:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    47b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    47ba:	f7fc bfd5 	b.w	1768 <z_impl_k_thread_abort>

000047be <z_early_memset>:
	(void) memset(dst, c, n);
    47be:	f7ff bd88 	b.w	42d2 <memset>

000047c2 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    47c2:	f7ff bd7b 	b.w	42bc <memcpy>

000047c6 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    47c6:	f3ef 8005 	mrs	r0, IPSR
}
    47ca:	3800      	subs	r0, #0
    47cc:	bf18      	it	ne
    47ce:	2001      	movne	r0, #1
    47d0:	4770      	bx	lr

000047d2 <z_pm_save_idle_exit>:
{
    47d2:	b508      	push	{r3, lr}
	pm_system_resume();
    47d4:	f7fc fbb6 	bl	f44 <pm_system_resume>
}
    47d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    47dc:	f7ff bf82 	b.w	46e4 <sys_clock_idle_exit>

000047e0 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    47e0:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    47e4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    47e6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    47e8:	2300      	movs	r3, #0
	node->prev = NULL;
    47ea:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    47ee:	4770      	bx	lr

000047f0 <unpend_thread_no_timeout>:
{
    47f0:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    47f2:	f7ff fff5 	bl	47e0 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    47f6:	7b43      	ldrb	r3, [r0, #13]
    47f8:	f023 0302 	bic.w	r3, r3, #2
    47fc:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    47fe:	2300      	movs	r3, #0
    4800:	6083      	str	r3, [r0, #8]
}
    4802:	bd08      	pop	{r3, pc}

00004804 <add_to_waitq_locked>:
{
    4804:	b538      	push	{r3, r4, r5, lr}
    4806:	4604      	mov	r4, r0
    4808:	460d      	mov	r5, r1
	unready_thread(thread);
    480a:	f7ff f82f 	bl	386c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    480e:	7b63      	ldrb	r3, [r4, #13]
    4810:	f043 0302 	orr.w	r3, r3, #2
    4814:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    4816:	b1e5      	cbz	r5, 4852 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    4818:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    481a:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    481c:	429d      	cmp	r5, r3
    481e:	d109      	bne.n	4834 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    4820:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    4822:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    4826:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4828:	606c      	str	r4, [r5, #4]
}
    482a:	e012      	b.n	4852 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    482c:	686a      	ldr	r2, [r5, #4]
    482e:	4293      	cmp	r3, r2
    4830:	d0f6      	beq.n	4820 <add_to_waitq_locked+0x1c>
    4832:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4834:	2b00      	cmp	r3, #0
    4836:	d0f3      	beq.n	4820 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    4838:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    483c:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    4840:	428a      	cmp	r2, r1
    4842:	d0f3      	beq.n	482c <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4844:	4291      	cmp	r1, r2
    4846:	ddf1      	ble.n	482c <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    4848:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    484a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    484e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4850:	605c      	str	r4, [r3, #4]
}
    4852:	bd38      	pop	{r3, r4, r5, pc}

00004854 <z_ready_thread>:
{
    4854:	b510      	push	{r4, lr}
	__asm__ volatile(
    4856:	f04f 0320 	mov.w	r3, #32
    485a:	f3ef 8411 	mrs	r4, BASEPRI
    485e:	f383 8812 	msr	BASEPRI_MAX, r3
    4862:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    4866:	f7fe ffcd 	bl	3804 <ready_thread>
	__asm__ volatile(
    486a:	f384 8811 	msr	BASEPRI, r4
    486e:	f3bf 8f6f 	isb	sy
}
    4872:	bd10      	pop	{r4, pc}

00004874 <z_sched_wake_thread>:
{
    4874:	b538      	push	{r3, r4, r5, lr}
    4876:	4604      	mov	r4, r0
	__asm__ volatile(
    4878:	f04f 0320 	mov.w	r3, #32
    487c:	f3ef 8511 	mrs	r5, BASEPRI
    4880:	f383 8812 	msr	BASEPRI_MAX, r3
    4884:	f3bf 8f6f 	isb	sy
		if (!killed) {
    4888:	7b43      	ldrb	r3, [r0, #13]
    488a:	f013 0f28 	tst.w	r3, #40	; 0x28
    488e:	d10b      	bne.n	48a8 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
    4890:	6883      	ldr	r3, [r0, #8]
    4892:	b10b      	cbz	r3, 4898 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
    4894:	f7ff ffac 	bl	47f0 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4898:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    489a:	b951      	cbnz	r1, 48b2 <z_sched_wake_thread+0x3e>
    489c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    48a0:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
    48a2:	4620      	mov	r0, r4
    48a4:	f7fe ffae 	bl	3804 <ready_thread>
	__asm__ volatile(
    48a8:	f385 8811 	msr	BASEPRI, r5
    48ac:	f3bf 8f6f 	isb	sy
}
    48b0:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    48b2:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
    48b6:	e7f3      	b.n	48a0 <z_sched_wake_thread+0x2c>

000048b8 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
    48b8:	2101      	movs	r1, #1
    48ba:	3818      	subs	r0, #24
    48bc:	f7ff bfda 	b.w	4874 <z_sched_wake_thread>

000048c0 <z_unpend_first_thread>:
{
    48c0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    48c2:	f04f 0320 	mov.w	r3, #32
    48c6:	f3ef 8511 	mrs	r5, BASEPRI
    48ca:	f383 8812 	msr	BASEPRI_MAX, r3
    48ce:	f3bf 8f6f 	isb	sy
	return list->head == list;
    48d2:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    48d4:	42a0      	cmp	r0, r4
    48d6:	d00d      	beq.n	48f4 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    48d8:	b134      	cbz	r4, 48e8 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    48da:	4620      	mov	r0, r4
    48dc:	f7ff ff88 	bl	47f0 <unpend_thread_no_timeout>
    48e0:	f104 0018 	add.w	r0, r4, #24
    48e4:	f000 f81e 	bl	4924 <z_abort_timeout>
	__asm__ volatile(
    48e8:	f385 8811 	msr	BASEPRI, r5
    48ec:	f3bf 8f6f 	isb	sy
}
    48f0:	4620      	mov	r0, r4
    48f2:	bd38      	pop	{r3, r4, r5, pc}
    48f4:	2400      	movs	r4, #0
    48f6:	e7f7      	b.n	48e8 <z_unpend_first_thread+0x28>

000048f8 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    48f8:	4603      	mov	r3, r0
    48fa:	b920      	cbnz	r0, 4906 <z_reschedule_irqlock+0xe>
    48fc:	f3ef 8205 	mrs	r2, IPSR
    4900:	b90a      	cbnz	r2, 4906 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    4902:	f7fc bc9d 	b.w	1240 <arch_swap>
    4906:	f383 8811 	msr	BASEPRI, r3
    490a:	f3bf 8f6f 	isb	sy
}
    490e:	4770      	bx	lr

00004910 <z_reschedule_unlocked>:
	__asm__ volatile(
    4910:	f04f 0320 	mov.w	r3, #32
    4914:	f3ef 8011 	mrs	r0, BASEPRI
    4918:	f383 8812 	msr	BASEPRI_MAX, r3
    491c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    4920:	f7ff bfea 	b.w	48f8 <z_reschedule_irqlock>

00004924 <z_abort_timeout>:
{
    4924:	b510      	push	{r4, lr}
    4926:	f04f 0220 	mov.w	r2, #32
    492a:	f3ef 8411 	mrs	r4, BASEPRI
    492e:	f382 8812 	msr	BASEPRI_MAX, r2
    4932:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    4936:	6803      	ldr	r3, [r0, #0]
    4938:	b13b      	cbz	r3, 494a <z_abort_timeout+0x26>
			remove_timeout(to);
    493a:	f7ff f9f5 	bl	3d28 <remove_timeout>
			ret = 0;
    493e:	2000      	movs	r0, #0
	__asm__ volatile(
    4940:	f384 8811 	msr	BASEPRI, r4
    4944:	f3bf 8f6f 	isb	sy
}
    4948:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    494a:	f06f 0015 	mvn.w	r0, #21
    494e:	e7f7      	b.n	4940 <z_abort_timeout+0x1c>

00004950 <z_get_next_timeout_expiry>:
{
    4950:	b510      	push	{r4, lr}
	__asm__ volatile(
    4952:	f04f 0320 	mov.w	r3, #32
    4956:	f3ef 8411 	mrs	r4, BASEPRI
    495a:	f383 8812 	msr	BASEPRI_MAX, r3
    495e:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    4962:	f7ff f9c1 	bl	3ce8 <next_timeout>
	__asm__ volatile(
    4966:	f384 8811 	msr	BASEPRI, r4
    496a:	f3bf 8f6f 	isb	sy
}
    496e:	bd10      	pop	{r4, pc}

00004970 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    4970:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    4972:	f7ff fad5 	bl	3f20 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    4976:	bd08      	pop	{r3, pc}

00004978 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    4978:	b108      	cbz	r0, 497e <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    497a:	f7fd b827 	b.w	19cc <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    497e:	4770      	bx	lr

00004980 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    4980:	4770      	bx	lr
	...
