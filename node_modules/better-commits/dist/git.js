#! /usr/bin/env node
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/git.ts
var git_exports = {};
__export(git_exports, {
  git_add: () => git_add,
  git_status: () => git_status
});
module.exports = __toCommonJS(git_exports);
var import_child_process = require("child_process");
var p = __toESM(require("@clack/prompts"));
var import_picocolors = __toESM(require("picocolors"));
var porcelain_states = ["M", "T", "R", "D", "A", "C"];
function git_status() {
  let status = "";
  try {
    status = (0, import_child_process.execSync)("git status --porcelain", { stdio: "pipe" }).toString();
  } catch (err) {
    p.log.error(import_picocolors.default.red("Failed to git status"));
    return { index: [], work_tree: [] };
  }
  const lines = status.split("\n");
  const work_tree = [];
  const index = [];
  lines.forEach((v) => {
    const line = v.trimEnd();
    if (!line)
      return;
    const path_plus_file = line.substring(2).trim();
    const first_char = line.charAt(0).trim();
    const second_char = line.charAt(1).trim();
    if (first_char === "?" || second_char === "?") {
      work_tree.push(path_plus_file);
    }
    if (porcelain_states.includes(first_char)) {
      index.push(path_plus_file);
    }
    if (porcelain_states.includes(second_char)) {
      work_tree.push(path_plus_file);
    }
  });
  return { index, work_tree };
}
function git_add(files) {
  const space_delimited_files = files.join(" ");
  if (space_delimited_files) {
    try {
      (0, import_child_process.execSync)(`git add ${space_delimited_files}`, {
        stdio: "pipe"
      }).toString();
      p.log.success(import_picocolors.default.green("Changes successfully staged"));
    } catch (err) {
      p.log.error(import_picocolors.default.red("Failed to stage changes"));
    }
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  git_add,
  git_status
});
