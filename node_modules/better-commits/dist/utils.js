"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/utils.ts
var utils_exports = {};
__export(utils_exports, {
  A_FOR_ALL: () => A_FOR_ALL,
  BRANCH_ACTION_OPTIONS: () => BRANCH_ACTION_OPTIONS,
  BRANCH_ORDER_DEFAULTS: () => BRANCH_ORDER_DEFAULTS,
  CACHE_PROMPT: () => CACHE_PROMPT,
  COMMIT_FOOTER_OPTIONS: () => COMMIT_FOOTER_OPTIONS,
  CONFIG_FILE_NAME: () => CONFIG_FILE_NAME,
  CUSTOM_SCOPE_KEY: () => CUSTOM_SCOPE_KEY,
  DEFAULT_SCOPE_OPTIONS: () => DEFAULT_SCOPE_OPTIONS,
  DEFAULT_TYPE_OPTIONS: () => DEFAULT_TYPE_OPTIONS,
  FOOTER_OPTION_VALUES: () => FOOTER_OPTION_VALUES,
  OPTIONAL_PROMPT: () => OPTIONAL_PROMPT,
  REGEX_SLASH_NUM: () => REGEX_SLASH_NUM,
  REGEX_SLASH_TAG: () => REGEX_SLASH_TAG,
  REGEX_SLASH_UND: () => REGEX_SLASH_UND,
  REGEX_START_NUM: () => REGEX_START_NUM,
  REGEX_START_TAG: () => REGEX_START_TAG,
  REGEX_START_UND: () => REGEX_START_UND,
  SPACE_TO_SELECT: () => SPACE_TO_SELECT,
  Z_BRANCH_ACTIONS: () => Z_BRANCH_ACTIONS,
  Z_BRANCH_CONFIG_FIELDS: () => Z_BRANCH_CONFIG_FIELDS,
  Z_BRANCH_FIELDS: () => Z_BRANCH_FIELDS,
  Z_FOOTER_OPTIONS: () => Z_FOOTER_OPTIONS,
  addNewLine: () => addNewLine,
  clean_commit_title: () => clean_commit_title,
  get_default_config_path: () => get_default_config_path,
  get_git_root: () => get_git_root,
  infer_type_from_branch: () => infer_type_from_branch,
  load_setup: () => load_setup
});
module.exports = __toCommonJS(utils_exports);
var import_os = require("os");
var import_zod2 = require("zod");
var import_picocolors = __toESM(require("picocolors"));
var import_child_process = require("child_process");
var p = __toESM(require("@clack/prompts"));
var import_fs = __toESM(require("fs"));
var import_zod_validation_error = require("zod-validation-error");

// src/zod-state.ts
var import_zod = require("zod");
var Config = import_zod.z.object({
  check_status: import_zod.z.boolean().default(true),
  commit_type: import_zod.z.object({
    enable: import_zod.z.boolean().default(true),
    initial_value: import_zod.z.string().default("feat"),
    infer_type_from_branch: import_zod.z.boolean().default(true),
    append_emoji_to_label: import_zod.z.boolean().default(false),
    append_emoji_to_commit: import_zod.z.boolean().default(false),
    options: import_zod.z.array(
      import_zod.z.object({
        value: import_zod.z.string(),
        label: import_zod.z.string().optional(),
        hint: import_zod.z.string().optional(),
        emoji: import_zod.z.string().emoji().optional(),
        trailer: import_zod.z.string().optional()
      })
    ).default(DEFAULT_TYPE_OPTIONS)
  }).default({}).transform((val) => {
    const options = val.options.map((v) => ({
      ...v,
      label: v.emoji && val.append_emoji_to_label ? `${v.emoji} ${v.label}` : v.label
    }));
    return { ...val, options };
  }).refine(
    (val) => val.options.map((v) => v.value).includes(val.initial_value),
    (val) => ({
      message: `Type: initial_value "${val.initial_value}" must exist in options`
    })
  ),
  commit_scope: import_zod.z.object({
    enable: import_zod.z.boolean().default(true),
    custom_scope: import_zod.z.boolean().default(false),
    initial_value: import_zod.z.string().default("app"),
    options: import_zod.z.array(
      import_zod.z.object({
        value: import_zod.z.string(),
        label: import_zod.z.string().optional(),
        hint: import_zod.z.string().optional()
      })
    ).default(DEFAULT_SCOPE_OPTIONS)
  }).default({}).transform((val) => {
    const options = val.options.map((v) => v.value);
    if (val.custom_scope && !options.includes(CUSTOM_SCOPE_KEY)) {
      return {
        ...val,
        options: [
          ...val.options,
          {
            label: CUSTOM_SCOPE_KEY,
            value: CUSTOM_SCOPE_KEY,
            hint: "Write a custom scope"
          }
        ]
      };
    }
    return val;
  }).refine(
    (val) => {
      const options = val.options.map((v) => v.value);
      return options.includes(val.initial_value);
    },
    (val) => ({
      message: `Scope: initial_value "${val.initial_value}" must exist in options`
    })
  ),
  check_ticket: import_zod.z.object({
    infer_ticket: import_zod.z.boolean().default(true),
    confirm_ticket: import_zod.z.boolean().default(true),
    add_to_title: import_zod.z.boolean().default(true),
    append_hashtag: import_zod.z.boolean().default(false),
    surround: import_zod.z.enum(["", "()", "[]", "{}"]).default(""),
    title_position: import_zod.z.enum(["start", "end", "before-colon"]).default("start")
  }).default({}),
  commit_title: import_zod.z.object({
    max_size: import_zod.z.number().positive().default(70)
  }).default({}),
  commit_body: import_zod.z.object({
    enable: import_zod.z.boolean().default(true),
    required: import_zod.z.boolean().default(false)
  }).default({}),
  commit_footer: import_zod.z.object({
    enable: import_zod.z.boolean().default(true),
    initial_value: import_zod.z.array(Z_FOOTER_OPTIONS).default([]),
    options: import_zod.z.array(Z_FOOTER_OPTIONS).default(FOOTER_OPTION_VALUES)
  }).default({}),
  breaking_change: import_zod.z.object({
    add_exclamation_to_title: import_zod.z.boolean().default(true)
  }).default({}),
  confirm_commit: import_zod.z.boolean().default(true),
  print_commit_output: import_zod.z.boolean().default(true),
  branch_pre_commands: import_zod.z.array(import_zod.z.string()).default([]),
  branch_post_commands: import_zod.z.array(import_zod.z.string()).default([]),
  worktree_pre_commands: import_zod.z.array(import_zod.z.string()).default([]),
  worktree_post_commands: import_zod.z.array(import_zod.z.string()).default([]),
  branch_user: import_zod.z.object({
    enable: import_zod.z.boolean().default(true),
    required: import_zod.z.boolean().default(false),
    separator: import_zod.z.enum(["/", "-", "_"]).default("/")
  }).default({}),
  branch_type: import_zod.z.object({
    enable: import_zod.z.boolean().default(true),
    separator: import_zod.z.enum(["/", "-", "_"]).default("/")
  }).default({}),
  branch_version: import_zod.z.object({
    enable: import_zod.z.boolean().default(false),
    required: import_zod.z.boolean().default(false),
    separator: import_zod.z.enum(["/", "-", "_"]).default("/")
  }).default({}),
  branch_ticket: import_zod.z.object({
    enable: import_zod.z.boolean().default(true),
    required: import_zod.z.boolean().default(false),
    separator: import_zod.z.enum(["/", "-", "_"]).default("-")
  }).default({}),
  branch_description: import_zod.z.object({
    max_length: import_zod.z.number().positive().default(70),
    separator: import_zod.z.enum(["", "/", "-", "_"]).default("")
  }).default({}),
  branch_action_default: Z_BRANCH_ACTIONS.default("branch"),
  branch_order: import_zod.z.array(Z_BRANCH_FIELDS).default(BRANCH_ORDER_DEFAULTS),
  enable_worktrees: import_zod.z.boolean().default(true),
  overrides: import_zod.z.object({ shell: import_zod.z.string().optional() }).default({})
}).default({});
var CommitState = import_zod.z.object({
  type: import_zod.z.string().default(""),
  scope: import_zod.z.string().default(""),
  title: import_zod.z.string().default(""),
  body: import_zod.z.string().default(""),
  closes: import_zod.z.string().default(""),
  ticket: import_zod.z.string().default(""),
  breaking_title: import_zod.z.string().default(""),
  breaking_body: import_zod.z.string().default(""),
  deprecates: import_zod.z.string().default(""),
  deprecates_title: import_zod.z.string().default(""),
  deprecates_body: import_zod.z.string().default(""),
  custom_footer: import_zod.z.string().default(""),
  trailer: import_zod.z.string().default("")
}).default({});
var BranchState = import_zod.z.object({
  user: import_zod.z.string().default(""),
  type: import_zod.z.string().default(""),
  ticket: import_zod.z.string().default(""),
  description: import_zod.z.string().default(""),
  version: import_zod.z.string().default("")
}).default({});

// src/utils.ts
var CONFIG_FILE_NAME = ".better-commits.json";
var SPACE_TO_SELECT = `${import_picocolors.default.dim("(<space> to select)")}`;
var A_FOR_ALL = `${import_picocolors.default.dim(
  "(<space> to select, <a> to select all)"
)}`;
var OPTIONAL_PROMPT = `${import_picocolors.default.dim("(optional)")}`;
var CACHE_PROMPT = `${import_picocolors.default.dim("(value will be saved)")}`;
var REGEX_SLASH_TAG = new RegExp(/\/(\w+-\d+)/);
var REGEX_START_TAG = new RegExp(/^(\w+-\d+)/);
var REGEX_START_UND = new RegExp(/^([A-Z]+-[\[a-zA-Z\]\d]+)_/);
var REGEX_SLASH_UND = new RegExp(/\/([A-Z]+-[\[a-zA-Z\]\d]+)_/);
var REGEX_SLASH_NUM = new RegExp(/\/(\d+)/);
var REGEX_START_NUM = new RegExp(/^(\d+)/);
var DEFAULT_TYPE_OPTIONS = [
  { value: "feat", label: "feat", hint: "A new feature", emoji: "\u2728", trailer: "Changelog: feature" },
  { value: "fix", label: "fix", hint: "A bug fix", emoji: "\u{1F41B}", trailer: "Changelog: fix" },
  {
    value: "docs",
    label: "docs",
    hint: "Documentation only changes",
    emoji: "\u{1F4DA}",
    trailer: "Changelog: documentation"
  },
  {
    value: "refactor",
    label: "refactor",
    hint: "A code change that neither fixes a bug nor adds a feature",
    emoji: "\u{1F528}",
    trailer: "Changelog: refactor"
  },
  {
    value: "perf",
    label: "perf",
    hint: "A code change that improves performance",
    emoji: "\u{1F680}",
    trailer: "Changelog: performance"
  },
  {
    value: "test",
    label: "test",
    hint: "Adding missing tests or correcting existing tests",
    emoji: "\u{1F6A8}",
    trailer: "Changelog: test"
  },
  {
    value: "build",
    label: "build",
    hint: "Changes that affect the build system or external dependencies",
    emoji: "\u{1F6A7}",
    trailer: "Changelog: build"
  },
  {
    value: "ci",
    label: "ci",
    hint: "Changes to our CI configuration files and scripts",
    emoji: "\u{1F916}",
    trailer: "Changelog: ci"
  },
  {
    value: "chore",
    label: "chore",
    hint: "Other changes that do not modify src or test files",
    emoji: "\u{1F9F9}",
    trailer: "Changelog: chore"
  },
  { value: "", label: "none" }
];
var DEFAULT_SCOPE_OPTIONS = [
  { value: "app", label: "app" },
  { value: "shared", label: "shared" },
  { value: "server", label: "server" },
  { value: "tools", label: "tools" },
  { value: "", label: "none" }
];
var COMMIT_FOOTER_OPTIONS = [
  {
    value: "closes",
    label: "closes <issue/ticket>",
    hint: "Attempts to infer ticket from branch"
  },
  {
    value: "trailer",
    label: "trailer",
    hint: "Appends trailer based on commit type"
  },
  {
    value: "breaking-change",
    label: "breaking change",
    hint: "Add breaking change"
  },
  { value: "deprecated", label: "deprecated", hint: "Add deprecated change" },
  { value: "custom", label: "custom", hint: "Add a custom footer" }
];
var CUSTOM_SCOPE_KEY = "custom";
var Z_FOOTER_OPTIONS = import_zod2.z.enum([
  "closes",
  "trailer",
  "breaking-change",
  "deprecated",
  "custom"
]);
var Z_BRANCH_FIELDS = import_zod2.z.enum(["user", "version", "type", "ticket", "description"]);
var Z_BRANCH_CONFIG_FIELDS = import_zod2.z.enum([
  "branch_user",
  "branch_version",
  "branch_type",
  "branch_ticket",
  "branch_description"
]);
var BRANCH_ORDER_DEFAULTS = ["user", "version", "type", "ticket", "description"];
var Z_BRANCH_ACTIONS = import_zod2.z.enum(["branch", "worktree"]);
var FOOTER_OPTION_VALUES = [
  "closes",
  "trailer",
  "breaking-change",
  "deprecated",
  "custom"
];
var BRANCH_ACTION_OPTIONS = [
  { value: "branch", label: "Branch" },
  { value: "worktree", label: "Worktree" }
];
function load_setup(cli_name = " better-commits ") {
  console.clear();
  p.intro(`${import_picocolors.default.bgCyan(import_picocolors.default.black(cli_name))}`);
  const root = get_git_root();
  const root_path = `${root}/${CONFIG_FILE_NAME}`;
  if (import_fs.default.existsSync(root_path)) {
    p.log.step("Found repository config");
    return read_config_from_path(root_path);
  }
  const home_path = get_default_config_path();
  if (import_fs.default.existsSync(home_path)) {
    p.log.step("Found global config");
    return read_config_from_path(home_path);
  }
  const default_config = Config.parse({});
  p.log.step(
    "Config not found. Generating default .better-commit.json at $HOME"
  );
  import_fs.default.writeFileSync(home_path, JSON.stringify(default_config, null, 4));
  return default_config;
}
function read_config_from_path(config_path) {
  let res = null;
  try {
    res = JSON.parse(import_fs.default.readFileSync(config_path, "utf8"));
  } catch (err) {
    p.log.error("Invalid JSON file. Exiting.\n" + err);
    process.exit(0);
  }
  return validate_config(res);
}
function validate_config(config) {
  try {
    return Config.parse(config);
  } catch (err) {
    console.log((0, import_zod_validation_error.fromZodError)(err).message);
    process.exit(0);
  }
}
function infer_type_from_branch(types) {
  let branch = "";
  try {
    branch = (0, import_child_process.execSync)("git branch --show-current", {
      stdio: "pipe"
    }).toString();
  } catch (err) {
    return "";
  }
  const found = types.find((t) => {
    const start_dash = new RegExp(`^${t}-`);
    const between_dash = new RegExp(`-${t}-`);
    const before_slash = new RegExp(`${t}/`);
    const re = [
      branch.match(start_dash),
      branch.match(between_dash),
      branch.match(before_slash)
    ].filter((v) => v != null);
    return re?.length;
  });
  return found ?? "";
}
function get_git_root() {
  let path = ".";
  try {
    path = (0, import_child_process.execSync)("git rev-parse --show-toplevel").toString().trim();
  } catch (err) {
    p.log.warn(
      "Could not find git root. If in a --bare repository, ignore this warning."
    );
  }
  return path;
}
function get_default_config_path() {
  return (0, import_os.homedir)() + "/" + CONFIG_FILE_NAME;
}
function addNewLine(arr, i) {
  return i === arr.length - 1 ? "" : "\n";
}
function clean_commit_title(title) {
  const title_trimmed = title.trim();
  const remove_period = title_trimmed.endsWith(".");
  if (remove_period) {
    return title_trimmed.substring(0, title_trimmed.length - 1).trim();
  }
  return title.trim();
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  A_FOR_ALL,
  BRANCH_ACTION_OPTIONS,
  BRANCH_ORDER_DEFAULTS,
  CACHE_PROMPT,
  COMMIT_FOOTER_OPTIONS,
  CONFIG_FILE_NAME,
  CUSTOM_SCOPE_KEY,
  DEFAULT_SCOPE_OPTIONS,
  DEFAULT_TYPE_OPTIONS,
  FOOTER_OPTION_VALUES,
  OPTIONAL_PROMPT,
  REGEX_SLASH_NUM,
  REGEX_SLASH_TAG,
  REGEX_SLASH_UND,
  REGEX_START_NUM,
  REGEX_START_TAG,
  REGEX_START_UND,
  SPACE_TO_SELECT,
  Z_BRANCH_ACTIONS,
  Z_BRANCH_CONFIG_FIELDS,
  Z_BRANCH_FIELDS,
  Z_FOOTER_OPTIONS,
  addNewLine,
  clean_commit_title,
  get_default_config_path,
  get_git_root,
  infer_type_from_branch,
  load_setup
});
